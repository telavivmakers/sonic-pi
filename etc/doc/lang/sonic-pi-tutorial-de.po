# This file is distributed under the same license as the Sonic Pi package.
# Do not edit this file, use Weblate instead.
# Read TRANSLATION.md for more information.
msgid ""
msgstr ""
"Project-Id-Version: Sonic Pi\n"
"PO-Revision-Date: 2022-04-17 23:10+0000\n"
"Last-Translator: Michael Bölling <michael.boelling@gmail.com>\n"
"Language-Team: German <https://hosted.weblate.org/projects/sonic-pi/tutorial/"
"de/>\n"
"Language: de\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Weblate 4.12-dev\n"

#: 01-Welcome-to-Sonic-Pi.md:1
msgid "1 Welcome to Sonic Pi"
msgstr "1 Willkommen bei Sonic Pi"

#: 01-Welcome-to-Sonic-Pi.md:3
msgid "Welcome friend :-)"
msgstr "Hallo zusammen :-)"

#: 01-Welcome-to-Sonic-Pi.md:5
msgid ""
"Welcome to Sonic Pi. Hopefully you're as excited to get started making crazy s"
"ounds as I am to show you. It's going to be a really *fun* ride where you'll l"
"earn all about music, synthesis, programming, composition, performance and mor"
"e."
msgstr ""
"Willkommen in Sonic Pi! Hoffentlich bist du ebenso gespannt darauf zu "
"lernen, wie man mit Sonic Pi verrückte Klänge machen kann, wie ich gespannt "
"darauf bin es dir zu zeigen. Es wird eine wirklich *unterhaltsame* Reise "
"werden, bei der du alles über Musik, Synthese, Programmieren, Komposition, "
"Aufführung (Performance) lernen wirst - und mehr."

#: 01-Welcome-to-Sonic-Pi.md:10
msgid ""
"But wait, how rude of me! Let me introduce myself - I'm [Sam Aaron](https://tw"
"itter.com/samaaron) - the chap that created Sonic Pi. You can find me at [@sam"
"aaron](http://twitter.com/samaaron) on Twitter and I'd be more than happy to s"
"ay hello to you. You might also be interested in finding out more about my [Li"
"ve Coding Performances](https://youtube.com/samaaron) where I code with Sonic "
"Pi live in front of audiences."
msgstr ""
"Aber halt, wie unhöflich von mir! Darf ich mich vorstellen? Ich bin [Sam "
"Aaron](http://twitter.com/samaaron) der Typ, der Sonic Pi entwickelt hat. Du "
"kannst mich unter [@samaaron](http://twitter.com/samaaron) auf Twitter "
"finden, und ich würde mich sehr freuen dich dort begrüßen zu können. "
"Vielleicht interessierst du dich auch für meine [Live-Coding-"
"Performances](https://youtube.com/samaaron), wo ich meine Musik mit Sonic Pi "
"direkt vor Publikum schreibe."

#: 01-Welcome-to-Sonic-Pi.md:18
msgid ""
"If you have any thoughts, or ideas for improving Sonic Pi - please pass them o"
"n - feedback is so helpful. You never know, your idea might be the next big fe"
"ature!"
msgstr ""
"Wenn du irgendwelche Vorschläge oder Ideen zur Verbesserung von Sonic Pi "
"hast – bitte schreibe sie mir – eure Kommentare sind sehr hilfreich. Es wäre "
"ja schließlich auch möglich, dass deine Idee zu der nächsten großen Funktion "
"in Sonic Pi wird!"

#: 01-Welcome-to-Sonic-Pi.md:22
msgid ""
"This tutorial is divided up into sections grouped by category. Whilst I've wri"
"tten it to have an easy learning progression from start to finish, feel very f"
"ree just to dip in and out of sections as you see fit. If you feel that there'"
"s something missing, do let me know and I'll consider it for a future version."
msgstr ""
"Dieses Tutorial ist in Abschnitte aufgeteilt, die nach Themen gruppiert "
"sind. Auch wenn ich es so geschrieben habe, dass du damit vom Anfang bis zum "
"Ende einfach lernen kann, kannst du ebenso gut an jeder anderen Stelle "
"einsteigen, und wieder aussteigen, ganz wie es dir gefällt. Wenn du etwas im "
"Tutorial vermisst, lass es mich wissen, und ich werde überlegen, wie ich das "
"in zukünftige Versionen einbauen kann."

#: 01-Welcome-to-Sonic-Pi.md:28
msgid ""
"Finally, watching others live code is a really great way to learn. I regularly"
" stream live on [https://youtube.com/samaaron](http://youtube.com/samaaron) so"
" please do drop by, say hi and ask me lots of questions :-)"
msgstr ""
"Anderen beim Live-Coding zuzusehen ist eine wirklich großartige Art zu "
"lernen. Ich streame regelmäßig live auf [http://youtube.com/"
"samaaron](http://youtube.com/samaaron). Also schau gerne vorbei, sag Hallo "
"und stell' mir jede Menge Fragen :-)"

#: 01-Welcome-to-Sonic-Pi.md:33
msgid "OK, let's get started..."
msgstr "Ok, legen wir los …"

#: 01.1-Live-Coding.md:1
msgid "1.1 Live Coding"
msgstr "1.1 Live-Coding"

#: 01.1-Live-Coding.md:3 09-Live-Coding.md:3 09.1-Live-Coding-Fundamentals.md:3
#: A.02-live-coding.md:3
msgid "Live Coding"
msgstr "Live-Coding"

#: 01.1-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd *modify code live* to make music, just like you might perform live with a g"
"uitar. This means that given some practice you can take Sonic Pi on stage and "
"gig with it."
msgstr ""
"Einer der aufregendsten Aspekte von Sonic Pi ist, dass du Code *live "
"schreiben und verändern* kannst, um Musik zu machen. Ganz so wie du auch mit "
"einer Gitarre auftreten würdest. Mit anderen Worten: Wenn du etwas Übung "
"hast, kannst du Sonic Pi mit auf die Bühne nehmen und jammen."

#: 01.1-Live-Coding.md:10
msgid "Free your mind"
msgstr "Mach den Kopf frei"

#: 01.1-Live-Coding.md:12
msgid ""
"Before we get into the real details of how Sonic Pi works in the rest of this "
"tutorial, I'd like to give you an experience of what it's like to live code. D"
"on't worry if you don't understand much (or any) of this. Just try to hold ont"
"o your seats and enjoy..."
msgstr ""
"Bevor wir in diesem Tutorial in die ernsten Details von Sonic Pi eintauchen, "
"möchte ich dir erst einmal zeigen, wie sich das anfühlt live Musik zu "
"programmieren. Keine Sorge, wenn du nicht alles (oder auch nur irgend etwas "
"davon) verstehst. Das macht nichts. Versuch' an deinem Platz zu bleiben - "
"und genieße ..."

#: 01.1-Live-Coding.md:17
msgid "A live loop"
msgstr "Ein Live-Loop"

#: 01.1-Live-Coding.md:19
msgid "Let's get started, copy the following code into an empty buffer:"
msgstr "Lass uns loslegen. Kopiere den folgenden Code in einen leeren Puffer:"

#: 01.1-Live-Coding.md:21
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :flibble do\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 0.5\n"
"end"

#: 01.1-Live-Coding.md:28
msgid ""
"Now, press the `Run` button and you'll hear a nice fast bass drum beating away"
". If at any time you wish to stop the sound just hit the `Stop` button. Althou"
"gh don't hit it just yet... Instead, follow these steps:"
msgstr ""
"Jetzt klicke die `Ausführen`-Schaltfläche und du wirst eine schöne Bass-Drum "
"hören, die schnell vor sich hin hämmert. Mit einem Klick auf den `Stopp`-"
"Schaltfläche hört die Musik wieder auf. Aber klicke bitte noch nicht gleich "
"darauf ... probiere stattdessen die folgenden Schritte aus:"

#: 01.1-Live-Coding.md:32
msgid "Make sure the bass drum sound is still running"
msgstr "Lass den Bass-Drum-Sound weiter laufen"

#: 01.1-Live-Coding.md:33
msgid "Change the `sleep` value from `0.5` to something higher like `1`."
msgstr "Setze den Wert von `sleep` von `0.5` auf einen höheren Wert, etwa `1`."

#: 01.1-Live-Coding.md:34
msgid "Press the `Run` button again"
msgstr "Klicke wieder die `Ausführen`-Schaltfläche"

#: 01.1-Live-Coding.md:35
msgid "Notice how the drum speed has changed."
msgstr ""
"Achte darauf, wie die Geschwindigkeit des Bass-Drum-Beats sich verändert hat."

#: 01.1-Live-Coding.md:36
msgid ""
"Finally, *remember this moment*, this is the first time you've live coded with"
" Sonic Pi and it's unlikely to be your last..."
msgstr ""
"Und schließlich, *merke dir diesen Moment*! Dies war das erste Mal, dass du "
"mit Sonic Pi live Programm-Code geschrieben hast. Und es ist wahrscheinlich, "
"dass es nicht das letzte Mal gewesen sein wird …"

#: 01.1-Live-Coding.md:39
msgid ""
"Ok, that was simple enough. Let's add something else into the mix. Above `samp"
"le :bd_haus` add the line `sample :ambi_choir, rate: 0.3`. Your code should lo"
"ok like this:"
msgstr ""
"Ok, das war einfach. Fügen wir etwas anderes hinzu. Über `sample :bd_haus` "
"füge die Zeile `sample :ambi_choir, rate: 0.3` ein. Dein Programm-Code "
"sollte dann so aussehen:"

#: 01.1-Live-Coding.md:43
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:51
msgid ""
"Now, play around. Change the rates - what happens when you use high values, or"
" small values or negative values? See what happens when you change the `rate:`"
" value for the `:ambi_choir` sample just slightly (say to `0.29`). What happen"
"s if you choose a really small `sleep` value? See if you can make it go so fas"
"t your computer will stop with an error because it can't keep up (if that happ"
"ens, just choose a bigger `sleep` time and hit `Run` again)."
msgstr ""
"So, jetzt spiele damit herum. Verändere die Werte für `rate:` – was "
"passiert, wenn du hohe, niedrige oder negative Zahlen einträgst? Achte "
"darauf, wie sich eine sehr kleine Änderung des `rate:`-Wertes auf das "
"`:ambi_choir`-Sample auswirkt (z. B. 0.29)? Was passiert wenn du einen "
"wirklich kleinen `sleep`-Wert einträgst? Probiere aus, ob du es so schnell "
"machen kannst, dass du einen Stopp und eine Fehlermeldung deines Computers "
"auslöst, weil er nicht mehr hinterher kommt. (Wenn das geschieht, nimm "
"einfach wieder einen größeren Wert für `sleep` und klicke wieder auf "
"`Ausführen`)."

#: 01.1-Live-Coding.md:59
msgid "Try commenting one of the `sample` lines out by adding a `#` to the beginning:"
msgstr ""
"Versuche eine Zeile mit dem `sample`-Code auszukommentieren, indem du ein `#`"
" an ihren Anfang schreibst:"

#: 01.1-Live-Coding.md:62
#, no-wrap
msgid ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :flibble do\n"
"  sample :ambi_choir, rate: 0.3\n"
"#  sample :bd_haus, rate: 1\n"
"  sleep 1\n"
"end"

#: 01.1-Live-Coding.md:70
msgid ""
"Notice how it tells the computer to ignore it, so we don't hear it. This is ca"
"lled a comment. In Sonic Pi we can use comments to remove and add things into "
"the mix."
msgstr ""
"Beachte wie das Zeichen den Computer anweist die Zeile zu ignorieren - wir "
"hören das Ergebnis des Befehls in dieser Zeile nicht mehr. Was hinter einem "
"`#` steht ist ein Kommentar. Wir können dieses Zeichen in Sonic Pi benutzen, "
"um Dinge schnell aus dem Mix zu entfernen und später wieder hinzuzuzufügen."

#: 01.1-Live-Coding.md:74
msgid ""
"Finally, let me leave you something fun to play with. Take the code below, and"
" copy it into a spare buffer. Now, don't try to understand it too much other t"
"han see that there are two loops - so two things going round at the same time."
" Now, do what you do best - experiment and play around. Here are some suggesti"
"ons:"
msgstr ""
"Abschließend möchte ich dir etwas unterhaltsames zum Spielen geben. Nimm den "
"Code unten und kopiere ihn in einen freien Puffer. Versuche nicht mehr davon "
"zu verstehen, als dass da zwei Loops sind – zwei Schleifen, die gleichzeitig "
"laufen und sich endlos wiederholen. Jetzt tue, was du am besten kannst - "
"experimentiere und spiele damit herum. Hier ein paar Vorschläge:"

#: 01.1-Live-Coding.md:80
msgid "Try changing the blue `rate:` values to hear the sample sound change."
msgstr ""
"Ändere die blauen Werte hinter `rate:` und achte darauf, wie sich das Sample "
"verändert."

#: 01.1-Live-Coding.md:81
msgid ""
"Try changing the `sleep` times and hear that both loops can spin round at diff"
"erent rates."
msgstr ""
"Ändere die `sleep`-Zeiten, und achte darauf, wie die beiden Schleifen mit "
"unterschiedlicher Geschwindigkeit aneinander vorbei laufen."

#: 01.1-Live-Coding.md:83
msgid ""
"Try uncommenting the sample line (remove the `#`) and enjoy the sound of the g"
"uitar played backwards."
msgstr ""
"Versuche die auskommentierte Sample-Zeile zu aktivieren (entferne das `#`) "
"und genieße den Klang einer umgekehrt abgespielten Gitarre."

#: 01.1-Live-Coding.md:85
msgid ""
"Try changing any of the blue `mix:` values to numbers between `0` (not in the "
"mix) and `1` (fully in the mix)."
msgstr ""
"Probiere, die blauen Werte für `mix:` auf Werte zwischen `0` (nicht im Mix) "
"und `1` (voll im Mix) zu ändern."

#: 01.1-Live-Coding.md:88
msgid ""
"Remember to press `Run` and you'll hear the change next time the loop goes rou"
"nd. If you end up in a pickle, don't worry - hit `Stop`, delete the code in th"
"e buffer and paste a fresh copy in and you're ready to jam again. Making mista"
"kes is how you'll learn the quickest..."
msgstr ""
"Denke daran `Ausführen` zu klicken, dann hörst du sofort beim nächsten "
"Durchlauf eines Loops deine Änderungen. Wenn irgendwas schiefgeht – macht "
"nichts! Klicke auf `Stopp`, lösche den kaputten Code im Puffer und fange mit "
"einer frischen Kopie noch einmal von vorn an zu jammen. Am schnellsten "
"lernst du, wenn du Fehler machst…"

#: 01.1-Live-Coding.md:94
#, no-wrap
msgid ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :guit do\n"
"  with_fx :echo, mix: 0.3, phase: 0.25 do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"#  sample :guit_em9, rate: -0.5\n"
"  sleep 8\n"
"end\n"
"live_loop :boom do\n"
"  with_fx :reverb, room: 1 do\n"
"    sample :bd_boom, amp: 10, rate: 1\n"
"  end\n"
"  sleep 8\n"
"end"

#: 01.1-Live-Coding.md:111
msgid ""
"Now, keep playing and experimenting until your curiosity about how this all ac"
"tually works kicks in and you start wondering what else you can do with this. "
"You're now ready to read the rest of the tutorial."
msgstr ""
"Spiele solange herum und experimentiere, bis deine Neugierde einsetzt und du "
"dich fragst, wie das hier alles eigentlich wirklich funktioniert, und was "
"man noch so alles damit anstellen kann. Du bist jetzt bereit für den Rest "
"dieses Tutorials."

#: 01.1-Live-Coding.md:115
msgid "So what are you waiting for..."
msgstr "Also, worauf wartest du…"

#: 01.2-Exploring-the-Interface.md:1
msgid "1.2 Exploring the Interface"
msgstr "1.2 Die Programmoberfläche von Sonic Pi"

#: 01.2-Exploring-the-Interface.md:3
msgid "The Sonic Pi Interface"
msgstr "Die Programmoberfläche von Sonic Pi"

#: 01.2-Exploring-the-Interface.md:5
msgid ""
"Sonic Pi has a very simple interface for coding music. Let's spend a little ti"
"me exploring it."
msgstr ""
"Sonic PI hat eine sehr einfache Oberfläche für das Programmieren von Musik. "
"Schauen wir sie uns einmal genauer an."

#: 01.2-Exploring-the-Interface.md:8
msgid "![Sonic Pi Interface](../../../etc/doc/images/tutorial/GUI.png)"
msgstr "![Sonic Pi Interface](../../../etc/doc/images/tutorial/GUI.png)"

#: 01.2-Exploring-the-Interface.md:11
msgid "*A* - Play Controls"
msgstr "*A* - Wiedergabe-Steuerung"

#: 01.2-Exploring-the-Interface.md:12
msgid "*B* - Editor Controls"
msgstr "*B* - Editor-Steuerung"

#: 01.2-Exploring-the-Interface.md:13
msgid "*C* - Info and Help"
msgstr "*C* - Info und Hilfe"

#: 01.2-Exploring-the-Interface.md:14
msgid "*D* - Code Editor"
msgstr "*D* - Code-Editor"

#: 01.2-Exploring-the-Interface.md:15
msgid "*E* - Prefs Panel"
msgstr "*E* - Einstellungen"

#: 01.2-Exploring-the-Interface.md:16
msgid "*F* - Log Viewer"
msgstr "*F* - Protokoll-Fenster"

#: 01.2-Exploring-the-Interface.md:17
msgid "*G* - Help System"
msgstr "*G* - Hilfe-System"

#: 01.2-Exploring-the-Interface.md:18
msgid "*H* - Scope Viewer"
msgstr "*H* - Oszilloskop"

#: 01.2-Exploring-the-Interface.md:19
msgid "*I* - Cue Viewer"
msgstr "*F* - Protokoll-Fenster"

#: 01.2-Exploring-the-Interface.md:21
msgid "A. Play Controls"
msgstr "A. Wiedergabe-Steuerung"

#: 01.2-Exploring-the-Interface.md:23
msgid ""
"These pink buttons are the main controls for starting and stopping sounds. The"
"re's the *Run* button for running the code in the editor, *Stop* for stopping "
"all running code, *Save* for saving the code to an external file and *Record* "
"to create a recording (a WAV file) of the sound playing."
msgstr ""
"Mittels diesen pinkfarbenen Schaltflächen kannst du Klänge abspielen und "
"stoppen. Die *Ausführen*-Schaltfläche startet den Programm-Code im Editor, "
"*Stopp* hält den laufenden Programm-Code an, *Speichern* schreibt den Code "
"in eine Datei und *Aufnehmen* nimmt die Klänge, die gerade zu hören sind (in "
"einer WAV-Datei) auf."

#: 01.2-Exploring-the-Interface.md:29
msgid "B. Editor Controls"
msgstr "B. Editor-Steuerung"

#: 01.2-Exploring-the-Interface.md:31
msgid ""
"These orange buttons allow you to manipulate the code editor. The *Size +* and"
" *Size -* buttons allow you to make the text bigger and smaller."
msgstr ""
"Diese orangenen Schaltflächen erlauben dir, den Code-Editor zu manipulieren. "
"Mit den *Size +* und *Size -* Knöpfen kannst du den Text vergrößern oder "
"verkleinern."

#: 01.2-Exploring-the-Interface.md:35
msgid "C. Info and Help"
msgstr "C. Information und Hilfe"

#: 01.2-Exploring-the-Interface.md:37
msgid ""
"These blue buttons give you access to information, help and preferences. The *"
"Info* button will open up the information window which contains information ab"
"out Sonic Pi itself - the core team, history, contributors and community. The "
"*Help* button toggles the help system (*G*) and the *Prefs* button toggles the"
" preferences window which allows you to control some basic system parameters."
msgstr ""
"Die blauen Schaltflächen bieten dir Zugriff auf Informationen, die Hilfe und "
"die Voreinstellungen. Der *Info*-Schalter öffnet ein Fenster mit "
"Informationen über Sonic Pi selbst - das Entwickler-Team, Geschichte, "
"Mitwirkende und Community. Der *Help*-Schalter zeigt/verbirgt das eingebaute "
"Hilfesystem (*F*) und *Prefs* zeigt/verbirgt das Fenster, wo du einige "
"grundsätzliche Einstellungen vornehmen kannst."

#: 01.2-Exploring-the-Interface.md:44
msgid "D. Code Editor"
msgstr "D. Code-Editor"

#: 01.2-Exploring-the-Interface.md:46
msgid ""
"This is the area where you'll write your code and compose/perform music. It's "
"a simple text editor where you can write code, delete it, cut and paste, etc. "
"Think of it like a very basic version of Word or Google Docs. The editor will "
"automatically colour words based on their meaning in the code. This may seem s"
"trange at first, but you'll soon find it very useful. For example, you'll know"
" something is a number because it is blue."
msgstr ""
"In diesem Bereich schreibst du deinen Code und komponierst und führst deine "
"Musik auf. Es ist ein einfacher Texteditor, in dem du Code schreiben, "
"löschen, ausschneiden und einfügen kannst u.s.w. Stelle es dir als sehr "
"einfache Version von Word oder Google Docs vor. Der Editor färbt bestimmte "
"Begriffe automatisch ein, je nachdem, welche Bedeutung sie innerhalb des "
"Codes haben. Am Anfang mag dir das vielleicht ein wenig merkwürdig "
"erscheinen, aber du wirst es bald sehr nützlich finden. Zum Beispiel "
"erkennst du Zahlen sofort daran, dass sie blau sind."

#: 01.2-Exploring-the-Interface.md:54
msgid "E. Prefs Panel"
msgstr "E. Einstellungen"

#: 01.2-Exploring-the-Interface.md:56
msgid ""
"Sonic Pi supports a number of tweakable preferences which can be accessed by t"
"oggling the *prefs* button in the Info and Help button set. This will toggle t"
"he visibility of the Prefs Panel which includes a number of options to be chan"
"ged. Examples are forcing mono mode, inverting stereo, toggling log output ver"
"bosity and also a volume slider and audio selector on the Raspberry Pi."
msgstr ""
"Sonic Pi enthält eine Reihe von veränderbaren Einstellungen, die über den "
"*Prefs*-Schalter im Info- und Hilfe-Menü erreicht werden können. In den "
"Einstellungen sind einige Optionen verfügbar, die geändert werden können, "
"darunter z. B.: Wechsel in den Mono-Modus, Tauschen der Stereokanäle, "
"Einstellung der Ausführlichkeit der Protokoll-Ausgabe und ein Volumen-"
"Regler. Auf einem Raspberry Pi kannst du hier auch das Ausgabemodul für den "
"Ton auswählen."

#: 01.2-Exploring-the-Interface.md:63
msgid "F. Log Viewer"
msgstr "F. Protokoll-Fenster"

#: 01.2-Exploring-the-Interface.md:65
msgid ""
"When you run your code, information about what the program is doing will be di"
"splayed in the log viewer. By default, you'll see a message for every sound yo"
"u create with the exact time the sound was triggered. This is very useful for "
"debugging your code and understanding what your code is doing."
msgstr ""
"Wenn du deinen Programm-Code laufen lässt, siehst du im Protokoll-Fenster, "
"was das Programm gerade tut. Standardmäßig siehst du eine Nachricht für "
"jeden erzeugten Klang und die exakte Zeit, wann der Klang ausgelöst wurde. "
"Bei der Suche nach Fehlern (Debugging) in deinem Programm-Code kann das sehr "
"hilfreich sein, und du verstehst schneller, was dein Code macht."

#: 01.2-Exploring-the-Interface.md:71
msgid "G. Help System"
msgstr "G. Hilfe-System"

#: 01.2-Exploring-the-Interface.md:73
msgid ""
"One of the most important parts of the Sonic Pi interface is the help system w"
"hich appears at the bottom of the window. This can be toggled on and off by cl"
"icking on the blue *Help* button. The help system contains help and informatio"
"n about all aspects of Sonic Pi including this tutorial, a list of available s"
"ynths, samples, examples, FX and a full list of all the functions Sonic Pi pro"
"vides for coding music."
msgstr ""
"Eines der wichtigsten Elemente des Sonic Pi Programmfensters ist das Hilfe-"
"System, das am unteren Ende des Fensters auftaucht. Du kannst es ein- und "
"ausblenden, indem du den blauen `Hilfe`-Schalter klickst. Das Hilfe-System "
"zeigt Hilfe und Informationen zu allen Aspekten von Sonic Pi an, "
"einschließlich dieses Tutorials, einer Liste der mitgelieferten Synthesizer, "
"Samples, Beispiele, Effekte (FX) sowie eine komplette Liste aller Funktionen "
"(Sprachbefehle), die Sonic Pi zum Coden von Musik bereitstellt."

#: 01.2-Exploring-the-Interface.md:81
msgid "H. Scope Viewer"
msgstr "H. Oszilloskop"

#: 01.2-Exploring-the-Interface.md:83
msgid ""
"The scope viewer allows you to see the sound you're hearing. You can easily se"
"e that the saw wave looks like a saw and that the basic beep is a curvey sine "
"wave. You can also see the difference between loud and quiet sounds by the siz"
"e of the lines. There are 3 scopes to play with - the default is a combined sc"
"ope for the left and right channels, there is a stereo scope which draws a sep"
"arate scope for each channel. Finally there is a Lissajous curve scope which w"
"ill show the phase relationship between the left and right channels and allows"
" you to draw pretty pictures with sound (https://en.wikipedia.org/wiki/Lissajo"
"us_curve)."
msgstr ""
"Das Oszilloskop kann dir die Töne die du hörst, anzeigen. Du kannst leicht "
"erkennen, dass die Sägezahnwelle wie eine Säge aussieht und der Beep wie "
"eine kurvige Sinus-Welle. Du kannst auch den Unterschied zwischen lauten und "
"leisen Tönen anhand der Größe der Linien erkennen. Es gibt drei "
"Oszilloskope, mit denen du spielen kannst. Standard ist ein aus dem linken "
"und rechten Kanal kombiniertes Oszilloskop, es gibt daneben ein Stereo-"
"Oszilloskop, das beide Kanäle einzeln anzeigt. Und zu guter Letzt gibt es "
"das Lissajous-Oszilloskop, das dir die Phasen-Beziehung zwischen dem linken "
"und rechten Kanal anzeigt - es ermöglicht dir auch das Zeichnen von Bildern "
"mit Klängen (https://de.wikipedia.org/wiki/Lissajous-Figur)."

#: 01.2-Exploring-the-Interface.md:93
msgid "I. Cue Viewer"
msgstr "I. Protokoll-Fenster"

#: 01.2-Exploring-the-Interface.md:95
msgid ""
"All internal and external events (called cues in Sonic Pi) are automatically l"
"ogged in the Cue Viewer. For example, if you have a MIDI controller connected "
"and press one of its buttons, you'll see a new cue event in the Cue Viewer tel"
"ling you the name of the controller and which button you pressed. Once you've "
"mastered the basics of making and producing sounds, you'll start to want to cu"
"e sounds or whole sections of sounds based on events such as these. A cue even"
"t is just an indication that something happened. For example, every time a liv"
"e loop spins round, it sends a cue event out which is logged in the Cue Viewer"
". Also, external events such as MIDI messages from connected MIDI equipment an"
"d OSC messages from other programs or computers are also displayed in the Cue "
"Viewer. It is also possible to directly generate cue events using the `cue` fu"
"nction. Anything that appears in the Cue Viewer can be used to trigger somethi"
"ng happening. This is covered in more detail in Sections 10 to 12 of this tuto"
"rial."
msgstr ""
"Alle internen und externen Ereignisse (in Sonic Pi Cues genannt) werden "
"automatisch im Cue-Protokoll angezeigt. Betätigst du zum Beispiel einen "
"verbundenen MIDI-Controller, erscheint die Bezeichnung des betätigten "
"Schalters/Reglers und des Controllers im Protokoll. Sobald du die Grundlagen "
"der Erzeugung und Hervorbringung von Klängen gemeistert hast, wirst du auch "
"Cues für Klänge oder ganze Abschnitte von Klängen mit diesen Mitteln steuern "
"wollen. Cue-Ereignisse (cue events) sind Indikatoren dafür, dass etwas "
"geschehen ist. Zum Beispiel schickt ein Live-Loop jedes Mal wenn er eine "
"Runde ausführt ein solches Cue-Ereignis, das im Cue-Protokoll angezeigt "
"wird. Auch externe Ereignisse, wie MIDI-Signale von angeschlossenen MIDI-"
"Geräten, und OSC-Signale von anderen Programmen und Computern werden im Cue-"
"Protokoll angezeigt. Zudem ist es auch möglich mithilfe der `cue`-Funktion "
"Einträge im Protokoll zu generieren. In den Abschnitten 10 bis 12 lernst du "
"im einzelnen, wie du Protokoll-Einträge als Trigger (Auslöser) für andere "
"Abläufe benutzen kannst."

#: 01.3-Learning-through-Play.md:1
msgid "1.3 Learning through Play"
msgstr "1.3 Lernen durch Spielen"

#: 01.3-Learning-through-Play.md:3
msgid "Learning through Play"
msgstr "Lernen durch Spielen"

#: 01.3-Learning-through-Play.md:5
msgid ""
"Sonic Pi encourages you to learn about both computing and music through play a"
"nd experimentation. The most important thing is that you're having fun, and be"
"fore you know it you'll have accidentally learned how to code, compose and per"
"form."
msgstr ""
"Sonic Pi ermutigt dich etwas über Computer und Musik zu lernen - durch "
"Spielen und Experimentieren. Das aller Wichtigste ist, dass du Spaß hast, "
"und bevor du es überhaupt bemerkst, wirst du zufällig gelernt haben Code zu "
"schreiben, Musik zu komponieren und aufzuführen."

#: 01.3-Learning-through-Play.md:10
msgid "There are no mistakes"
msgstr "Es gibt keine Fehler"

#: 01.3-Learning-through-Play.md:12
msgid ""
"Whilst we're on this subject, let me just give you one piece of advice I've le"
"arned over my years of live coding with music - *there are no mistakes, only o"
"pportunities*. This is something I've often heard in relation to jazz but it w"
"orks equally well with live coding. No matter how experienced you are - from a"
" complete beginner to a seasoned live coder, you'll run some code that has a c"
"ompletely unexpected outcome. It might sound insanely cool - in which case run"
" with it. However, it might sound totally jarring and out of place. It doesn't"
" matter that it happened - what matters is what you do next with it. Take the "
"sound, manipulate it and morph it into something awesome. The crowd will go *w"
"ild*."
msgstr ""
"Wo wir gerade dabei sind, möchte ich dir noch einen Rat geben, etwas das ich "
"in den Jahren, in denen ich Musik live programmiert habe gelernt habe - *es "
"gibt keine Fehler, nur Gelegenheiten*. Ich habe das oft im Bezug auf Jazz "
"gehört, aber es trifft ebenso gut auf Live-Coding zu. Es spielt keine Rolle, "
"wie viel Erfahrung du hast, ob du ein absoluter Anfänger oder ein "
"erfahrender Live-Coder bist. Du wirst Code laufen lassen, der vollkommen "
"unerwartete Ergebnisse hervorbringt. Kann sein, dass es unglaublich cool "
"klingt - dann mache da weiter. Wie dem auch sei, kann sein, dass es "
"schrecklich klingt und vollkommen fehl am Platz ist. Es ist egal, wenn das "
"passiert, wichtig ist, was du dann damit als Nächstes tust. Nimm den Klang, "
"bearbeite ihn und verwandle ihn in etwas Tolles. Die Menge wird "
"*durchdrehen*."

#: 01.3-Learning-through-Play.md:24
msgid "Start Simple"
msgstr "Beginne einfach"

#: 01.3-Learning-through-Play.md:26
msgid ""
"When you're learning, it's tempting to want to do amazing things *now*. Howeve"
"r, just hold that thought and see it as a distant goal to reach *later*. For n"
"ow, instead think of the *simplest* thing you could write which would be fun a"
"nd rewarding that's a small step towards the amazing thing you have in your he"
"ad. Once you have an idea about that simple step, then try and build it, play "
"with it and then see what new ideas it gives you. Before long you'll be too bu"
"sy having fun and making real progress."
msgstr ""
"Wenn du lernst, willst du die tollen Sachen vielleicht am liebsten *sofort* "
"machen. Halte solche Gedanken fest, aber sieh sie als ein Ziel an, welches "
"du etwas *später* erreichen wirst. Denke zunächst erst einmal an die "
"*einfachste* Sache, die du schreiben kannst, die dir Spaß machen würde und "
"dir lohnend erscheint; diese Sache ist ein kleiner Schritt auf dem Weg zu "
"den faszinierenden Dingen, die dir im Kopf herum gehen. Wenn dir die Idee zu "
"diesem einfachen Schritt klar ist, versuche ihn umzusetzen, spiele damit "
"herum und finde heraus, auf was für neue Ideen du dadurch kommst. Du wirst "
"bald sehr viel Spaß daran haben und echte Fortschritte machen."

#: 01.3-Learning-through-Play.md:35
msgid "Just make sure to share your work with others!"
msgstr "Stelle sicher, dass du deine Werke mit anderen teilst!"

#: 02-Synths.md:1
msgid "2 Synths"
msgstr "2 Synthesizer"

#: 02-Synths.md:3 02.3-Switching-Synths.md:11
msgid "Synths"
msgstr "Synthesizer"

#: 02-Synths.md:5
msgid "OK, enough of the intros - let's get into some sound."
msgstr "Ok, genug der Einführung - lasst uns Klänge machen."

#: 02-Synths.md:7
msgid ""
"In this section we'll cover the basics of triggering and manipulating synths. "
"Synth is short for synthesiser which is a fancy word for something which creat"
"es sounds. Typically synths are quite complicated to use - especially analog s"
"ynths such as Eurorack modules connected together by a mess of wires. However,"
" Sonic Pi gives you much of that power in a very simple and approachable manne"
"r."
msgstr ""
"In diesem Abschnitt behandeln wir die Grundlagen des Triggerns (Auslösen) "
"und Manipulierens von Synths. Synth ist die Kurzform von Synthesizer - dem "
"genauen Wortlaut für etwas, das Klänge erzeugt. Typischerweise sind Synths "
"ziemlich kompliziert im Gebrauch, vor allem analoge Synths wie Eurorack-"
"Module, untereinander verbunden mit einem Durcheinander von Kabeln. Sonic Pi "
"gibt dir eine Vielzahl solcher Möglichkeiten auf eine einfache und gut "
"zugängliche Art."

#: 02-Synths.md:14
msgid ""
"Don't be fooled by the immediate simplicity of Sonic Pi's interface. You can g"
"et very deep into very sophisticated sound manipulation if that's your thing. "
"Hold on to your hats..."
msgstr ""
"Lass dich nicht täuschen von der einfachen Programmoberfläche von Sonic Pi. "
"Wenn du willst, kannst du damit sehr tief in sehr ausgeklügelte "
"Klangmanipulationen eintauchen. Also festhalten..."

#: 02.1-Your-First-Beeps.md:1
msgid "2.1 Your First Beeps"
msgstr "2.1 Deine ersten Beeps"

#: 02.1-Your-First-Beeps.md:3
msgid "Your First Beeps"
msgstr "Deine ersten Beeps"

#: 02.1-Your-First-Beeps.md:5
msgid "Take a look at the following code:"
msgstr "Sieh dir den folgenden Code an:"

#: 02.1-Your-First-Beeps.md:7 02.4-Durations-with-Envelopes.md:49
#: A.20-creative-coding-in-the-classroom.md:158
#, no-wrap
msgid "play 70"
msgstr "play 70"

#: 02.1-Your-First-Beeps.md:11
msgid ""
"This is where it all starts. Go ahead, copy and paste it into the code window "
"at the top of the app (the big white space under the Run button). Now, press R"
"un..."
msgstr ""
"Damit fängt alles an. Leg los, kopiere und setze das in das Code-Fenster "
"oben im Programm ein (der große weiße Bereich unter der Ausführen-"
"Schaltfläche). Nun klicke auf Ausführen..."

#: 02.1-Your-First-Beeps.md:15
msgid "Beep!"
msgstr "Beep!"

#: 02.1-Your-First-Beeps.md:17
msgid "Intense. Press it again. And again. *And again...*"
msgstr "Stark. Klicke die Schaltfläche nochmal. Und nochmal. *Und nochmal...*"

#: 02.1-Your-First-Beeps.md:19
msgid ""
"Woah, crazy, I'm sure you could keep doing that all day. But wait, before you "
"lose yourself in an infinite stream of beeps, try changing the number:"
msgstr ""
"Wow, verrückt, ich bin sicher, du könntest das den ganzen Tag lang machen. "
"Aber halt, bevor du dich in einem endlosen Strom von Piepstönen verlierst, "
"versuche es mit einer anderen Zahl:"

#: 02.1-Your-First-Beeps.md:23
#, no-wrap
msgid "play 75"
msgstr "play 75"

#: 02.1-Your-First-Beeps.md:27
msgid "Can you hear the difference? Try a lower number:"
msgstr "Hörst du den Unterschied? Nimm eine kleinere Zahl:"

#: 02.1-Your-First-Beeps.md:29
#, no-wrap
msgid "play 60"
msgstr "play 60"

#: 02.1-Your-First-Beeps.md:33
msgid ""
"So, lower numbers make lower pitched beeps and higher numbers make higher pitc"
"hed beeps. Just like on a piano, the keys at the lower part of the piano (the "
"left hand side) play lower notes and the keys on the higher part of the piano "
"(the right hand side) play higher notes."
msgstr ""
"Also, niedrigere Zahlen machen tiefere Töne und höhere Zahlen höhere Töne. "
"Wie bei einem Klavier erzeugen, von links nach rechts gesehen, die "
"*niedrigeren* Tasten weiter links tiefere Töne als die *höheren* Tasten "
"weiter rechts, die höhere Töne erzeugen."

#: 02.1-Your-First-Beeps.md:38
msgid ""
"It turns out that the C of the 4th octave (C in English notation) is identifie"
"d by the number 60. `play 60` therefore plays the C of the 4th octave. To play"
" the next piano key to the right, you have to add 1 to 60 and then type `play "
"61`, which in this case is the black key of the C sharp. To play the D, the ne"
"xt key to the right, `play 62`."
msgstr ""
"Es ist gut zu wissen, dass das C in der vierten Oktave mit der Zahl 60 "
"bezeichnet wird. `play 60` spielt also ein C der vierten Oktave. Um den "
"nächsthöheren Ton rechts davon auf der Klaviatur zu spielen, musst du 1 zu "
"60 addieren und `play 61` schreiben. Das ist dann die schwarze Taste rechts "
"vom C, ein Cis (oder C# in englischer Schreibweise). Um nun ein D, den "
"nächst höheren Ton rechts davon, zu spielen, schreibe `play 62`."

#: 02.1-Your-First-Beeps.md:40
msgid ""
"*Don't worry* if this means nothing to you - it didn't to me when I first star"
"ted. All that matters right now is that you know that *low numbers make lower "
"beeps* and *high numbers make higher beeps*."
msgstr ""
"*Keine Sorge*, wenn du keine Ahnung hast, was das alles bedeutet. Mir ging "
"es genauso als ich anfing. Für den Beginn reicht es völlig zu wissen, *"
"niedrigere Zahlen bedeuten tiefere Klänge* und *höhere Zahlen bedeuten "
"höhere Klänge*."

#: 02.1-Your-First-Beeps.md:44 08.2-Chords.md:3
msgid "Chords"
msgstr "Akkorde"

#: 02.1-Your-First-Beeps.md:46
msgid ""
"Playing a note is quite fun, but playing many at the same time can be even bet"
"ter. Try it:"
msgstr ""
"Eine Note zu spielen kann ganz lustig sein, aber mehrere zur selben Zeit zu sp"
"ielen ist noch besser. Versuche es:"

#: 02.1-Your-First-Beeps.md:49
#, no-wrap
msgid ""
"play 72\n"
"play 75\n"
"play 79"
msgstr ""
"play 72\n"
"play 75\n"
"play 79"

#: 02.1-Your-First-Beeps.md:55
msgid ""
"Jazzy! So, when you write multiple `play`s, they all play at the same time. Tr"
"y it for yourself - which numbers sound good together? Which sound terrible? E"
"xperiment, explore and find out for yourself."
msgstr ""
"Jazzig! Wenn du also mehrere `play`s hinschreibst, spielen sie alle zur "
"selben Zeit. Probiere selbst aus - welche Nummern klingen gut zusammen? "
"Welche klingen fürchterlich? Experimentiere, erforsche und finde es für dich "
"selbst heraus."

#: 02.1-Your-First-Beeps.md:59
msgid "Melody"
msgstr "Melodie"

#: 02.1-Your-First-Beeps.md:61
msgid ""
"So, playing notes and chords is fun - but how about a melody? What if you want"
"ed to play one note after another and not at the same time? Well, that's easy,"
" you just need to `sleep` between the notes:"
msgstr ""
"Einzelne Noten und Akkorde zu spielen macht Spaß - aber wie wäre es mit "
"einer Melodie? Was, wenn du eine Note nach der anderen spielen wolltest und "
"nicht alle zur selben Zeit? Also, das ist ganz einfach, du brauchst nur ein "
"`sleep` zwischen den Noten:"

#: 02.1-Your-First-Beeps.md:65
#, no-wrap
msgid ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 1\n"
"play 75\n"
"sleep 1\n"
"play 79"

#: 02.1-Your-First-Beeps.md:73
msgid ""
"How lovely, a little arpeggio. So what does the `1` mean in `sleep 1`? Well it"
" means the *duration of the sleep*. It actually means sleep for one beat, but "
"for now we can think about it as sleeping for 1 second. So, what if we wanted "
"to make our arpeggio a little faster? Well, we need to use shorter sleep value"
"s. What about a half i.e. `0.5`:"
msgstr ""
"Wie hübsch, ein kleines Arpeggio. Was bedeutet die `1` in `sleep 1`? Sie "
"gibt die *Dauer von sleep* an. Tatsächlich bedeutet das: Schlafe für einen "
"Schlag. Aber vorläufig können wir uns vorstellen, dass es bedeutet: Schlafe "
"für eine Sekunde. Wie könnten wir unser Arpeggio schneller ablaufen lassen? "
"Dazu brauchen wir kürzere Werte für sleep. Wie wäre es z. B. mit der Hälfte, "
"also `0.5`:"

#: 02.1-Your-First-Beeps.md:79
#, no-wrap
msgid ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"
msgstr ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"

#: 02.1-Your-First-Beeps.md:87
msgid ""
"Notice how it plays faster. Now, try for yourself, change the times - use diff"
"erent times and notes."
msgstr ""
"Achte darauf, wie die Melodie nun schneller spielt. Probiere es für dich "
"selbst aus, ändere die Zeiten - verwende unterschiedliche Zeiten und Noten."

#: 02.1-Your-First-Beeps.md:90
msgid ""
"One thing to try is in-between notes such as `play 52.3` and `play 52.63`. The"
"re's absolutely no need to stick to standard whole notes. Play around and have"
" fun."
msgstr ""
"Versuche einmal Zwischennoten wie `play 52.3` und `play 52.63`. Es gibt "
"überhaupt keinen Grund, nur ganze Zahlen zu verwenden. Spiel damit herum und "
"hab Spaß dabei. *Beachte* dabei, dass Computer grundsätzlich die englische "
"Schreibweise für Zahlen verwenden - setze also stets einen Punkt vor die "
"Nachkommastellen (sic!), kein Komma!"

#: 02.1-Your-First-Beeps.md:95
msgid "Traditional Note Names"
msgstr "Traditionelle Notennamen"

#: 02.1-Your-First-Beeps.md:97
msgid ""
"For those of you that already know some musical notation (don't worry if you d"
"on't - you don't need it to have fun) you might want to write a melody using n"
"ote names such as C and F# rather than numbers. Sonic Pi has you covered. You "
"can do the following:"
msgstr ""
"*Beachte* für das folgende, dass Sonic Pi die englischen Notennamen "
"verwendet, *Fis* ist *F sharp* oder auch *F#* und *Fes* ist *F flat* bzw. "
"*Fb*. Die Note H heißt im Englischen *B*.\n"
"Für die unter euch, die die musikalische Notation schon ein wenig kennen ("
"keine Sorge, wenn nicht - du brauchst es nicht unbedingt) - vielleicht "
"möchtet ihr eine Melodie mit Notennamen anstelle von Zahlen schreiben, also "
"C oder F#. Auch das geht mit Sonic Pi. Du kannst folgendes machen:"

#: 02.1-Your-First-Beeps.md:102
#, no-wrap
msgid ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"
msgstr ""
"play :C\n"
"sleep 0.5\n"
"play :D\n"
"sleep 0.5\n"
"play :E"

#: 02.1-Your-First-Beeps.md:110
msgid ""
"Remember to put the colon `:` in front of your note name so that it goes pink."
" Also, you can specify the octave by adding a number after the note name:"
msgstr ""
"Denk daran, direkt vor den Notennamen einen Doppelpunkt `:` zu stellen, "
"sodass dieser sich Pink färbt. Du kannst ebenfalls die Oktave festlegen, "
"indem du eine Zahl direkt hinter den Notennamen schreibst:"

#: 02.1-Your-First-Beeps.md:114
#, no-wrap
msgid ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"
msgstr ""
"play :C3\n"
"sleep 0.5\n"
"play :D3\n"
"sleep 0.5\n"
"play :E4"

#: 02.1-Your-First-Beeps.md:122
msgid ""
"If you want to make a note sharp, add an `s` after the note name such as `play"
" :Fs3` and if you want to make a note flat, add a `b` such as `play :Eb3`."
msgstr ""
"Wenn du eine Note um einen Halbton erhöhen willst, füge ein `s` hinzu, also `"
"play :Fs3`. Und wenn du eine Note um einen Halbton verringern möchtest, füge "
"ein `b` an, also `play :Eb3`."

#: 02.1-Your-First-Beeps.md:125
msgid "Now go *crazy* and have fun making your own tunes."
msgstr "Jetzt spiel' *verrückt* und baue dir deine eigenen Melodien."

#: 02.2-Synth-Params.md:1
msgid "2.2 Synth Options"
msgstr "2.2 Synth-Optionen"

#: 02.2-Synth-Params.md:3
msgid "Synth Options: Amp and Pan"
msgstr "Synth-Optionen: Amp und Pan"

#: 02.2-Synth-Params.md:5
msgid ""
"As well as allowing you to control which note to play or which sample to trigg"
"er, Sonic Pi provides a whole range of options to craft and control the sounds"
". We'll be covering many of these in this tutorial and there's extensive docum"
"entation for each in the help system. However, for now we'll introduce two of "
"the most useful: *amplitude* and *pan*. First, let's look at what options actu"
"ally are."
msgstr ""
"Genauso wie es dich steuern lässt, welche Noten du erzeugst und welche "
"Samples du abspielst, bietet dir Sonic Pi eine ganzen Bandbreite von "
"Optionen, um die Klänge zu gestalten und zu steuern. Wir werden viele davon "
"in diesem Tutorial behandeln, und für jede Option gibt es eine ausführliche "
"Dokumentation im Hilfe-Fenster. Für den Moment werden wir uns zunächst zwei "
"der nützlichsten ansehen: *Amplitude* (Lautstärke) und *Pan* (Panorama). "
"Aber vorher will ich kurz erklären, was Optionen eigentlich sind."

#: 02.2-Synth-Params.md:13
msgid "Options"
msgstr "Optionen"

#: 02.2-Synth-Params.md:15
msgid ""
"Sonic Pi supports the notion of options (or opts for short) for its synths. Op"
"ts are controls you pass to `play` which modify and control aspects of the sou"
"nd you hear. Each synth has its own set of opts for finely tuning its sound. H"
"owever, there are common sets of opts shared by many sounds such as `amp:` and"
" envelope opts (covered in another section)."
msgstr ""
"Die Synths von Sonic Pi lassen sich über verschiedene Optionen (oder kurz: "
"Opts) verändern. Opts sind Regler, die an `play` oder `sample` übergeben "
"werden; sie verändern und steuern unterschiedliche Aspekte der Klänge, die "
"du hörst. Jeder Synth hat seinen eigenen Satz Opts, um den Klang fein "
"einzustellen. Es gibt auch Opts, die für viele Klänge identisch sind, z.B. "
"`amp:` und Hüllkurven-Opts (die wir in einer anderen Sektion besprechen)."

#: 02.2-Synth-Params.md:22
msgid ""
"Opts have two major parts, their name (the name of the control) and their valu"
"e (the value you want to set the control at). For example, you might have a op"
"t called `cheese:` and want to set it with a value of `1`."
msgstr ""
"Opts bestehen aus zwei Teilen, ihrem Namen (der Name des Reglers) und ihrem "
"Wert (der Wert, auf den du den Regler setzten möchtest). Zum Beispiel "
"könntest du eine Option mit dem Namen `cheese:` haben, der du den Wert `1` "
"geben möchtest."

#: 02.2-Synth-Params.md:27
msgid ""
"Opts are passed to calls to `play` by using a comma `,` and then the name of t"
"he opt such as `amp:` (don't forget the colon `:`) and then a space and the va"
"lue of the opt. For example:"
msgstr ""
"Opts werden den Aufrufen von `play` und `sample` nach einem Komma `,` "
"übergeben, dem der Name der Option folgt, etwa `amp:` (vergiss den "
"Doppelpunkt `:` nicht), dann eine Leerstelle und schließlich der Wert der "
"Option. Zum Beispiel:"

#: 02.2-Synth-Params.md:31
#, no-wrap
msgid "play 50, cheese: 1"
msgstr "play 50, cheese: 1"

#: 02.2-Synth-Params.md:35
msgid "(Note that `cheese:` isn't a valid opt, we're just using it as an example)."
msgstr ""
"(`cheese:` ist keine gültige Option, wir nehmen sie hier nur als Beispiel)."

#: 02.2-Synth-Params.md:37
msgid "You can pass multiple opts by separating them with a comma:"
msgstr ""
"Du kannst mehrere Opts hintereinander schreiben, indem du sie jeweils mit "
"einem weiteren Komma abtrennst:"

#: 02.2-Synth-Params.md:39
#, no-wrap
msgid "play 50, cheese: 1, beans: 0.5"
msgstr "play 50, cheese: 1, beans: 0.5"

#: 02.2-Synth-Params.md:43
msgid "The order of the opts doesn't matter, so the following is identical:"
msgstr ""
"Die Reihenfolge der Opts spielt keine Rolle, so dass die folgende Zeile "
"hätte dasselbe Ergebnis:"

#: 02.2-Synth-Params.md:45
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 1"
msgstr "play 50, beans: 0.5, cheese: 1"

#: 02.2-Synth-Params.md:49
msgid ""
"Opts that aren't recognised by the synth are just ignored (like `cheese` and `"
"beans` which are clearly ridiculous opt names!)"
msgstr ""
"Opts, die der Synth nicht kennt, ignoriert er einfach. (wie `cheese` und "
"`beans`, die ja nun wirklich alberne Namen für Optionen sind!)"

#: 02.2-Synth-Params.md:52
msgid ""
"If you accidentally use the same opt twice with different values, the last one"
" wins. For example, `beans:` here will have the value 2 rather than 0.5:"
msgstr ""
"Wenn du aus Versehen zweimal dieselbe Opt mit unterschiedlichen Werten "
"benutzt, gewinnt die letzte. Im folgenden Beispiel wird `beans` den Wert 2 "
"bekommen und nicht 0.5:"

#: 02.2-Synth-Params.md:56
#, no-wrap
msgid "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"
msgstr "play 50, beans: 0.5, cheese: 3, eggs: 0.1, beans: 2"

#: 02.2-Synth-Params.md:60
msgid ""
"Many things in Sonic Pi accept opts, so just spend a little time learning how "
"to use them and you'll be set! Let's play with our first opt: `amp:`."
msgstr ""
"Viele Dinge in Sonic Pi akzeptieren Optionen, also verbringe ein wenig Zeit "
"damit zu lernen, wie du sie einsetzen kannst, und du wirst bald startklar "
"sein! Spielen wir mal mit unserer ersten Opt: `amp:`."

#: 02.2-Synth-Params.md:64 02.4-Durations-with-Envelopes.md:25
msgid "Amplitude"
msgstr "Amplitude"

#: 02.2-Synth-Params.md:66
msgid ""
"Amplitude is a computer representation of the loudness of a sound. A *high amp"
"litude produces a loud sound* and a *low amplitude produces a quiet sound*. Ju"
"st as Sonic Pi uses numbers to represent time and notes, it uses numbers to re"
"present amplitude. An amplitude of 0 is silent (you'll hear nothing) whereas a"
"n amplitude of 1 is normal volume. You can even crank up the amplitude higher "
"to 2, 10, 100. However, you should note that when the overall amplitude of all"
" the sounds gets too high, Sonic Pi uses what's called a compressor to squash "
"them all to make sure things aren't too loud for your ears. This can often mak"
"e the sound muddy and strange. So try to use low amplitudes, i.e. in the range"
" 0 to 0.5 to avoid compression."
msgstr ""
"Die Amplitude ist wie der Computer die Lautheit eines Klangs repräsentiert. "
"Eine *hohe Amplitude bringt einen lauten Klang hervor*, und eine *niedrige "
"Amplitude ergibt einen leisen Klang*. So wie Sonic Pi Zahlen dazu benutzt, "
"um Zeit und Töne darzustellen, bildet es auch die Lautstärke mit Hilfe von "
"Zahlen ab. Eine Amplitude von 0 bedeutet Stille (du wirst nichts hören), "
"eine Amplitude von 1 steht für normale Lautstärke. Du kannst die Amplitude "
"aufdrehen auf 2, 10, 100. Aber Vorsicht: Wenn die Amplitude aller "
"gemeinsamen Klänge zu hoch wird, setzt Sonic Pi einen so genannten "
"Kompressor ein, der sie zusammen quetscht, damit die Klänge nicht zu laut "
"für dein Ohr werden. Oft klingt das dann matschig und schräg. Verwende also "
"lieber niedrige Amplituden, das heißt im Bereich zwischen 0 und 0.5, um "
"Kompression zu verhindern."

#: 02.2-Synth-Params.md:79
msgid "Amp it up"
msgstr "Amp aufdrehen"

#: 02.2-Synth-Params.md:81
msgid ""
"To change the amplitude of a sound, you can use the `amp:` opt. For example, t"
"o play at half amplitude pass 0.5:"
msgstr ""
"Um die Amplitude eines Klangs zu ändern, setze die Opt `amp:` ein. Um zum "
"Beispiel mit halber Amplitude abzuspielen übergebe 0.5:"

#: 02.2-Synth-Params.md:84
#, no-wrap
msgid "play 60, amp: 0.5"
msgstr "play 60, amp: 0.5"

#: 02.2-Synth-Params.md:88
msgid "To play at double amplitude pass 2:"
msgstr "Für die doppelte Amplitude übergebe 2:"

#: 02.2-Synth-Params.md:90
#, no-wrap
msgid "play 60, amp: 2"
msgstr "play 60, amp: 2"

#: 02.2-Synth-Params.md:94
msgid ""
"The `amp:` opt only modifies the call to `play` it's associated with. So, in t"
"his example, the first call to play is at half volume and the second is back t"
"o the default (1):"
msgstr ""
"Die `amp:`-Opt beeinflusst nur den Aufruf von `play`, mit der sie unmittelbar "
"zusammenhängt. Das heißt, in dem folgenden Beispiel wird der erste Aufruf von "
"`play` mit halber Lautstärke gespielt und der zweite wieder mit der Standardla"
"utstärke (1):"

#: 02.2-Synth-Params.md:98
#, no-wrap
msgid ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"
msgstr ""
"play 60, amp: 0.5\n"
"sleep 0.5\n"
"play 65"

#: 02.2-Synth-Params.md:104
msgid "Of course, you can use different `amp:` values for each call to play:"
msgstr ""
"Natürlich kannst du für jeden Aufruf von `play` andere Werte für `amp:` "
"festlegen:"

#: 02.2-Synth-Params.md:106
#, no-wrap
msgid ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"
msgstr ""
"play 50, amp: 0.1\n"
"sleep 0.25\n"
"play 55, amp: 0.2\n"
"sleep 0.25\n"
"play 57, amp: 0.4\n"
"sleep 0.25\n"
"play 62, amp: 1"

#: 02.2-Synth-Params.md:116
msgid "Panning"
msgstr "Panning"

#: 02.2-Synth-Params.md:118
msgid ""
"Another fun opt to use is `pan:` which controls the panning of a sound in ster"
"eo. Panning a sound to the left means that you hear it out of the left speaker"
", and panning it to the right means you hear it out of your right speaker. For"
" our values, we use a -1 to represent fully left, 0 to represent center and 1 "
"to represent fully right in the stereo field. Of course, we're free to use any"
" value between -1 and 1 to control the exact positioning of our sound."
msgstr ""
"Eine weitere interessante Opt ist `pan:`. Ihr Wert gibt an, aus welcher "
"Richtung der Klang kommt, wenn wir in Stereo hören. Panning nach links "
"bedeutet, dass du denKlang aus dem linken Lautsprecher und Panning nach "
"rechts, dass du ihn aus dem rechten Lautsprecher hörst. Für unsere Werte "
"benutzen wir -1 , um den Klang ganz nach links zu schieben, 0 steht für die "
"Mitte und mit 1 schieben wir den Klang ganz nach rechts. Natürlich können "
"wir jeden Wert zwischen -1 und 1 verwenden, um die Klänge exakt im "
"Stereofeld zu positionieren."

#: 02.2-Synth-Params.md:126
msgid "Let's play a beep out of the left speaker:"
msgstr "Lasst uns einen Beep nur aus dem linken Lautsprecher abspielen:"

#: 02.2-Synth-Params.md:128
#, no-wrap
msgid "play 60, pan: -1"
msgstr "play 60, pan: -1"

#: 02.2-Synth-Params.md:132
msgid "Now, let's play it out of the right speaker:"
msgstr "Jetzt aus dem rechten Lautsprecher:"

#: 02.2-Synth-Params.md:134
#, no-wrap
msgid "play 60, pan: 1"
msgstr "play 60, pan: 1"

#: 02.2-Synth-Params.md:138
msgid "Finally let's play it back out of the center of both (the default position):"
msgstr ""
"Nun wollen wir den Klang aus der Mitte zwischen beiden Lautsprechern "
"herauskommen lassen (die Standardposition):"

#: 02.2-Synth-Params.md:141
#, no-wrap
msgid "play 60, pan: 0"
msgstr "play 60, pan: 0"

#: 02.2-Synth-Params.md:145
msgid "Now, go and have fun changing the amplitude and panning of your sounds!"
msgstr ""
"Jetzt leg' einfach los und verändere die Amplitude und das Panning deiner "
"Klänge!"

#: 02.3-Switching-Synths.md:1
msgid "2.3 Switching Synths"
msgstr "2.3 Synths wechseln"

#: 02.3-Switching-Synths.md:3
msgid "Switching Synths"
msgstr "Synths wechseln"

#: 02.3-Switching-Synths.md:5
msgid ""
"So far we've had quite a lot of fun making beeps. However, you're probably sta"
"rting to get bored of the basic beep noise. Is that all Sonic Pi has to offer?"
" Surely there's more to live coding than just playing beeps? Yes there is, and"
" in this section we'll explore some of the exciting range of sounds that Sonic"
" Pi has to offer."
msgstr ""
"Bisher hatten wir viel Spaß damit Pieptöne zu erzeugen. Aber wahrscheinlich "
"langweilt es dich langsam, immer wieder denselben Klang zu hören. Ist das "
"alles, was Sonic Pi zu bieten hat? Live-Coding kann doch sicher mehr als nur "
"einen einfachen Piepton zu spielen? Aber klar doch! In diesem Abschnitt "
"schauen wir uns die aufregende Vielfalt der Klänge, die uns Sonic Pi bietet, "
"an."

#: 02.3-Switching-Synths.md:13
msgid ""
"Sonic Pi has a number of different instruments it calls synths (which is *shor"
"t for synthesisers*). Whereas samples represent pre-recorded sounds, synths ar"
"e capable of generating new sounds depending on how you control them (which we"
"'ll explore later in this tutorial). Sonic Pi's synths are very powerful and e"
"xpressive and you'll have a lot of fun exploring and playing with them. First,"
" let's learn how to select the current synth to use."
msgstr ""
"Sonic Pi verfügt über eine ganze Palette unterschiedlicher Instrumente, die "
"es Synths nennt (kurz für *Synthesizer - Klangerzeuger*). Wohingegen Samples "
"bereits aufgenommene Klänge sind. Synths erzeugen neue Klänge, je nachdem, "
"wie du sie steuerst (was wir später in diesem Tutorial untersuchen werden). "
"Die Synths in Sonic Pi sind sehr kraftvoll und ausdrucksstark, und du wirst "
"viel Spaß damit haben sie zu erforschen und damit zu spielen. Lass uns "
"zuerst lernen, wie ein Synth ausgewählt wird, um ihn zu verwenden."

#: 02.3-Switching-Synths.md:21
msgid "Buzzy saws and prophets"
msgstr "Brummende Sägen und Propheten"

#: 02.3-Switching-Synths.md:23
msgid "A fun sound is the *saw wave* - let's give it a try:"
msgstr "Ein lustiger Klang ist die *Sägezahn-Welle* - probieren wir es mal aus:"

#: 02.3-Switching-Synths.md:25
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62"

#: 02.3-Switching-Synths.md:34
msgid "Let's try another sound - the *prophet*:"
msgstr "Nehmen wir einen anderen Klang - den *Prophet*:"

#: 02.3-Switching-Synths.md:36
#, no-wrap
msgid ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62"
msgstr ""
"use_synth :prophet\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"play 62"

#: 02.3-Switching-Synths.md:45
msgid "How about combining two sounds. First one after another:"
msgstr "Wie wäre es beide Klänge zu verbinden? Zuerst nacheinander:"

#: 02.3-Switching-Synths.md:47
#, no-wrap
msgid ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57"
msgstr ""
"use_synth :saw\n"
"play 38\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.25\n"
"use_synth :prophet\n"
"play 57"

#: 02.3-Switching-Synths.md:57
msgid ""
"Now multiple sounds at the same time (by not sleeping between successive calls"
" to `play`):"
msgstr ""
"Jetzt mehrere Töne gleichzeitig (keine Pausen mit `sleep` zwischen "
"aufeinander folgenden Aufrufen von `play`):"

#: 02.3-Switching-Synths.md:60
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 38\n"
"use_synth :dsaw\n"
"play 50\n"
"use_synth :prophet\n"
"play 57"
msgstr ""
"use_synth :tb303\n"
"play 38\n"
"use_synth :dsaw\n"
"play 50\n"
"use_synth :prophet\n"
"play 57"

#: 02.3-Switching-Synths.md:69
msgid ""
"Notice that the `use_synth` command only affects the following calls to `play`"
". Think of it like a *big switch* - new calls to `play` will play whatever syn"
"th it's currently pointing to. You can move the switch to a new synth with `us"
"e_synth`."
msgstr ""
"Achte darauf, wie das `use_synth`-Kommando nur die nachfolgenden `play`-"
"Kommandos beeinflusst. Stell dir das wie einen *großen Schalter* vor - neue "
"Aufrufe von `play` werden immer den Synth benutzen, auf den der Schalter "
"gerade zeigt. Du kannst diesen Schalter mit `use_synth` auf einen anderen "
"Synth umschalten."

#: 02.3-Switching-Synths.md:75
msgid "Discovering Synths"
msgstr "Synths entdecken"

#: 02.3-Switching-Synths.md:77
msgid ""
"To see which synths Sonic Pi has for you to play with take a look at the Synth"
"s option in the menu at the bottom of this help screen (between Examples & Fx)"
". There are over 20 to choose from. Here are a few of my favourites:"
msgstr ""
"Um zu entdecken welche Synths Sonic Pi für dich zum Spielen bereithält, "
"schau im Synths-Option im Menü links unten im Hilfe-Fenster nach (gleich "
"neben *FX*). Es gibt über 20 zur Auswahl. Hier sind einige meiner Favoriten:"

#: 02.3-Switching-Synths.md:81
msgid "`:prophet`"
msgstr "`:prophet`"

#: 02.3-Switching-Synths.md:82
msgid "`:dsaw`"
msgstr "`:dsaw`"

#: 02.3-Switching-Synths.md:83
msgid "`:fm`"
msgstr "`:fm`"

#: 02.3-Switching-Synths.md:84
msgid "`:tb303`"
msgstr "`:tb303`"

#: 02.3-Switching-Synths.md:85
msgid "`:pulse`"
msgstr "`:pulse`"

#: 02.3-Switching-Synths.md:87
msgid ""
"Now play around with *switching synths during your music*. Have fun combining "
"synths to make new sounds as well as using different synths for different sect"
"ions of your music."
msgstr ""
"Spiele ein bisschen herum und *wechsle die Synths, während du spielst*. "
"Kombiniere unterschiedliche Synths, um neue Klänge zu erzeugen, oder setze "
"sie für unterschiedliche Sektionen in deinem Stück ein."

#: 02.4-Durations-with-Envelopes.md:1
msgid "2.4 Duration with Envelopes"
msgstr "2.4 Dauer bei Hüllkurven"

#: 02.4-Durations-with-Envelopes.md:3
msgid "Duration with Envelopes"
msgstr "Dauer bei Hüllkurven"

#: 02.4-Durations-with-Envelopes.md:5
msgid ""
"In an earlier section, we looked at how we can use the `sleep` command to cont"
"rol when to trigger our sounds. However, we haven't yet been able to control t"
"he duration of our sounds."
msgstr ""
"In einem früheren Abschnitt haben wir gesehen, wie wir mit dem `sleep`-"
"Kommando steuern können, dass unsere Klänge ausgelöst (getriggert) werden. "
"Bislang konnten wir aber noch nicht die Dauer unserer Känge steuern."

#: 02.4-Durations-with-Envelopes.md:9
msgid ""
"In order to give us a simple, yet powerful means of *controlling the duration*"
" of our sounds, Sonic Pi provides the notion of an *ADSR amplitude envelope* ("
"we'll cover what ADSR means later in this section). An amplitude envelope offe"
"rs two useful aspects of control:"
msgstr ""
"Dafür uns einfache und doch mächtige Mittel zur *Steuerung der Dauer* "
"unserer Klänge zu geben, verwendet Sonic Pi den Begriff der *ADSR-Hüllkurve* "
"(wir werden später in diesem Abschnitt die genaue Bedeutung von ADSR "
"behandeln). Eine Hüllkurve bietet für die Steuerung zwei praktische "
"Eigenschaften:"

#: 02.4-Durations-with-Envelopes.md:14
msgid "control over the duration of a sound"
msgstr "Steuerung der Dauer eines Klanges"

#: 02.4-Durations-with-Envelopes.md:15
msgid "control over the amplitude of a sound"
msgstr "Steuerung der Lautstärke eines Klanges"

#: 02.4-Durations-with-Envelopes.md:17
msgid "Duration"
msgstr "Dauer"

#: 02.4-Durations-with-Envelopes.md:19
msgid ""
"The duration is the length the sound lasts for. A longer duration means that y"
"ou hear the sound for longer. Sonic Pi's sounds all have a controllable amplit"
"ude envelope, and the total duration of that envelope is the duration of the s"
"ound. Therefore, by controlling the envelope you control the duration."
msgstr ""
"Die Dauer beschreibt, wie lange ein Klang anhält. Eine längere Dauer "
"bedeutet, dass du den Klang länger hören kannst. Alle Klänge in Sonic Pi "
"haben eine steuerbare Hüllkurve, und die gesamte Dauer dieser Hüllkurve "
"bestimmt die Dauer des Klanges. Daher steuerst du mit der Dauer der "
"Hüllkurve die Dauer des Klanges."

#: 02.4-Durations-with-Envelopes.md:27
msgid ""
"The ADSR envelope not only controls duration, it also gives you *fine control "
"over the amplitude of the sound*. All audible sounds start and end silent and "
"contain some non-silent part in-between. Envelopes allow you to slide and hold"
" the amplitude of non-silent parts of the sound. It's like giving someone inst"
"ructions on how to turn up and down the volume of a guitar amplifier. For exam"
"ple you might ask someone to \"start at silence, slowly move up to full volume,"
" hold it for a bit, then quickly fall back to silence.\" Sonic Pi allows you to"
" program exactly this behaviour with envelopes."
msgstr ""
"Die ADSR-Hüllkurve steuert nicht nur die Dauer, sondern ermöglicht dir auch "
"eine *genaue Kontrolle über den Verlauf der Lautstärke eines Klanges*. Alle "
"hörbaren Klänge beginnen und enden mit Stille; alles was dazwischen liegt, "
"ist nicht still. Hüllkurven erlauben es dir, die Lautstärke der hörbaren "
"Anteile des Klanges zu verschieben, zu verlängern und zu verkürzen. Es ist "
"so, als würdest du eine andere Person anweisen, wie sie mit dem "
"Lautstärkeregler einen Gitarren-Verstärker lauter und leiser drehen soll. Du "
"könntest sie z. B. bitten, \"fang mit Stille an, dreh die Lautstärke langsam "
"bis zum Anschlag hoch, lasse es eine Weile so und blende dann schnell "
"runter, so dass es wieder still wird\". Genau diese Anweisungen zu geben "
"erlaubt dir Sonic Pi mit Hüllkurven."

#: 02.4-Durations-with-Envelopes.md:37
msgid ""
"Just to recap, as we have seen before, an amplitude of 0 is silence and an amp"
"litude of 1 is normal volume."
msgstr ""
"Wie wir bereits gesehen haben, bedeutet eine Amplitude von 0 Stille und eine "
"Amplitude von 1 entspricht normaler Lautstärke."

#: 02.4-Durations-with-Envelopes.md:40
msgid "Now, let us look at each of the parts of the envelopes in turn."
msgstr ""
"Nun lasst uns auch einen Blick auf jeden einzelnen Teil einer Hüllkurve "
"werfen."

#: 02.4-Durations-with-Envelopes.md:42
msgid "Release Phase"
msgstr "Release-Zeit"

#: 02.4-Durations-with-Envelopes.md:44
msgid ""
"The only part of the envelope that's used by default is the release time. This"
" is the time it takes for the synth's sound to fade out. All synths have a rel"
"ease time of 1 which means that by default they have a duration of 1 beat (whi"
"ch at the default BPM of 60 is 1 second):"
msgstr ""
"Der einzige Teil der Hüllkurve den Sonic Pi standardmäßig einsetzt ist die "
"Release-Zeit. Das ist die Dauer mit der ein Synth-Klang ausklingt. Alle "
"Synths haben eine Release-Zeit von 1, was bedeutet, dass sie eine Dauer von "
"1 Beat haben (beim Standard-BPM-Wert 60 entspricht das genau 1 Sekunde):"

#: 02.4-Durations-with-Envelopes.md:53
msgid ""
"The note will be audible for 1 second. Go ahead and time it :-) This is short "
"hand for the longer more explicit version:"
msgstr ""
"Diesen Ton wirst du 1 Sekunde lang hören. Probiere es aus und stoppe die "
"Zeit :-) Dies ist die Kurzform der etwas längeren, ausführlichen Variante:"

#: 02.4-Durations-with-Envelopes.md:56
#, no-wrap
msgid "play 70, release: 1"
msgstr "play 70, release: 1"

#: 02.4-Durations-with-Envelopes.md:60
msgid ""
"Notice how this sounds exactly the same (the sound lasts for one second). Howe"
"ver, it's now very easy to change the duration by modifying the value of the `"
"release:` opt:"
msgstr ""
"Achte darauf, wie dieser Ton exakt gleich klingt (der Klang ist eine "
"Sekunden lang zu hören). Aber jetzt ist es sehr einfach die Dauer über die "
"`release:`-Option zu verändern:"

#: 02.4-Durations-with-Envelopes.md:64
#, no-wrap
msgid "play 60, release: 2"
msgstr "play 60, release: 2"

#: 02.4-Durations-with-Envelopes.md:68
msgid ""
"We can make the synth sound for a very short amount of time by using a very sm"
"all release time:"
msgstr ""
"Wir können den Synth mit einer sehr kurzen Release-Zeit sehr kurz klingen "
"lassen:"

#: 02.4-Durations-with-Envelopes.md:71
#, no-wrap
msgid "play 60, release: 0.2"
msgstr "play 60, release: 0.2"

#: 02.4-Durations-with-Envelopes.md:75
msgid ""
"The duration of the release of the sound is called the *release phase* and by "
"default is a linear transition (i.e. a straight line). The following diagram i"
"llustrates this transition:"
msgstr ""
"Die Dauer des Ausklingens eines Klangs wird *Release-Zeit* (*release phase*) "
"genannt. Standardmäßig bedeutet dies ein lineares Ausklingen (das entspricht "
"einer gerade Linie). Das folgende Diagramm zeigt diesen Übergang:"

#: 02.4-Durations-with-Envelopes.md:79
msgid "![release envelope](../../../etc/doc/images/tutorial/env-release.png)"
msgstr "![release envelope](../../../etc/doc/images/tutorial/env-release.png)"

#: 02.4-Durations-with-Envelopes.md:81
msgid ""
"The vertical line at the far left of the diagram shows that the sound starts a"
"t 0 amplitude, but goes up to full amplitude immediately (this is the attack p"
"hase which we'll cover next). Once at full amplitude it then moves in a straig"
"ht line down to zero taking the amount of time specified by `release:`. *Longe"
"r release times produce longer synth fade outs.*"
msgstr ""
"Die senkrechte Linie ganz links im Bild zeigt, dass der Klang mit einer "
"Amplitude von 0 startet, jedoch sofort auf die volle Höhe geht (das ist die "
"Attack-Zeit, die wir gleich behandeln werden). Wenn die volle Höhe erreicht "
"ist, geht die Amplitude in einer geraden Linie bis auf Null zurück, wobei "
"dies so lange dauert, wie es mit `release` festgelegt wurde. *Lange Release-"
"Zeiten erzeugen ein langes Ausklingen des Synths.*"

#: 02.4-Durations-with-Envelopes.md:88
msgid ""
"You can therefore change the duration of your sound by changing the release ti"
"me. Have a play adding release times to your music."
msgstr ""
"Du kannst daher mit der Release-Zeit die Dauer eines Klanges ändern. Spiele "
"damit - füge deiner Musik unterschiedlichen Release-Zeiten hinzu."

#: 02.4-Durations-with-Envelopes.md:91
msgid "Attack Phase"
msgstr "Attack-Zeit"

#: 02.4-Durations-with-Envelopes.md:93
msgid ""
"By default, the *attack phase* is 0 for all synths which means they move from "
"0 amplitude to 1 immediately. This gives the synth an initial percussive sound"
". However, you may wish to fade your sound in. This can be achieved with the `"
"attack:` opt. Try fading in some sounds:"
msgstr ""
"Standardmäßig ist die Attack-Zeit für alle Synths 0, das bedeutet, die "
"Amplitude geht unmittelbar von 0 auf 1. Daher setzt der Synth mit einem "
"perkussiven Klang ein. Du möchtest den Klang vielleicht hingegen einblenden. "
"Dies kann mit der `attack`-Opt erreicht werden. Versuche einige Klänge "
"einzublenden:"

#: 02.4-Durations-with-Envelopes.md:98
#, no-wrap
msgid ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"
msgstr ""
"play 60, attack: 2\n"
"sleep 3\n"
"play 65, attack: 0.5"

#: 02.4-Durations-with-Envelopes.md:104
msgid ""
"You may use multiple opts at the same time. For example for a short attack and"
" a long release try:"
msgstr ""
"Du kannst mehrere Opts zur gleichen Zeit anwenden. Versuche zum Beispiel für "
"eine kurze Attack-Zeit und eine lange Release-Zeit:"

#: 02.4-Durations-with-Envelopes.md:107
#, no-wrap
msgid "play 60, attack: 0.7, release: 4"
msgstr "play 60, attack: 0.7, release: 4"

#: 02.4-Durations-with-Envelopes.md:111
msgid ""
"This short attack and long release envelope is illustrated in the following di"
"agram:"
msgstr ""
"Diese Hüllkurve mit einer kurzen Attack-Zeit und langer Release-Zeit sieht "
"so aus:"

#: 02.4-Durations-with-Envelopes.md:114
msgid ""
"![attack release envelope](../../../etc/doc/images/tutorial/env-attack-release"
".png)"
msgstr ""
"![Anklingen und Abklingen](../../../etc/doc/images/tutorial/env-attack-"
"release.png)"

#: 02.4-Durations-with-Envelopes.md:116
msgid ""
"Of course, you may switch things around. Try a long attack and a short release"
":"
msgstr ""
"Du kannst es natürlich auch anders herum machen. Probiere eine lange Attack-"
"Zeit und eine kurze Release-Zeit aus:"

#: 02.4-Durations-with-Envelopes.md:119
#, no-wrap
msgid "play 60, attack: 4, release: 0.7"
msgstr "play 60, attack: 4, release: 0.7"

#: 02.4-Durations-with-Envelopes.md:123
msgid ""
"![long attack short release envelope](../../../etc/doc/images/tutorial/env-lon"
"g-attack-short-release.png)"
msgstr ""
"![Langsames Anklingen, kurzes Abklingen](../../../etc/doc/images/tutorial/"
"env-long-attack-short-release.png)"

#: 02.4-Durations-with-Envelopes.md:125
msgid ""
"Finally, you can also have both short attack and release times for shorter sou"
"nds."
msgstr ""
"Letztlich kannst du auch eine kurze Attack- und Release-Zeit verwenden - für "
"kürzere Klänge."

#: 02.4-Durations-with-Envelopes.md:128
#, no-wrap
msgid "play 60, attack: 0.5, release: 0.5"
msgstr "play 60, attack: 0.5, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:132
msgid ""
"![short attack short release envelope](../../../etc/doc/images/tutorial/env-sh"
"ort-attack-short-release.png)"
msgstr ""
"![Kurzes Anklingen, kurzes Abklingen](../../../etc/doc/images/tutorial/env-"
"short-attack-short-release.png)"

#: 02.4-Durations-with-Envelopes.md:134
msgid "Sustain Phase"
msgstr "Sustain-Zeit"

#: 02.4-Durations-with-Envelopes.md:136
msgid ""
"In addition to specifying attack and release times, you may also specify a sus"
"tain time to control the *sustain phase*. This is the time for which the sound"
" is maintained at full amplitude between the attack and release phases."
msgstr ""
"Zusätzlich zu Attack- und Release-Zeiten kannst du auch eine Sustain-Zeit "
"bestimmen. Diese ist die Zeitdauer, über die der Klang anhält, wenn er die "
"eingestellte Lautstärke erreicht hat, also zwischen der Attack- und den "
"Release-Phase."

#: 02.4-Durations-with-Envelopes.md:141
#, no-wrap
msgid "play 60, attack: 0.3, sustain: 1, release: 1"
msgstr "play 60, attack: 0.3, sustain: 1, release: 1"

#: 02.4-Durations-with-Envelopes.md:145
msgid ""
"![ASR envelope](../../../etc/doc/images/tutorial/env-attack-sustain-release.pn"
"g)"
msgstr ""
"![ASR Hüllkurve](../../../etc/doc/images/tutorial/env-attack-sustain-release."
"png)"

#: 02.4-Durations-with-Envelopes.md:147
msgid ""
"The sustain time is useful for important sounds you wish to give full presence"
" in the mix before entering an optional release phase. Of course, it's totally"
" valid to set both the `attack:` and `release:` opts to 0 and just use the sus"
"tain to have absolutely no fade in or fade out to the sound. However, be warne"
"d, a release of 0 can produce clicks in the audio and it's often better to use"
" a very small value such as 0.2."
msgstr ""
"Die Sustain-Zeit ist nützlich für wichtige Klänge, die du in einem Mix "
"hervorheben willst, bevor sie eine optionale Release-Phase erreichen. "
"Natürlich ist es ebenso möglich sowohl den Wert für `attack:` als auch den "
"für `release:` auf 0 zu setzen und nur den Sustain zu gebrauchen - ohne Ein- "
"und Ausblendung. Aber Achtung, eine Release-Zeit von 0 kann hörbare "
"Klickgeräusche verursachen, und es ist meist besser einen sehr kleinen Wert "
"wie z. B. 0.2 zu verwenden."

#: 02.4-Durations-with-Envelopes.md:154
msgid "Decay Phase"
msgstr "Decay-Zeit"

#: 02.4-Durations-with-Envelopes.md:156
msgid ""
"For an extra level of control, you can also specify a decay time. This is a ph"
"ase of the envelope that fits between the attack and sustain phases and specif"
"ies a time where the amplitude will drop from the `attack_level:` to the `deca"
"y_level:` (which unless you explicitly set it will be set to the `sustain_leve"
"l:`). By default, the `decay:` opt is 0 and both the attack and sustain levels"
" are 1 so you'll need to specify them for the decay time to have any effect:"
msgstr ""
"Auf einer weiteren Ebene kannst du auch eine Decay-Zeit festlegen. Das ist "
"eine Phase innerhalb der Hüllkurve, die zwischen der Attack- und der Release-"
"Phase liegt. Die Decay-Zeit legt die Dauer der Phase fest, in der die "
"Amplitude abfällt - von `attack_level:` zu `decay_level:` (welches zunächst "
"den gleichen Wert hat wie `sustain_level:`, solange du den Wert für "
"`decay_level:` nicht ausdrücklich vorgibst). Standardmäßig steht die Opt "
"`decay:` auf 0, und sowohl Attack- als auch das Sustain-Level stehen auf 1. "
"Damit die Decay-Zeit einen hörbaren Effekt hat, musst du diese Pegel (Level) "
"festlegen:"

#: 02.4-Durations-with-Envelopes.md:164
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, sustain_level: 0.4, sustain"
": 1, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:168
msgid ""
"![ADSR envelope](../../../etc/doc/images/tutorial/env-attack-decay-sustain-rel"
"ease.png)"
msgstr ""
"![ADSR Hüllkurve](../../../etc/doc/images/tutorial/env-attack-decay-sustain-"
"release.png)"

#: 02.4-Durations-with-Envelopes.md:170
msgid "Decay Level"
msgstr "Decay-Level"

#: 02.4-Durations-with-Envelopes.md:172
msgid ""
"One last trick is that although the `decay_level:` opt defaults to be the same"
" value as `sustain_level:` you can explicitly set them to different values for"
" full control over the envelope. This allows you to to create envelopes such a"
"s the following:"
msgstr ""
"Ein weiterer Trick besteht darin, auch die Option `decay_level:` "
"ausdrücklich auf einen anderen Wert zu setzen, da `decay_level:` ansonsten "
"automatisch den Wert von `sustain_level:` erhält. So erlangst du die "
"vollständige Kontrolle über die Hüllkurve. Du kannst nun Hüllkurven wie die "
"folgende erzeugen:"

#: 02.4-Durations-with-Envelopes.md:177
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 1, decay: 0.2, decay_level: 0.3, sustain: "
"1, sustain_level: 0.4, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:181
msgid "![ASR envelope](../../../etc/doc/images/tutorial/env-decay-level.png)"
msgstr "![ASR Hüllkurve](../../../etc/doc/images/tutorial/env-decay-level.png)"

#: 02.4-Durations-with-Envelopes.md:183
msgid ""
"It's also possible to set the `decay_level:` to be higher than `sustain_level:"
"`:"
msgstr ""
"Es ist auch möglich für `decay_level:` ein höherer Wert als für "
"`sustain_level:` zu setzen:"

#: 02.4-Durations-with-Envelopes.md:185
#, no-wrap
msgid ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"
msgstr ""
"play 60, attack: 0.1, attack_level: 0.1, decay: 0.2, decay_level: 1, sustain: "
"0.5, sustain_level: 0.8, release: 1.5"

#: 02.4-Durations-with-Envelopes.md:189
msgid "![ASR envelope](../../../etc/doc/images/tutorial/env-decay-level-2.png)"
msgstr ""
"![ASR Hüllkurve](../../../etc/doc/images/tutorial/env-decay-level-2.png)"

#: 02.4-Durations-with-Envelopes.md:191
msgid "ADSR Envelopes"
msgstr "ADSR-Hüllkurven"

#: 02.4-Durations-with-Envelopes.md:193
msgid "So to summarise, Sonic Pi's ADSR envelopes have the following phases:"
msgstr ""
"Fassen wir zusammen: Die ADSR-Hüllkurven von Sonic Pi bestehen aus den "
"folgenden Phasen:"

#: 02.4-Durations-with-Envelopes.md:195
msgid "*attack* - time from 0 amplitude to the `attack_level`,"
msgstr ""
"*Attack* - die Zeit in der die Amplitude von 0 zu `attack_level` übergeht,"

#: 02.4-Durations-with-Envelopes.md:196
msgid "*decay* - time to move amplitude from `attack_level` to `decay_level`,"
msgstr ""
"*Decay* - die Zeit in der die Amplitude von `attack_level` zu `sustain_level`"
" übergeht,"

#: 02.4-Durations-with-Envelopes.md:197
msgid "*sustain* - time to move the amplitude from `decay_level` to `sustain_level`,"
msgstr ""
"*Sustain* - die Zeit in der die Amplitude von `decay_level` zu "
"`sustain_level` übergeht,"

#: 02.4-Durations-with-Envelopes.md:198
msgid "*release* - time to move amplitude from `sustain_level` to 0"
msgstr ""
"*Release* - die Zeit in der die Amplitude von `sustain_level` auf 0 übergeht"

#: 02.4-Durations-with-Envelopes.md:200
msgid ""
"It's important to note that the duration of a sound is the summation of the ti"
"mes of each of these phases. Therefore the following sound will have a duratio"
"n of 0.5 + 1 + 2 + 0.5 = 4 beats:"
msgstr ""
"Es ist wichtig festzuhalten, dass die Dauer eines Klanges der Summe der "
"Zeiten jeder einzelnen dieser Phasen entspricht. Daher hat der folgende "
"Klang eine Dauer von 0.5 + 1 + 2 + 0.5 = 4 Schlägen (Beats):"

#: 02.4-Durations-with-Envelopes.md:204
#, no-wrap
msgid ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"
msgstr ""
"play 60, attack: 0.5, attack_level: 1, decay: 1, sustain_level: 0.4, sustain: "
"2, release: 0.5"

#: 02.4-Durations-with-Envelopes.md:208
msgid "Now go and have a play adding envelopes to your sounds..."
msgstr ""
"Nun leg los und spiele ein wenig damit herum deinen Klängen Hüllkurven "
"hinzuzufügen..."

#: 03-Samples.md:1
msgid "3 Samples"
msgstr "3 Samples"

#: 03-Samples.md:3
msgid "Samples"
msgstr "Samples"

#: 03-Samples.md:5
msgid ""
"Another great way to develop your music is to use pre-recorded sounds. In grea"
"t hip-hop tradition, we call these pre-recorded sounds *samples*. So, if you t"
"ake a microphone outside, go and record the gentle sound of rain hitting canva"
"s, you've just created a sample."
msgstr ""
"Eine weitere großartige Möglichkeit deine Musik zu entwickeln stellt die "
"Verwendung bereits aufgenommener Klänge dar. In der großen Tradition des Hip-"
"Hop nennen wir diese aufgenommenen Klänge auch *Samples*. Wenn du mit einem "
"Mikrophon nach draußen gehst und den zarten Klang von Regentropfen "
"aufnimmst, die auf ein Zeltdach fallen - dann hast du ein Sample hergestellt."

#: 03-Samples.md:10
msgid ""
"Sonic Pi lets you do lots of fun things with samples. Not only does it ship wi"
"th 130 public domain samples ready for you to jam with, it lets you play and m"
"anipulate your own. Let's get to it..."
msgstr ""
"Mit Samples kannst du in Sonic Pi viele spaßige Sachen machen. Es hat nicht "
"nur über 130 freie Samples mit an Bord, mit denen du sofort jammen kannst, "
"du kannst auch eigene Samples verwenden und manipulieren. Legen wir damit "
"los..."

#: 03.1-Triggering-Samples.md:1
msgid "3.1 Triggering Samples"
msgstr "3.1 Samples ansteuern"

#: 03.1-Triggering-Samples.md:3
msgid "Triggering Samples"
msgstr "Samples ansteuern"

#: 03.1-Triggering-Samples.md:5
msgid ""
"Playing beeps is only the beginning. Something that's a lot of fun is triggeri"
"ng pre-recorded samples. Try it:"
msgstr ""
"Bleeps zu spielen ist nur der Anfang. Was auch eine Menge Spaß macht, ist "
"mit aufgenommenen Samples zu spielen. Probier's mal:"

#: 03.1-Triggering-Samples.md:8
#, no-wrap
msgid "sample :ambi_lunar_land"
msgstr "sample :ambi_lunar_land"

#: 03.1-Triggering-Samples.md:12
msgid ""
"Sonic Pi includes many samples for you to play with. You can use them just lik"
"e you use the `play` command. To play multiple samples and notes just write th"
"em one after another:"
msgstr ""
"Sonic Pi enthält viele Samples, mit denen du spielen kannst. Du kannst sie "
"genauso benutzen wie du das `play`-Kommando benutzt. Um mehrere Samples "
"gleichzeitig zu spielen, schreib sie einfach untereinander:"

#: 03.1-Triggering-Samples.md:16
#, no-wrap
msgid ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"
msgstr ""
"play 36\n"
"play 48\n"
"sample :ambi_lunar_land\n"
"sample :ambi_drone"

#: 03.1-Triggering-Samples.md:23
msgid "If you want to space them out in time, use the `sleep` command:"
msgstr ""
"Wenn du sie über die Zeit verteilt spielen willst, verwende den "
"`sleep`-Befehl:"

#: 03.1-Triggering-Samples.md:25
#, no-wrap
msgid ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"
msgstr ""
"sample :ambi_lunar_land\n"
"sleep 1\n"
"play 48\n"
"sleep 0.5\n"
"play 36\n"
"sample :ambi_drone\n"
"sleep 1\n"
"play 36"

#: 03.1-Triggering-Samples.md:36
msgid ""
"Notice how Sonic Pi doesn't wait for a sound to finish before starting the nex"
"t sound. The `sleep` command only describes the separation of the *triggering*"
" of the sounds. This allows you to easily layer sounds together creating inter"
"esting overlap effects."
msgstr ""
"Achte darauf, dass Sonic Pi nicht wartet, bis ein Klang beendet ist, bevor "
"es den nächsten startet? Der `sleep`-Befehl beschreibt nur, in welchem "
"Abstand ein Klang erneut *getriggert* (ausgelöst) wird. Dies erlaubt dir "
"Klänge in Schichten übereinander legen und interessante Überlappungseffekte "
"herzustellen."

#: 03.1-Triggering-Samples.md:42
msgid "Discovering Samples"
msgstr "Samples entdecken"

#: 03.1-Triggering-Samples.md:44
msgid ""
"There are two ways to discover the range of samples provided in Sonic Pi. Firs"
"t, you can use this help system. Click on Samples in the menu at the bottom of"
" this help screen, choose your category and then you'll see a list of availabl"
"e sounds."
msgstr ""
"Du kannst die Samples, die Sonic Pi mitbringt, auf zwei Arten entdecken. "
"Erstens kannst du dieses Hilfe-System benutzen. Klicke links unten im Menü "
"auf `Samples` , wähle eine Kategorie aus und du siehst eine Liste aller "
"darin verfügbaren Klänge."

#: 03.1-Triggering-Samples.md:49
msgid ""
"Alternatively you can use the *auto-completion system*. Simply type the start "
"of a sample group such as: `sample :ambi_` and you'll see a drop-down of sampl"
"e names appear for you to select. Try the following category prefixes:"
msgstr ""
"Alternativ kannst du das *Auto-Completion System* (Auto-Vervollständigung) "
"verwenden. Tippe einfach den Anfang des Namens einer Sample-Kategorie, wie "
"z. B.: `sample :ambi_`, dann klappt ein Menü mit allen dazu passenden Sample-"
"Namen auf. Versuche einen der folgenden Anfänge von Kategorie-Namen:"

#: 03.1-Triggering-Samples.md:54
msgid "`:ambi_`"
msgstr "`:ambi_`"

#: 03.1-Triggering-Samples.md:55
msgid "`:bass_`"
msgstr "`:bass_`"

#: 03.1-Triggering-Samples.md:56
msgid "`:elec_`"
msgstr "`:elec_`"

#: 03.1-Triggering-Samples.md:57
msgid "`:perc_`"
msgstr "`:perc_`"

#: 03.1-Triggering-Samples.md:58
msgid "`:guit_`"
msgstr "`:guit_`"

#: 03.1-Triggering-Samples.md:59
msgid "`:drum_`"
msgstr "`:drum_`"

#: 03.1-Triggering-Samples.md:60
msgid "`:misc_`"
msgstr "`:misc_`"

#: 03.1-Triggering-Samples.md:61
msgid "`:bd_`"
msgstr "`:bd_`"

#: 03.1-Triggering-Samples.md:63
msgid "Now start mixing samples into your compositions!"
msgstr "Jetzt leg los und mixe Samples in deine Kompositionen!"

#: 03.2-Sample-Params.md:1
msgid "3.2 Sample Parameters"
msgstr "3.2 Sample-Parameter"

#: 03.2-Sample-Params.md:3
msgid "Sample Parameters: Amp and Pan"
msgstr "Sample-Parameter: Amp und Pan"

#: 03.2-Sample-Params.md:5
msgid ""
"As we saw with synths, we can easily control our sounds with parameters. Sampl"
"es support exactly the same parameterisation mechanism. Let's revisit our frie"
"nds `amp:` and `pan:`."
msgstr ""
"Genauso wie bei den Synths können wir unsere Klänge mit Parametern steuern. "
"Samples unterstützen genau den selben Parameter-Mechanismus. Besuchen wir "
"unsere Freunde `amp:` und `pan:` noch einmal."

#: 03.2-Sample-Params.md:9
msgid "Amping samples"
msgstr "Samples verstärken"

#: 03.2-Sample-Params.md:11
msgid ""
"You can change the amplitude of samples with exactly the same approach you use"
"d for synths:"
msgstr ""
"Du kannst die Amplitude (Lautstärke) von Samples genau mit der selben "
"Methode steuern wie bei den Synths:"

#: 03.2-Sample-Params.md:14
#, no-wrap
msgid "sample :ambi_lunar_land, amp: 0.5"
msgstr "sample :ambi_lunar_land, amp: 0.5"

#: 03.2-Sample-Params.md:18
msgid "Panning samples"
msgstr "Samples pannen"

#: 03.2-Sample-Params.md:20
msgid ""
"We're also able to use the `pan:` parameter on samples. For example, here's ho"
"w we'd play the amen break in the left ear and then half way through play it a"
"gain through the right ear:"
msgstr ""
"Wir können auch den `pan:`-Parameter auf Samples anwenden. Hier zum Beispiel "
"spielen wir den Amen-Break zunächst für das linke und nach der Hälfte "
"nochmals für das rechte Ohr:"

#: 03.2-Sample-Params.md:24
#, no-wrap
msgid ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"
msgstr ""
"sample :loop_amen, pan: -1\n"
"sleep 0.877\n"
"sample :loop_amen, pan: 1"

#: 03.2-Sample-Params.md:30
msgid "Note that 0.877 is half the duration of the `:loop_amen` sample in seconds."
msgstr "0.877 ist genau die Hälfte der Dauer des Amen-Breaks in Sekunden."

#: 03.2-Sample-Params.md:33
msgid ""
"Finally, note that if you set some synth defaults with `use_synth_defaults` (w"
"hich we will discuss later), these will be ignored by `sample`."
msgstr ""
"Beachte: Wenn du mit `use_synth_defaults` Grundeinstellungen für einen Synth "
"setzt (was wir später behandeln werden), werden diese von Samples ignoriert."

#: 03.3-Stretching-Samples.md:1
msgid "3.3 Stretching Samples"
msgstr "3.3 Samples dehnen"

#: 03.3-Stretching-Samples.md:3
msgid "Stretching Samples"
msgstr "Samples dehnen"

#: 03.3-Stretching-Samples.md:5
msgid ""
"Now that we can play a variety of synths and samples to create some music, it'"
"s time to learn how to modify both the synths and samples to make the music ev"
"en more unique and interesting. First, let's explore the ability to *stretch* "
"and *squash* samples."
msgstr ""
"Jetzt können wir schon eine Reihe Synths und Samples spielen, um damit Musik "
"zu machen. Es wird Zeit zu lernen, wie wir diese Synths und Samples "
"verändern können, um unsere Musik einzigartiger und spannender zu gestalten. "
"Als Erstes erkunden wir, wie sich Samples *strecken* und *stauchen* lassen."

#: 03.3-Stretching-Samples.md:10
msgid "Sample Representation"
msgstr "Samples Representation"

#: 03.3-Stretching-Samples.md:12
msgid ""
"Samples are pre-recorded sounds stored as numbers which represent how to move "
"the speaker cone to reproduce the sound. The speaker cone can move in and out,"
" and so the numbers just need to represent how far in and out the cone needs t"
"o be for each moment in time. To be able to faithfully reproduce a recorded so"
"und the sample typically needs to store many thousands of numbers per second! "
"Sonic Pi takes this list of numbers and feeds them at the right speed to move "
"your computer's speaker in and out in just the right way to reproduce the soun"
"d. However, it's also fun to change the speed with which the numbers are fed t"
"o the speaker to change the sound."
msgstr ""
"Samples sind aufgenommene Klänge, gespeichert als eine Reihe von Zahlen, die "
"repräsentieren wie die Lautsprechermembran sich bewegen muss, um den Klang "
"wiederzugeben. Die Lautsprechermembran kann sich nach innen und nach außen "
"bewegen und die Zahlen geben deshalb an, wie weit sich die Membran zu jedem "
"Zeitpunkt nach innen oder außen bewegen muss. Um einen Klang als Aufnahme "
"wirklichkeitsgetreu wiederzugeben, muss das Sample für jede Sekunde viele "
"tausend Zahlen speichern! Sonic Pi nimmt diese Zahlenreihe und gibt sie in "
"der richtigen Geschwindigkeit (sample rate) aus, um den Lautsprecher in "
"deinem Computer genau so bewegen, dass der Klang richtig wiedergegeben wird. "
"Es macht aber auch Spaß, die Geschwindigkeit mit der die Zahlen ausgegeben "
"werden zu ändern, um den Klang zu verändern."

#: 03.3-Stretching-Samples.md:23
msgid "Changing Rate"
msgstr "Geschwindigkeit ändern"

#: 03.3-Stretching-Samples.md:25
msgid ""
"Let's play with one of the ambient sounds: `:ambi_choir`. To play it with the "
"default rate, you can pass a `rate:` opt to `sample`:"
msgstr ""
"Lass uns mit einem der Ambient-Klänge spielen: `:ambi_choir`. Um die "
"Standard-Geschwindigkeit zu verändern kannst du die Opt `rate:` an `sample` "
"übergeben:"

#: 03.3-Stretching-Samples.md:28
#, no-wrap
msgid "sample :ambi_choir, rate: 1"
msgstr "sample :ambi_choir, rate: 1"

#: 03.3-Stretching-Samples.md:32
msgid ""
"This plays it at normal rate (1), so nothing special yet. However, we're free "
"to change that number to something else. How about `0.5`:"
msgstr ""
"Das Sample wird unverändert mit der Standard-Geschwindigkeit (1) abgespielt, "
"also nichts Besonderes. Aber wir können die Zahl jederzeit verändern. Wie "
"wär's mit `0.5`?"

#: 03.3-Stretching-Samples.md:35
#, no-wrap
msgid "sample :ambi_choir, rate: 0.5"
msgstr "sample :ambi_choir, rate: 0.5"

#: 03.3-Stretching-Samples.md:39
msgid ""
"Woah! What's going on here? Well, two things. Firstly, the sample takes twice "
"as long to play, secondly the sound is an octave lower. Let's explore these th"
"ings in a little more detail."
msgstr ""
"Wow! Was ist denn jetzt los? Also, hier passieren zwei Dinge. Erstens "
"braucht das Sample doppelt so lange und zweitens klingt er eine Oktave "
"niedriger. Sehen wir uns das ein bisschen genauer an."

#: 03.3-Stretching-Samples.md:43
msgid "Let's stretch"
msgstr "Lasst uns stretchen"

#: 03.3-Stretching-Samples.md:45
msgid ""
"A sample that's fun to stretch and compress is the Amen Break. At normal rate,"
" we might imagine throwing it into a *drum 'n' bass* track:"
msgstr ""
"Mit dem Amen-Break-Sample macht das Strecken und Stauchen besonders viel "
"Spaß. Bei normaler Geschwindigkeit würden wir es vielleicht in einem *Drum "
"'n' Bass*-Track verwenden:"

#: 03.3-Stretching-Samples.md:48 03.4-Enveloped-Samples.md:17
#: 03.5-Partial-Samples.md:9 A.03-coded-beats.md:33 A.12-sample-slicing.md:22
#: A.20-creative-coding-in-the-classroom.md:185
#, no-wrap
msgid "sample :loop_amen"
msgstr "sample :loop_amen"

#: 03.3-Stretching-Samples.md:52
msgid ""
"However by changing the rate we can switch up genres. Try half speed for *old "
"school hip-hop*:"
msgstr ""
"Aber mit einer anderen Geschwindigkeit passt es auch zu anderen Stilen. "
"Probiere es aus mit halber Samplerate für *Hip-Hop alter Schule*:"

#: 03.3-Stretching-Samples.md:55 03.5-Partial-Samples.md:16
#: A.20-creative-coding-in-the-classroom.md:194
#, no-wrap
msgid "sample :loop_amen, rate: 0.5"
msgstr "sample :loop_amen, rate: 0.5"

#: 03.3-Stretching-Samples.md:59
msgid "If we speed it up, we enter *jungle* territory:"
msgstr "Wenn wir es beschleunigen, erreichen wir *Jungle*-Territorium:"

#: 03.3-Stretching-Samples.md:61 A.17-sample-stretching.md:46
#, no-wrap
msgid "sample :loop_amen, rate: 1.5"
msgstr "sample :loop_amen, rate: 1.5"

#: 03.3-Stretching-Samples.md:65
msgid ""
"Now for our final party trick - let's see what happens if we use a negative ra"
"te:"
msgstr ""
"Und als letzten Party-Trick - schauen wir mal, was passiert, wenn wir eine "
"negative Rate angeben:"

#: 03.3-Stretching-Samples.md:68
#, no-wrap
msgid "sample :loop_amen, rate: -1"
msgstr "sample :loop_amen, rate: -1"

#: 03.3-Stretching-Samples.md:72
msgid ""
"Woah! It plays it *backwards*! Now try playing with lots of different samples "
"at different rates. Try very fast rates. Try crazy slow rates. See what intere"
"sting sounds you can produce."
msgstr ""
"Wow! Das Sample spielt *rückwärts*! Jetzt probiere mit vielen "
"unterschiedlichen Samples und unterschiedlichen Sampleraten herum. Versuch "
"es mit sehr hohen oder mit verrückt langsamen Geschwindigkeiten. Finde "
"heraus, welche spannenden Klänge du produzieren kannst."

#: 03.3-Stretching-Samples.md:76
msgid "A Simple Explanation of Sample Rate"
msgstr "Eine einfache Erklärung der Samplerate"

#: 03.3-Stretching-Samples.md:78
msgid ""
"A useful way to think of samples is as springs. Playback rate is like squashin"
"g and stretching the spring. If you play the sample at rate 2, you're *squashi"
"ng the spring* to half its normal length. The sample therefore takes half the "
"amount of time to play as it's shorter. If you play the sample at half rate, y"
"ou're *stretching the spring* to double its length. The sample therefore takes"
" twice the amount of time to play as it's longer. The more you squash (higher "
"rate), the shorter it gets, the more you stretch (lower rate), the longer it g"
"ets."
msgstr ""
"Ein nützlicher Weg ist sich Samples als Sprungfedern vorzustellen. "
"Samplerate (auch Abtastrate) ist, als ob man die Sprungfeder zusammendrückt "
"oder auseinanderzieht. Wenn du ein Sample mit derRate 2 abspielst, *drückst "
"du die Feder* zusammen, bis sie nur noch die Hälfte ihrer normalen Länge "
"hat. Das Sample braucht nur die Hälfte der Abspielzeit, weil es kürzer ist. "
"Wenn du das Sample mit halber Rate abspielst, *ziehst du die Feder* auf ihre "
"doppelte Länge auseinander. Das Sample braucht nun doppelt so lange, weil es "
"länger ist. Je mehr Du quetscht (höhere Rate), desto kürzer das Sample, je "
"mehr du streckst (geringere Rate), desto länger das Sample."

#: 03.3-Stretching-Samples.md:87
msgid ""
"Compressing a spring increases its density (the number of coils per cm) - this"
" is similar to the sample sounding *higher pitched*. Stretching the spring dec"
"reases its density and is similar to the sound having a *lower pitch*."
msgstr ""
"Wenn du eine Sprungfeder zusammendrückt, erhöhst du ihre Dichte (die Anzahl "
"der Windungen je Zentimeter) - das entspricht einem Sample, das *höher "
"klingt*. Wenn du die Sprungfeder auseinanderziehst, verringerst du ihre "
"Dichte, entspricht das einem, das *tiefer klingt*."

#: 03.3-Stretching-Samples.md:93
msgid "The Maths Behind Sample Rate"
msgstr "Die Mathematik hinter der Samplerate"

#: 03.3-Stretching-Samples.md:95
msgid ""
"(This section is provided for those that are interested in the details. Please"
" feel free to skip it...)"
msgstr ""
"(Dieser Abschnitt ist für diejenigen gedacht, die an den Details "
"interessiert sind. Er kann gerne übersprungen werden...)"

#: 03.3-Stretching-Samples.md:98
msgid ""
"As we saw above, a sample is represented by a big long list of numbers represe"
"nting where the speaker should be through time. We can take this list of numbe"
"rs and use it to draw a graph which would look similar to this:"
msgstr ""
"Wie wir oben gesehen haben, wird ein Sample durch eine lange Reihe von "
"Zahlen dargestellt, die der Lautsprechermembran sagen, wo sie im Verlauf der "
"Zeit sein soll. Wir können diese Zahlenreihe nehmen, um eine Kurve zu "
"zeichnen, die ungefähr so aussieht:"

#: 03.3-Stretching-Samples.md:103
msgid "![sample graph](../../../etc/doc/images/tutorial/sample.png)"
msgstr ""
"![Beispielhafter Kurvenverlauf](../../../etc/doc/images/tutorial/sample.png)"

#: 03.3-Stretching-Samples.md:105
msgid ""
"You might have seen pictures like this before. It's called the *waveform* of a"
" sample. It's just a graph of numbers. Typically a waveform like this will hav"
"e 44100 points of data per second (this is due to the Nyquist-Shannon sampling"
" theorem). So, if the sample lasts for 2 seconds, the waveform will be represe"
"nted by 88200 numbers which we would feed to the speaker at a rate of 44100 po"
"ints per second. Of course, we could feed it at double rate which would be 882"
"00 points per second. This would therefore take only 1 second to play back. We"
" could also play it back at half rate which would be 22050 points per second t"
"aking 4 seconds to play back."
msgstr ""
"Vielleicht hast du Bilder wie dieses schon einmal gesehen. Das ist die "
"*Waveform* (Wellenform) eines Samples. Es ist einfach eine Kurve aus "
"Zahlenwerten. Typischerweise besteht eine Kurve wie diese aus 44100 "
"Datenpunkten je Sekunde (das hat mit dem Nyquist-Shannon-Abtasttheorem zu "
"tun). Wenn also das Sample 2 Sekunden dauert, dann wird die Kurve aus 88200 "
"Zahlen gebildet, die wir an den Lautsprecher mit einer Rate von 44100 "
"Datenpunkten pro Sekunde senden. Natürlich könnten wir das Sample mit der "
"doppelten Abtastrate senden, also 88200 Datenpunkten pro Sekunde. Dann würde "
"das Sample nur eine Sekunde lang dauern. Wir können es auch mit der halben "
"Rate abspielen; das wären dann 22050 Datenpunkte pro Sekunde und würde 4 "
"Sekunden dauern."

#: 03.3-Stretching-Samples.md:116
msgid "The duration of the sample is affected by the playback rate:"
msgstr "Die Dauer des Samples ist abhängig von der Abtastrate:"

#: 03.3-Stretching-Samples.md:118
msgid "Doubling the playback rate halves the playback time,"
msgstr "Wird die Abtastrate verdoppelt, halbiert das die Abspielzeit,"

#: 03.3-Stretching-Samples.md:119
msgid "Halving the playback rate doubles the playback time,"
msgstr "Wird die Abtastrate halbiert, dann verdoppelt das die Abspielzeit,"

#: 03.3-Stretching-Samples.md:120
msgid "Using a playback rate of one fourth quadruples the playback time,"
msgstr "Eine Abtastrate von einem Viertel vervierfacht die Abspielzeit,"

#: 03.3-Stretching-Samples.md:121
msgid "Using a playback rate of 1/10 makes playback last 10 times longer."
msgstr ""
"Bei Verwendung einer Abtastrate von 1/10 dauert die Abspielzeit 10 mal "
"länger."

#: 03.3-Stretching-Samples.md:123
msgid "We can represent this with the formula:"
msgstr "Wir können das in einer Formel abbilden:"

#: 03.3-Stretching-Samples.md:125
#, no-wrap
msgid "new_sample_duration = (1 / rate) * sample_duration "
msgstr "neue_sample_dauer = (1 / rate) * sample_dauer "

#: 03.3-Stretching-Samples.md:129
msgid ""
"Changing the playback rate also affects the pitch of the sample. The frequency"
" or pitch of a waveform is determined by how fast it moves up and down. Our br"
"ains somehow turn fast movement of speakers into high notes and slow movement "
"of speakers into low notes. This is why you can sometimes even see a big bass "
"speaker move as it pumps out super low bass - it's actually moving a lot slowe"
"r in and out than a speaker producing higher notes."
msgstr ""
"Eine Veränderung der Samplerate beeinflusst auch die Tonhöhe des Samples. "
"Die Frequenz oder Tonhöhe einer Kurve wird dadurch bestimmt, wie schnell sie "
"hoch und runter geht. Unser Gehirn macht aus schnellen Bewegungen einer "
"Lautsprechermembran hohe Töne und aus langsamen tiefe Töne. Deshalb kannst "
"du manchmal sogar sehen, wie sich ein großer Basslautsprecher bewegt, wenn "
"er einen sehr tiefen Ton ausgibt - tatsächlich bewegt er sich dann "
"wesentlich langsamer als ein Lautsprecher, der hohe Töne wiedergibt."

#: 03.3-Stretching-Samples.md:137
msgid ""
"If you take a waveform and squash it it will move up and down more times per s"
"econd. This will make it sound higher pitched. It turns out that doubling the "
"amount of up and down movements (oscillations) doubles the frequency. So, *pla"
"ying your sample at double rate will double the frequency you hear it*. Also, "
"*halving the rate will halve the frequency*. Other rates will affect the frequ"
"ency accordingly."
msgstr ""
"Wenn du eine Wellenform nimmst und sie zusammendrückst, wird sie in jeder "
"Sekunde häufiger hoch und runter gehen. Das lässt den Ton höher klingen. Es "
"zeigt sich, dass die Tonhöhe sich verdoppelt, wenn die Auf- und Abbewegungen "
"pro Sekunde (Oszillationen) verdoppelt werden. Also, *wenn du dein Sample "
"mit doppelter Rate abspielst, wird es auch doppelt so hoch klingen*, und "
"anders herum wird *eine Halbierung der Rate die Frequenz halbieren*. "
"Entsprechend werden auch andere Raten die Tonhöhe beeinflussen."

#: 03.4-Enveloped-Samples.md:1
msgid "3.4 Enveloped Samples"
msgstr "3.4 Samples mit Hüllkurven"

#: 03.4-Enveloped-Samples.md:3
msgid "Enveloped Samples"
msgstr "Samples mit Hüllkurven"

#: 03.4-Enveloped-Samples.md:5
msgid ""
"It is also possible to modify the *duration* and *amplitude* of a sample using"
" an ADSR envelope. However, this works slightly differently to the ADSR envelo"
"pe available on synths. Sample envelopes only allow you to reduce the amplitud"
"e and duration of a sample - and never to increase it. The sample will stop wh"
"en either the sample has finished playing or the envelope has completed - whic"
"hever is first. So, if you use a very long `release:`, it won't extend the dur"
"ation of the sample."
msgstr ""
"Es ist auch möglich, die *Dauer* und *Amplitude* eines Samples mit einer "
"ADSR-Hüllkurve zu verändern. Das funktioniert jedoch ein wenig anders als "
"bei den ADSR-Hüllkurven für Synths. Sample-Hüllkurven können die Amplitude "
"und die Dauer eines Samples nur verringern - niemals vergrößern. Das Sample "
"wird entweder stoppen, wenn seine normale Laufzeit vorbei ist, oder wenn die "
"Hüllkurve des Samples endet - je nach dem was zuerst passiert. Mit einem "
"sehr langen `release:` lässt sich die Dauer eines Samples nicht verlängern."

#: 03.4-Enveloped-Samples.md:13
msgid "Amen Envelopes"
msgstr "Amen-Hüllkurven"

#: 03.4-Enveloped-Samples.md:15
msgid "Let's return to our trusty friend the Amen Break:"
msgstr "Kommen wir zu unserem vertrauten Freund zurück, dem Amen-Break:"

#: 03.4-Enveloped-Samples.md:21
msgid ""
"With no opts, we hear the full sample at full amplitude. If we want to fade th"
"is in over 1 second we can use the `attack:` param:"
msgstr ""
"Ohne Opts hören wir das Sample in seiner gesamten Länge und mit voller "
"Lautstärke. Wenn wir es über 1 Sekunde einblenden wollen, können wir den "
"`attack:`-Parameter verwenden:"

#: 03.4-Enveloped-Samples.md:24
#, no-wrap
msgid "sample :loop_amen, attack: 1"
msgstr "sample :loop_amen, attack: 1"

#: 03.4-Enveloped-Samples.md:28
msgid "For a shorter fade in, choose a shorter attack value:"
msgstr "Wähle für ein kürzeres Einblenden einen kürzeren Attack-Wert:"

#: 03.4-Enveloped-Samples.md:30
#, no-wrap
msgid "sample :loop_amen, attack: 0.3"
msgstr "sample :loop_amen, attack: 0.3"

#: 03.4-Enveloped-Samples.md:34
msgid "Auto Sustain"
msgstr "Auto-Sustain"

#: 03.4-Enveloped-Samples.md:36
msgid ""
"Where the ADSR envelope's behaviour differs from the standard synth envelope i"
"s in the *sustain* value. In the standard synth envelope, the sustain defaulte"
"d to 0 unless you set it manually. With samples, the sustain value defaults to"
" an *automagical* value - the time left to play the rest of the sample. This i"
"s why we hear the full sample when we pass no defaults. If the attack, decay, "
"sustain and release values were all 0 we'd never hear a peep. Sonic Pi therefo"
"re calculates how long the sample is, deducts any attack, decay and release ti"
"mes and uses the result as your sustain time. If the attack, decay and release"
" values add up to more than the duration of the sample, the sustain is simply "
"set to 0."
msgstr ""
"Wo sich das Verhalten der ADSR-Hüllkurve von der Hüllkurve für Standard-"
"Synths unterscheidet ist der *Sustain*-Wert. Bei der Hüllkurve für Standard-"
"Synths steht der Sustain standardmäßig auf 0 - solange du den Wert nicht "
"ausdrücklich setzt. Bei Samples steht der Sustain-Wert standardmäßig auf "
"*automagical* - das ist in jedem Moment die Zeit, die es braucht, bis der "
"Rest des Samples abgelaufen ist. Darum hören wir das Sample komplett, wenn "
"wir keine Default-Werte übergeben. Wenn die Werte für Attack, Decay, Sustain "
"und Release alle auf 0 stünden, würden wir keinen Pieps hören. Daher "
"berechnet Sonic Pi, wie lange das Sample an sich dauert, zieht jegliche "
"Werte für Attack, Decay und Release davon ab und setzt die restliche Zeit "
"als Sustain-Wert. Wenn die Werte von Attack, Decay und Release "
"zusammengerechnet länger dauern als das gesamte Sample, wird der Sustain-"
"Wert einfach auf 0 gesetzt."

#: 03.4-Enveloped-Samples.md:48
msgid "Fade Outs"
msgstr "Ausblenden"

#: 03.4-Enveloped-Samples.md:50
msgid ""
"To explore this, let's consider our Amen break in more detail. If we ask Sonic"
" Pi how long the sample is:"
msgstr ""
"Um das auszuprobieren, schauen wir uns den Amen-Break im Detail an. Wenn wir "
"Sonic Pi fragen, wie lang das Sample ist:"

#: 03.4-Enveloped-Samples.md:53
#, no-wrap
msgid "print sample_duration :loop_amen"
msgstr "print sample_duration :loop_amen"

#: 03.4-Enveloped-Samples.md:57
msgid ""
"It will print out `1.753310657596372` which is the length of the sample in sec"
"onds. Let's just round that to `1.75` for convenience here. Now, if we set the"
" release to `0.75`, something surprising will happen:"
msgstr ""
"Wird `1.753310657596372` ausgeben, was der Länge des Sample in Sekunden "
"entspricht. Wir runden das zur Vereinfachung auf `1.75` ab. Wenn wir nun den "
"Release-Wert auf `0.75` setzen, wird etwas erstaunliches passieren:"

#: 03.4-Enveloped-Samples.md:61
#, no-wrap
msgid "sample :loop_amen, release: 0.75"
msgstr "sample :loop_amen, release: 0.75"

#: 03.4-Enveloped-Samples.md:65
msgid ""
"It will play the first second of the sample at full amplitude before then fadi"
"ng out over a period of 0.75 seconds. This is the *auto sustain* in action. By"
" default, the release always works from the end of the sample. If our sample w"
"as 10.75 seconds long, it would play the first 10 seconds at full amplitude be"
"fore fading out over 0.75s."
msgstr ""
"Die erste Sekunde des Sample wird mit voller Lautstärke gespielt, danach "
"wird über eine Periode von 0.75 Sekunden ausgeblendet. Das ist der *Auto-"
"Sustain* in Aktion. Standardmäßig berechnet Sonic Pi den Release immer vom "
"Ende des Samples aus gesehen. Wenn unser Sample 10.75 Sekunden lang wäre, "
"würden die ersten 10 Sekunden in voller Lautstärke gespielt, bevor über 0.75 "
"Sekunden das Ausblenden erfolgt."

#: 03.4-Enveloped-Samples.md:71
msgid "Remember: by default, `release:` fades out at the end of a sample."
msgstr "Merke: Normalerweise blendet `release:` das Ende des Sample aus."

#: 03.4-Enveloped-Samples.md:73
msgid "Fade In and Out"
msgstr "Ein- und Ausblenden"

#: 03.4-Enveloped-Samples.md:75
msgid ""
"We can use both `attack:` and `release:` together with the auto sustain behavi"
"our to fade both in and out over the duration of the sample:"
msgstr ""
"Wir können beide, `attack:` und `release:`, gemeinsam mit dem Auto-Sustain "
"nutzen, um über die Dauer des Samples ein- und auszublenden:"

#: 03.4-Enveloped-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, attack: 0.75, release: 0.75"
msgstr "sample :loop_amen, attack: 0.75, release: 0.75"

#: 03.4-Enveloped-Samples.md:82
msgid ""
"As the full duration of the sample is 1.75s and our attack and release phases "
"add up to 1.5s, the sustain is automatically set to 0.25s. This allows us to e"
"asily fade the sample in and out."
msgstr ""
"Da die Gesamtdauer des Sample 1.75s beträgt und unsere Attack- und Release-"
"Phasen zusammen 1.5s ergeben, erhält die Sustain-Phase automatisch eine "
"Länge von 0.25s. So ist es ganz einfach, das Sample ein- und auszublenden."

#: 03.4-Enveloped-Samples.md:86
msgid "Explicit sustain"
msgstr "Ausdrücklicher Sustain"

#: 03.4-Enveloped-Samples.md:88
msgid ""
"We can easily get back to our normal synth ADSR behaviour by manually setting "
"`sustain:` to a value such as 0:"
msgstr ""
"Wir können ohne weiteres wieder das normale Synth-ADSR-Verhalten aktivieren, "
"indem wir `sustain:` auf den Wert 0 setzen:"

#: 03.4-Enveloped-Samples.md:91
#, no-wrap
msgid "sample :loop_amen, sustain: 0, release: 0.75"
msgstr "sample :loop_amen, sustain: 0, release: 0.75"

#: 03.4-Enveloped-Samples.md:95
msgid ""
"Now, our sample only plays for 0.75 seconds in total. With the default for `at"
"tack:` and `decay:` at 0, the sample jumps straight to full amplitude, sustain"
"s there for 0s then releases back down to 0 amplitude over the release period "
"- 0.75s."
msgstr ""
"Jetzt spielt unser Sample insgesamt nur für 0.75 Sekunden. Mit dem "
"Standardwert 0 für `attack:` und `decay:` springt das Sample direkt auf die "
"volle Lautstärke, bleibt dort für 0s und fällt dann innerhalb der Release-"
"Phase mit einer Dauer von 0.75s auf die Lautstärke 0 ab."

#: 03.4-Enveloped-Samples.md:100
msgid "Percussive cymbals"
msgstr "Perkussive Becken"

#: 03.4-Enveloped-Samples.md:102
msgid ""
"We can use this behaviour to good effect to turn longer sounding samples into "
"shorter, more percussive versions. Consider the sample `:drum_cymbal_open`:"
msgstr ""
"Wir können dieses Verhalten gut dazu benutzen, um länger klingende Samples "
"in kürzere, perkussivere Versionen zu verwandeln. Sieh dir das Sample "
"`:drum_cymbal_open` an:"

#: 03.4-Enveloped-Samples.md:106
#, no-wrap
msgid "sample :drum_cymbal_open"
msgstr "sample :drum_cymbal_open"

#: 03.4-Enveloped-Samples.md:110
msgid ""
"You can hear the cymbal sound ringing out over a period of time. However, we c"
"an use our envelope to make it more percussive:"
msgstr ""
"Du kannst hören, wie das Becken eine Zeit lang ausklingt. Mit einer leicht "
"veränderten Hüllkurve können wir es perkussiver klingen lassen:"

#: 03.4-Enveloped-Samples.md:113
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0, release: 0.1"

#: 03.4-Enveloped-Samples.md:117
msgid ""
"You can then emulate hitting the cymbal and then dampening it by increasing th"
"e sustain period:"
msgstr ""
"Du kannst den Eindruck eines Anschlagens und Abdämpfens des Beckens "
"erzeugen, indem du die Sustain-Phase erhöhst:"

#: 03.4-Enveloped-Samples.md:120
#, no-wrap
msgid "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"
msgstr "sample :drum_cymbal_open, attack: 0.01, sustain: 0.3, release: 0.1"

#: 03.4-Enveloped-Samples.md:124
msgid ""
"Now go and have fun putting envelopes over the samples. Try changing the rate "
"too for really interesting results."
msgstr ""
"Jetzt versuche Hüllkurven über Samples zu legen. Verändere auch die "
"Samplerate - damit kannst du wirklich interessante Ergebnisse erzielen."

#: 03.5-Partial-Samples.md:1
msgid "3.5 Partial Samples"
msgstr "3.5 Teil-Samples"

#: 03.5-Partial-Samples.md:3
msgid "Partial Samples"
msgstr "Teil-Samples"

#: 03.5-Partial-Samples.md:5
msgid ""
"This section will conclude our exploration of Sonic Pi's sample player. Let's "
"do a quick recap. So far we've looked at how we can trigger samples:"
msgstr ""
"Dieser Abschnitt schließt unsere Erkundung von Sonic Pi's Sample-Player ab. "
"Fassen wir noch einmal zusammen. Wir haben uns angesehen, wie wir Samples "
"abspielen können:"

#: 03.5-Partial-Samples.md:13
msgid ""
"We then looked at how we can change the rate of samples such as playing them a"
"t half speed:"
msgstr ""
"Dann haben wir gesehen, dass wir die Samplerate ändern können - etwa um ein Sa"
"mple mit halber Geschwindigkeit abzuspielen:"

#: 03.5-Partial-Samples.md:20
msgid "Next, we looked at how we could fade a sample in (let's do it at half speed):"
msgstr ""
"Als nächstes haben wir einen Blick darauf geworfen, wie wir ein Sample ein- "
"und ausblenden können (z. B. mit halber Geschwindigkeit):"

#: 03.5-Partial-Samples.md:23
#, no-wrap
msgid "sample :loop_amen, rate: 0.5, attack: 1"
msgstr "sample :loop_amen, rate: 0.5, attack: 1"

#: 03.5-Partial-Samples.md:27
msgid ""
"We also looked at how we could use the start of a sample percussively by givin"
"g `sustain:` an explicit value and setting both the attack and release to be s"
"hort values:"
msgstr ""
"Wir haben uns auch angeschaut, wie wir einen Sample-Anfang perkussiver "
"klingen lassen können, indem wir `sustain:` ausdrücklich einen Wert "
"zuweisen, und sowohl Attack als auch Release auf kurze Werte setzen:"

#: 03.5-Partial-Samples.md:31
#, no-wrap
msgid "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"
msgstr "sample :loop_amen, rate: 2, attack: 0.01, sustain: 0, release: 0.35"

#: 03.5-Partial-Samples.md:35
msgid ""
"However, wouldn't it be nice if we didn't have to always start at the beginnin"
"g of the sample? Wouldn't it also be nice if we didn't have to always finish a"
"t the end of the sample?"
msgstr ""
"Wäre es aber nicht toll, wenn wir ein Sample nicht immer vom Anfang starten "
"lassen müssten? Wäre es nicht auch toll, wenn wir das Sample nicht immer "
"erst am Ende stoppen könnten?"

#: 03.5-Partial-Samples.md:39
msgid "Choosing a starting point"
msgstr "Einen Startpunkt bestimmen"

#: 03.5-Partial-Samples.md:41
msgid ""
"It is possible to choose an arbitrary starting point in the sample as a value "
"between 0 and 1 where 0 is the start of the sample, 1 is the end and 0.5 is ha"
"lf way through the sample. Let's try playing only the last half of the amen br"
"eak:"
msgstr ""
"Es ist möglich einen beliebigen Startpunkt in einem Sample als Wert zwischen "
"0 und 1 auszuwählen. Dabei ist 0 der Anfang, 1 das Ende und 0.5 die Mitte "
"des Samples. Versuchen wir also jetzt nur die zweite Hälfte des Amen Break "
"zu spielen:"

#: 03.5-Partial-Samples.md:46
#, no-wrap
msgid "sample :loop_amen, start: 0.5"
msgstr "sample :loop_amen, start: 0.5"

#: 03.5-Partial-Samples.md:50
msgid "How about the last quarter of the sample:"
msgstr "Wie wäre es mit nur dem letzten Viertel des Samples:"

#: 03.5-Partial-Samples.md:52
#, no-wrap
msgid "sample :loop_amen, start: 0.75"
msgstr "sample :loop_amen, start: 0.75"

#: 03.5-Partial-Samples.md:56
msgid "Choosing a finish point"
msgstr "Einen Endpunkt bestimmen"

#: 03.5-Partial-Samples.md:58
msgid ""
"Similarly, it is possible to choose an arbitrary finish point in the sample as"
" a value between 0 and 1. Let's finish the amen break half way through:"
msgstr ""
"Auf ähnliche Weise können wir mit einem Wert zwischen 0 und 1 einen "
"beliebigen Endpunkt im Sample festlegen. Beenden wir den Amen-Break nach der "
"ersten Hälfte:"

#: 03.5-Partial-Samples.md:62 A.12-sample-slicing.md:62
#, no-wrap
msgid "sample :loop_amen, finish: 0.5"
msgstr "sample :loop_amen, finish: 0.5"

#: 03.5-Partial-Samples.md:66
msgid "Specifying start and finish"
msgstr "Start- und Endpunkt bestimmen"

#: 03.5-Partial-Samples.md:68
msgid ""
"Of course, we can combine these two to play arbitrary segments of the audio fi"
"le. How about only a small section in the middle:"
msgstr ""
"Natürlich können wir diese beiden auch kombinieren, um so einen beliebigen "
"Abschnitt des Samples abzuspielen. Wie wäre es mit nur einem kurzen "
"Abschnitt in der Mitte:"

#: 03.5-Partial-Samples.md:71
#, no-wrap
msgid "sample :loop_amen, start: 0.4, finish: 0.6"
msgstr "sample :loop_amen, start: 0.4, finish: 0.6"

#: 03.5-Partial-Samples.md:75
msgid "What happens if we choose a start position after the finish position?"
msgstr ""
"Was passiert, wenn wir eine Startposition hinter der Endposition auswählen?"

#: 03.5-Partial-Samples.md:78
#, no-wrap
msgid "sample :loop_amen, start: 0.6, finish: 0.4"
msgstr "sample :loop_amen, start: 0.6, finish: 0.4"

#: 03.5-Partial-Samples.md:82
msgid "Cool! It plays it backwards!"
msgstr "Cool! Es spielt rückwärts!"

#: 03.5-Partial-Samples.md:84
msgid "Combining with rate"
msgstr "Kombinieren mit Samplerate"

#: 03.5-Partial-Samples.md:86
msgid ""
"We can combine this new ability to play arbitrary segments of audio with our f"
"riend `rate:`. For example, we can play a very small section of the middle of "
"the amen break very slowly:"
msgstr ""
"Wir können diese neue Fähigkeit, beliebige Abschnitte eines Klangs zu "
"spielen, unserem Freund `rate:` kombinieren. Zum Beispiel können wir einen "
"sehr kurzen Abschnitt des Amen-Breaks sehr langsam spielen:"

#: 03.5-Partial-Samples.md:90
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"
msgstr "sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2"

#: 03.5-Partial-Samples.md:94
msgid "Combining with envelopes"
msgstr "Kombinieren mit Hüllkurven"

#: 03.5-Partial-Samples.md:96
msgid ""
"Finally, we can combine all of this with our ADSR envelopes to produce interes"
"ting results:"
msgstr ""
"Und schließlich können wir all dies mit unseren ADSR-Hüllkurven kombinieren, "
"um interessante Ergebnisse hervorzubringen:"

#: 03.5-Partial-Samples.md:99
#, no-wrap
msgid ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"
msgstr ""
"sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: "
"1"

#: 03.5-Partial-Samples.md:103
msgid "Now go and have a play mashing up samples with all of this fun stuff..."
msgstr "Jetzt leg los und vermansche Samples mit all diesem spaßigen Zeug..."

#: 03.6-External-Samples.md:1
msgid "3.6 External Samples"
msgstr "3.6 Externe Samples"

#: 03.6-External-Samples.md:3
msgid "External Samples"
msgstr "Externe Samples"

#: 03.6-External-Samples.md:5
msgid ""
"Whilst the built-in samples can get you up and started quickly, you might wish"
" to experiment with other recorded sounds in your music. Sonic Pi totally supp"
"orts this. First though, let's have a quick discussion on the portability of y"
"our piece."
msgstr ""
"Während die mitgelieferten Samples die schnell an den Start bringen und "
"loslegen lassen, möchtest du vielleicht aber mit anderen aufgenommenen "
"Klängen in deiner Musik experimentieren. Sonic Pi unterstützt das "
"ausdrücklich. Lass uns aber zunächst über die Übertragbarkeit deines Stücks "
"sprechen."

#: 03.6-External-Samples.md:10
msgid "Portability"
msgstr "Übertragbarkeit"

#: 03.6-External-Samples.md:12
msgid ""
"When you compose your piece purely with built-in synths and samples, the code "
"is all you need to faithfully reproduce your music. Think about that for a mom"
"ent - that's amazing! A simple piece of text you can email around or stick in "
"a [Gist](https://gist.github.com) represents everything you need to reproduce "
"your sounds. That makes it *really easy to share* with your friends as they ju"
"st need to get hold of the code."
msgstr ""
"Wenn du dein Stück nur basierend auf den eingebauten Synths und Samples "
"komponierst, braucht es nur den Code, um deine Musik originalgetreu "
"wiederzugeben. Denke einen Augenblick darüber nach - das ist erstaunlich! "
"Ein einfaches Stück Text, das du per E-Mail herumschicken oder in einem "
"[Gist](https://gist.github.com) ablegen kannst, repräsentiert alles, was du "
"brauchst, um deine Klänge zu reproduzieren. *Das macht es sehr einfach mit "
"deinen Freunden zu teilen.* Sie brauchen nur den Code von dir."

#: 03.6-External-Samples.md:19
msgid ""
"However, if you start using your own pre-recorded samples, you lose this porta"
"bility. This is because to reproduce your music other people not only need you"
"r code, they need your samples too. This limits the ability for others to mani"
"pulate, mash-up and experiment with your work. Of course this shouldn't stop y"
"ou from using your own samples, it's just something to consider."
msgstr ""
"Wie auch immer, wenn du anfängst selbst aufgenommene Samples zu verwenden, "
"verlierst du diese Übertragbarkeit. Das liegt daran, dass die Leute, um "
"deine Musik zu reproduzieren nicht nur den Code, sondern auch deine Samples "
"benötigen. Das schränkt die Möglichkeit für andere ein, mit deiner Arbeit zu "
"experimentieren, sie zu verändern, sie zu vermanschen (mash-up). Natürlich "
"sollte dich das nicht davon abhalten deine eigenen Samples zu verwenden, es "
"ist nur etwas, das du in deine Überlegungen einbeziehen solltest."

#: 03.6-External-Samples.md:26
msgid "Local Samples"
msgstr "Lokale Samples"

#: 03.6-External-Samples.md:28
msgid ""
"So how do you play any arbitrary WAV, AIFF, OGG, OGA or FLAC file on your comp"
"uter? All you need to do is pass the path of that file to `sample`:"
msgstr ""
"Wie geht das nun, eine beliebige WAV-, AIFF- oder FLAC-Datei von deinem "
"Computer abzuspielen? Alles was du dafür tun musst ist `sample` den Pfad zu "
"der Datei zu übergeben:"

#: 03.6-External-Samples.md:31
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\"\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\""

#: 03.6-External-Samples.md:38
msgid ""
"Sonic Pi will automatically load and play the sample. You can also pass all th"
"e standard params you're used to passing `sample`:"
msgstr ""
"Sonic Pi wird das Sample nun automatisch laden und spielen. Du kannst auch "
"all die Standard-Parameter, die du bereits kennst, an `sample` übergeben:"

#: 03.6-External-Samples.md:41
#, no-wrap
msgid ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"
msgstr ""
"# Raspberry Pi, Mac, Linux\n"
"sample \"/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3\n"
"# Windows\n"
"sample \"C:/Users/sam/Desktop/my-sound.wav\", rate: 0.5, amp: 0.3"

#: 03.7-Sample-Packs.md:1
msgid "3.7 Sample Packs"
msgstr "3.7 Sample-Pakete"

#: 03.7-Sample-Packs.md:3
msgid "Sample Packs"
msgstr "Sample-Pakete"

#: 03.7-Sample-Packs.md:5
msgid ""
"**Note: this section of the tutorial covers the advanced topic of working with"
" large directories of your own samples. This will be the case if you've downlo"
"aded or bought your own sample packs and wish to use them within Sonic Pi.**"
msgstr ""
"**Hinweis: Dieser Abschnitt des Tutorials behandelt das fortgeschrittene "
"Thema der Arbeit mit großen Verzeichnissen deiner eigenen Samples. Dies wird "
"nützlich sein, wenn du deine eigenen Sample Packs heruntergeladen oder "
"gekauft hast und diese in Sonic Pi nutzen möchtest.**"

#: 03.7-Sample-Packs.md:10
msgid "**Feel free to skip this if you're happy working with the built-in samples.**"
msgstr ""
"**Überspringe diesen Abschnitt, wenn dir die mitgelieferten Samples für die "
"Arbeit ausreichen.**"

#: 03.7-Sample-Packs.md:13
msgid ""
"When working with large folders of external samples it can be cumbersome to ha"
"ve to type the whole path every time to trigger an individual sample."
msgstr ""
"Wenn du mit großen Ordnern mit externen Samples arbeitest, kann es mühselig "
"sein, jedes Mal den vollständigen Pfad eingeben zu müssen, um ein bestimmtes "
"Sample abzuspielen."

#: 03.7-Sample-Packs.md:17
msgid "For example, say you have the following folder on your machine:"
msgstr "Sagen wir, du hast zum Beispiel folgenden Ordner auf deinem Computer:"

#: 03.7-Sample-Packs.md:19
#, no-wrap
msgid "/path/to/my/samples/"
msgstr "/pfad/zu/meinen/samples/"

#: 03.7-Sample-Packs.md:23
msgid "When we look inside that folder we find the following samples:"
msgstr "Wenn wir in diesen Ordner schauen, finden wir die folgenden Samples:"

#: 03.7-Sample-Packs.md:25 03.7-Sample-Packs.md:86
msgid "`100_A#_melody1.wav`"
msgstr "`100_A#_melody1.wav`"

#: 03.7-Sample-Packs.md:26 03.7-Sample-Packs.md:87
msgid "`100_A#_melody2.wav`"
msgstr "`100_A#_melody2.wav`"

#: 03.7-Sample-Packs.md:27 03.7-Sample-Packs.md:88
msgid "`100_A#_melody3.wav`"
msgstr "`100_A#_melody3.wav`"

#: 03.7-Sample-Packs.md:28 03.7-Sample-Packs.md:89
msgid "`120_A#_melody4.wav`"
msgstr "`120_A#_melody4.wav`"

#: 03.7-Sample-Packs.md:29 03.7-Sample-Packs.md:90
msgid "`120_Bb_guit1.wav`"
msgstr "`120_Bb_guit1.wav`"

#: 03.7-Sample-Packs.md:30 03.7-Sample-Packs.md:91
msgid "`120_Bb_piano1.wav`"
msgstr "`120_Bb_piano1.wav`"

#: 03.7-Sample-Packs.md:32
msgid "Typically in order to play the piano sample we can use the full path:"
msgstr ""
"Üblicherweise können wir den vollständigen Pfad nutzen um das Piano-Sample abz"
"uspielen:"

#: 03.7-Sample-Packs.md:34
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_piano1.wav\""
msgstr "sample \"/pfad/zu/meinen/samples/120_Bb_piano1.wav\""

#: 03.7-Sample-Packs.md:38
msgid "If we want to then play the guitar sample we can use its full path too:"
msgstr ""
"Wenn wir dann das Gitarren-Sample abspielen wollen, können wir ebenfalls den "
"vollständigen Pfad nutzen:"

#: 03.7-Sample-Packs.md:40
#, no-wrap
msgid "sample \"/path/to/my/samples/120_Bb_guit.wav\""
msgstr "sample \"/pfad/zu/meinen/samples/120_Bb_guit.wav\""

#: 03.7-Sample-Packs.md:44
msgid ""
"However, both of these calls to sample requires us to *know* the names of the "
"samples within our directory. What if we just want to listen to each sample in"
" turn quickly?"
msgstr ""
"Wie auch immer, beide Aufrufe verlangen von uns, dass wir die Namen der "
"Samples innerhalb des Verzeichnisses *kennen*. Was, wenn wir einfach nur "
"schnell die einzelnen Samples nacheinander abhören wollen?"

#: 03.7-Sample-Packs.md:48
msgid "Indexing Sample Packs"
msgstr "Sample-Packs indizieren"

#: 03.7-Sample-Packs.md:50
msgid ""
"If we want to play the first sample in a directory we just need to pass the di"
"rectory's name to `sample` and the index `0` as follows:"
msgstr ""
"Wenn wir das erste Sample in einem Verzeichnis abspielen wollen, müssen wir "
"nur den Verzeichnisnamen an `sample` und den Index `0` eingeben. "
"Folgendermaßen:"

#: 03.7-Sample-Packs.md:53
#, no-wrap
msgid "sample \"/path/to/my/samples/\", 0"
msgstr "sample \"/pfad/zu/meinen/samples/\", 0"

#: 03.7-Sample-Packs.md:57
msgid "We can even make a shortcut to our directory path using a variable:"
msgstr ""
"Wir können sogar eine Verknüpfung zu unserem Verzeichnispfad anlegen, indem "
"wir eine Variable nutzen:"

#: 03.7-Sample-Packs.md:59
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/pfad/zu/meinen/samples/\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:64
msgid ""
"Now, if we want to play the second sample in our directory, we just need to ad"
"d 1 to our index:"
msgstr ""
"Wenn wir nun das zweite Sample in unserem Verzeichnis abspielen wollen, "
"müssen wir lediglich 1 zu unserem Index hinzufügen:"

#: 03.7-Sample-Packs.md:67
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, 1"
msgstr ""
"samps = \"/pfad/zu/meinen/samples/\"\n"
"sample samps, 1"

#: 03.7-Sample-Packs.md:72
msgid ""
"Notice that we no longer need to know the names of the samples in the director"
"y - we just need to know the directory itself (or have a shortcut to it). If w"
"e ask for an index which is larger than the number of samples, it simply wraps"
" round just like Rings. Therefore, whatever number we use we're guaranteed to "
"get one of the samples in that directory."
msgstr ""
"Beachte, dass wir nicht mehr die Namen der Samples im Verzeichnis kennen "
"müssen - wir müssen nur das Verzeichnis selbst kennen (oder eine Verknüpfung "
"dort hin). Wenn wir nach einer Index-Zahl fragen, die größer ist als die "
"Anzahl an Samples, fängt die Liste einfach von vorne an - wie bei Ringen. "
"Also egal welche Index-Zahl wir nutzen, es ist garantiert, dass wir eines "
"der Samples aus dem Verzeichnis bekommen."

#: 03.7-Sample-Packs.md:79
msgid "Filtering Sample Packs"
msgstr "Sample-Packs filtern"

#: 03.7-Sample-Packs.md:81
msgid ""
"Usually indexing is enough, but sometimes we need more power to sort and organ"
"ise our samples. Luckily many sample packs add useful information in the filen"
"ames. Let's take another look at the sample file names in our directory:"
msgstr ""
"Gewöhnlich reicht das Indizieren aus, aber manchmal benötigen wir "
"machtvollere Mittel, um unsere Samples zu organisieren. Glücklicherweise "
"packen viele Sample-Packs nützliche Informationen in die Dateinamen. Lass "
"uns einen weiteren Blick auf die Dateinamen der Samples in unserem "
"Verzeichnis werfen:"

#: 03.7-Sample-Packs.md:93
msgid ""
"Notice that in these filenames we have quite a bit of information. Firstly, we"
" have the BPM of the sample (beats per minute) at the start. So, the piano sam"
"ple is at 120 BPM and our first three melodies are at 100 BPM. Also, our sampl"
"e names contain the key. So the guitar sample is in Bb and the melodies are in"
" A#. This information is very useful for mixing in these samples with our othe"
"r code. For example, we know we can only play the piano sample with code that'"
"s in 120 BPM and in the key of Bb."
msgstr ""
"Achte darauf, dass In diesen Dateinamen einiges an Informationen enthalten "
"ist. Zuerst haben wir die BPM (\"beats per minute\") des Samples am Beginn. "
"D.h. das Piano-Sample ist in 120 BPM und unsere ersten drei Melodien sind in "
"100 BPM. Außerdem steht in den Sample-Namen die Tonart. Das Gitarren-Sample "
"ist in Bb, und die Melodien sind in A#. Diese Information ist für das Mixen "
"der Samples mit unserem Code sehr wichtig. Zum Beispiel wissen wir, dass wir "
"das Piano-Sample nur mit Code verwenden können, der 120 BPM und die Tonart "
"Bb hat."

#: 03.7-Sample-Packs.md:102
msgid ""
"It turns out that we can use this particular naming convention of our sample s"
"ets in the code to help us filter out the ones we want. For example, if we're "
"working at 120 BPM, we can filter down to all the samples that contain the str"
"ing `\"120\"` with the following:"
msgstr ""
"Es stellt sich heraus, dass wir dies spezielle Namensgebung unserer Sample-"
"Sets im Code nutzen können, um die Samples herauszufiltern, die wir wollen. "
"Wenn wir zum Beispiel mit 120 BPM arbeiten, können wir mit folgendem Code "
"alle Samples filtern, deren Name den String `\"120\"` enthält:"

#: 03.7-Sample-Packs.md:107
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\""
msgstr ""
"samps = \"/pfad/zu/meinen/samples/\"\n"
"sample samps, \"120\""

#: 03.7-Sample-Packs.md:112
msgid ""
"This will play us the first match. If we want the second match we just need to"
" use the index:"
msgstr ""
"Dieser Code wird uns das erste passende Sample abspielen. Wenn wir das "
"zweite passende Sample abspielen wollen, müssen wir nur eine Index-Zahl "
"nutzen:"

#: 03.7-Sample-Packs.md:115
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", 1"
msgstr ""
"samps = \"/pfad/zu/meinen/samples/“\n"
"sample samps, \"120\", 1"

#: 03.7-Sample-Packs.md:120
msgid ""
"We can even use multiple filters at the same time. For example, if we want a s"
"ample whose filename contains both the substrings `\"120\"` and `\"A#\"` we can fi"
"nd it easily with the following code:"
msgstr ""
"Wir können sogar mehrere Filter gleichzeitig nutzen. Wenn wir ein Sample "
"wollen, dessen Name sowohl den String `\"120\"` als auch den String `\"A#\"` "
"enthält, können wir das leicht mit dem folgenden Code erreichen:"

#: 03.7-Sample-Packs.md:124
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"A#\""
msgstr ""
"samps = \"/pfad/zu/meinen/samples/\"\n"
"sample samps, \"120\", \"A#\""

#: 03.7-Sample-Packs.md:129
msgid "Finally, we're still free to add our usual opts to the call to `sample`:"
msgstr ""
"Schließlich können wir auch noch unsere üblichen Optionen dem `sample`-"
"Aufruf anhängen:"

#: 03.7-Sample-Packs.md:131
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"
msgstr ""
"samps = \"/pfad/zu/meinen/samples/\"\n"
"sample samps, \"120\", \"Bb\", 1, lpf: 70, amp: 2"

#: 03.7-Sample-Packs.md:136
msgid "Sources"
msgstr "Quellen"

#: 03.7-Sample-Packs.md:138
msgid ""
"The sample filter pre-arg system understands two types of information: *source"
"s* and *filters*. Sources are information used to create the list of potential"
" candidates. A source can take two forms:"
msgstr ""
"Das Filter-System für Samples versteht zwei Typen von Informationen: Quellen "
"und Filter. Quellen sind Informationen, um eine Liste möglicher Kandidaten "
"zu versammeln. Eine Quelle kann in zwei Formen angegeben werden:"

#: 03.7-Sample-Packs.md:142
msgid "`\"/path/to/samples\"` - a string representing a valid path to a directory"
msgstr ""
"\"/pfad/zu/samples\" - eine Zeichenkette (string), die einen gültigen Pfad "
"zu einem Verzeichnis angibt"

#: 03.7-Sample-Packs.md:143
msgid "`\"/path/to/samples/foo.wav\"` - a string representing a valid path to a sample"
msgstr ""
"\"/pfad/zu/samples/foo.wav\" - eine Zeichenkette (string), die einen "
"gültigen Pfad zu einem Sample angibt"

#: 03.7-Sample-Packs.md:145
msgid ""
"The `sample` fn will first gather all sources and use them to create a large l"
"ist of candidates. This list is constructed by first adding all valid paths an"
"d then by adding all the valid `.flac`, `.aif`, `.aiff`, `.wav`, `.wave` files"
" contained within the directories."
msgstr ""
"Die `sample`-Funktion sammelt alle Quellen und erzeugt daraus eine lange "
"Liste von Kandidaten. Für diese Liste durchsucht die Funktion zunächst alle "
"gültigen Verzeichnispfade und fügt dann alle darin enthaltenen Dateien in "
"den Formaten `.flac`, `.aif`, `.aiff`, `.wav`, `.wave` hinzu."

#: 03.7-Sample-Packs.md:150
msgid "For example, take a look at the following code:"
msgstr "Schau Dir z. B. den folgenden Code an:"

#: 03.7-Sample-Packs.md:152
#, no-wrap
msgid ""
"samps = \"/path/to/my/samples/\"\n"
"samps2 = \"/path/to/my/samples2/\"\n"
"path = \"/path/to/my/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"
msgstr ""
"samps = \"/pfad/zu/meinen/samples/\"\n"
"samps2 = \"/pfad/zu/meinen/samples2/\"\n"
"path = \"/pfad/zu/meinen/samples3/foo.wav\"\n"
"sample samps, samps2, path, 0"

#: 03.7-Sample-Packs.md:160
msgid ""
"Here, we're combining the contents of the samples within two directories and a"
"dding a specific sample. If `\"/path/to/my/samples/\"` contained 3 samples and `"
"\"/path/to/my/samples2/\"` contained 12, we'd have 16 potential samples to index"
" and filter (3 + 12 + 1)."
msgstr ""
"Hier kombinieren wir alle Samples aus zwei Verzeichnissen und fügen noch ein "
"einzelnes Sample hinzu. Wenn `\"/pfad/zu/meinen/samples/\"` 3 Samples und `\""
"/path/to/my/samples2/\"` 12 Samples enthielte, hätten wir insgesamt 16 "
"mögliche Samples, die wir indexieren und filtern können (3 + 12 + 1)."

#: 03.7-Sample-Packs.md:165
msgid ""
"By default, only the sample files within a directory are gathered into the can"
"didate list. Sometimes you might have a number of nested folders of samples yo"
"u wish to search and filter within. You can therefore do a recursive search fo"
"r all samples within all subfolders of a particular folder by adding `**` to t"
"he end of the path:"
msgstr ""
"Standardmäßig werden nur die Sample-Dateien des angegebenen Verzeichnisses "
"in der Kandidatenliste gesammelt. Manchmal möchtest du vielleicht eine ganze "
"Reihe ineinander verschachtelter Ordner mit Samples durchsuchen und filtern. "
"Das kannst du mit einer rekursiven Suche nach allen Samples in allen "
"Unterordnern erreichen, indem du `**` an das Ende des Pfads hängst:"

#: 03.7-Sample-Packs.md:171
#, no-wrap
msgid ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"
msgstr ""
"samps = \"/path/to/nested/samples/**\"\n"
"sample samps, 0"

#: 03.7-Sample-Packs.md:176
msgid ""
"Take care though as searching through a very large set of folders may take a l"
"ong time. However, the contents of all folder sources are cached, so the delay"
" will only happen the first time."
msgstr ""
"Beachte jedoch, dass eine Suche über viele Verzeichnisse hinweg viel Zeit in "
"Anspruch nehmen kann. Allerdings wird der Inhalt aller Ordner, die du als "
"Quellen angegeben hast, zwischengespeichert - die Verzögerung wird also nur "
"bei der ersten Suche auftreten."

#: 03.7-Sample-Packs.md:180
msgid ""
"Finally, note that the sources *must go first*. If no source is given, then th"
"e set of built-in samples will be selected as the default list of candidates t"
"o work with."
msgstr ""
"Ein wichtiger Punkt zum Abschluss: Die Quelle *muss als erstes angegeben "
"werden*. Wenn keine Quelle angegeben wird, werden die mitgelieferten Samples "
"als die Standardliste der Kandidaten ausgewählt, mit denen du dann weiter "
"arbeitest."

#: 03.7-Sample-Packs.md:184 A.19-subtractive-synthesis.md:47
msgid "Filters"
msgstr "Filter"

#: 03.7-Sample-Packs.md:186
msgid ""
"Once you have a list of candidates you may use the following filtering types t"
"o further reduce the selection:"
msgstr ""
"Wenn du erst einmal eine Kandidatenliste hast, kannst du die folgenden "
"Filtertypen nutzen, um die Auswahl weiter einzugrenzen:"

#: 03.7-Sample-Packs.md:189
msgid ""
"`\"foo\"` Strings will filter on substring occurrence within file name (minus di"
"rectory path and extension)."
msgstr ""
"`\"foo\"` filtert alle Dateinamen, in denen diese Zeichenkette vorkommt ("
"abzüglich des Verzeichnispfades und der Dateiendung)."

#: 03.7-Sample-Packs.md:190
msgid ""
"`/fo[oO]/` Regular Expressions will filter on pattern matching of file name (m"
"inus directory path and extension)."
msgstr ""
"`/fo[oO]/` filtert alle Dateinamen, die diesem regulären Ausdruck "
"entsprechen (abzüglich des Verzeichnispfades und der Dateiendung)."

#: 03.7-Sample-Packs.md:191
msgid ""
"`:foo` - Keywords will filter candidates on whether the keyword is a direct ma"
"tch of the filename (minus directory path and extension)."
msgstr ""
"`:foo` - filtert alle Kandidaten, bei denen dieses Schlüsselwort genau dem "
"Dateinamen entspricht (abzüglich des Verzeichnispfades und der Dateiendung)."

#: 03.7-Sample-Packs.md:192
msgid ""
"`lambda{|a| ... }` - Procs with one argument will be treated as a candidate fi"
"lter or generator function. It will be passed the list of current candidates a"
"nd must return a new list of candidates (a list of valid paths to sample files"
")."
msgstr ""
"`lambda{|a| ... }` - Procs mit einem Argument werden als Filter für "
"Kandidaten oder Generator-Funktionen behandelt. Diesem wird die Liste der "
"aktuellen Kandidaten übergeben, und er gibt eine neue Liste von Kandidaten "
"zurück (eine Liste gültiger Pfade zu Sample-Dateien)."

#: 03.7-Sample-Packs.md:193
msgid ""
"`1` - Numbers will select the candidate with that index (wrapping round like a"
" ring if necessary)."
msgstr ""
"`1` - Zahlen wählen direkt den Kandidaten aus, dessen Indexposition dieser "
"Zahl entspricht (wenn nötig wird wie bei einem Ring von vorne begonnen)."

#: 03.7-Sample-Packs.md:195
msgid ""
"For example, we can filter over all the samples in a directory containing the "
"string `\"foo\"` and play the first matching sample at half speed:"
msgstr ""
"Wir können z. B. alle Samples in einem Verzeichnis herausfiltern, deren Datein"
"amen die Zeichenkette `\"foo\"` enthalten, und davon das erste passende Sample m"
"it halber Geschwindigkeit spielen:"

#: 03.7-Sample-Packs.md:199
#, no-wrap
msgid "sample \"/path/to/samples\", \"foo\", rate: 0.5"
msgstr "sample \"/path/to/samples\", \"foo\", rate: 0.5"

#: 03.7-Sample-Packs.md:203
msgid ""
"See the help for `sample` for many detailed usage examples. Note that the orde"
"ring of the filters is honoured."
msgstr ""
"Sieh' dir die Hilfe zu `sample` an, sie enthält viele detaillierte "
"Anwendungsbeispiele. Achte darauf, welche Rolle die Sortierung der Filter "
"spielt."

#: 03.7-Sample-Packs.md:206
msgid "Composites"
msgstr "Verbünde"

#: 03.7-Sample-Packs.md:208
msgid ""
"Finally, you may use lists wherever you may place a source or filter. The list"
" will be automatically flattened and the contents will be treated as regular s"
"ources and filters. Therefore the following calls to `sample` are semantically"
" equivalent:"
msgstr ""
"Abschließend sei gesagt, dass du Listen überall verwenden kannst, wo du eine "
"Quelle oder einen Filter einsetzt. Die Liste wird automatisch eingebettet "
"und ihre Inhalte behandelt wie normale Quellen- oder Filterangaben. Daher "
"sind die folgenden Aufrufe von `sample` alle gleichbedeutend:"

#: 03.7-Sample-Packs.md:213
#, no-wrap
msgid ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"
msgstr ""
"sample \"/path/to/dir\", \"100\", \"C#\"\n"
"sample [\"/path/to/dir\", \"100\", \"C#\"]\n"
"sample \"/path/to/dir\", [\"100\", \"C#\"]\n"
"sample [\"/path/to/dir\", [\"100\", [\"C#\"]]]"

#: 03.7-Sample-Packs.md:220
msgid "Wrapping Up"
msgstr "Zum Abschluss"

#: 03.7-Sample-Packs.md:222
msgid ""
"This was an advanced section for people that need real power to manipulate and"
" use sample packs. If most of this section didn't make too much sense, don't w"
"orry. It's likely you don't need any of this functionality just yet. However, "
"you'll know when you do need it and you can come back and re-read this when yo"
"u start working with large directories of samples."
msgstr ""
"Das war ein fortgeschrittener Abschnitt für Leute, die machtvollere "
"Möglichkeiten benötigen, um mit Sample-Paketen zu hantieren und sie zu "
"nutzen. Wenn vieles davon für dich im Moment noch wenig Sinn ergeben hat, "
"keine Sorge. Es ist gut möglich, dass du vieles davon jetzt noch nicht "
"brauchst. Dennoch, du wirst merken, wann du es brauchst, und du kannst "
"zurückkommen und den Abschnitt noch einmal lesen, wenn du anfängst mit "
"umfangreicheren Sample-Sammlungen zu hantieren."

#: 04-Randomisation.md:1
msgid "4 Randomisation"
msgstr "4 Zufälligkeit"

#: 04-Randomisation.md:3
msgid "Randomisation"
msgstr "Zufälligkeit"

#: 04-Randomisation.md:5
msgid ""
"A great way to add some interest into your music is using some random numbers."
" Sonic Pi has some great functionality for adding randomness to your music, bu"
"t before we start we need to learn a shocking truth: in Sonic Pi *random is no"
"t truly random*. What on earth does this mean? Well, let's see."
msgstr ""
"Eine tolle Möglichkeit deine Musik interessant zu gestalten ist die Nutzung "
"von Zufallszahlen. Sonic Pi bietet einige tolle Funktionen, um deiner Musik "
"Zufälligkeiten hinzuzufügen. Aber bevor wir damit anfangen, musst du noch "
"eine schockierende Wahrheit erfahren: In Sonic Pi bedeutet *zufällig nicht "
"wirklich zufällig*. Was zum Teufel soll das heißen? Nun, das werden wir "
"sehen."

#: 04-Randomisation.md:11
msgid "Repeatability"
msgstr "Wiederholbarkeit"

#: 04-Randomisation.md:13
msgid ""
"A really useful random function is `rrand` which will give you a random value "
"between two numbers - a *min* and a *max*. (`rrand` is short for ranged random"
"). Let's try playing a random note:"
msgstr ""
"Eine wirklich nützliche Zufallsfunktion ist `rrand`. Sie liefert dir einen "
"zufälligen Wert zwischen zwei Zahlen - einem *Minimal-* und einem "
"*Maximalwert* - (`rrand` ist ein Kürzel für *ranged random*, also eine "
"Zufallszahl aus einem bestimmten Zahlenbereich). Versuchen wir mal eine "
"zufällig ausgewählte Note zu spielen:"

#: 04-Randomisation.md:17
#, no-wrap
msgid "play rrand(50, 95)"
msgstr "play rrand(50, 95)"

#: 04-Randomisation.md:21
msgid ""
"Ooh, it played a random note. It played note `83.7527`. A nice random note bet"
"ween 50 and 95. Woah, wait, did I just predict the exact random note you got t"
"oo? Something fishy is going on here. Try running the code again. What? It cho"
"se `83.7527` again? That can't be random!"
msgstr ""
"Oh, es hat eine zufällige Note gespielt. Es hat Note `83.7527`gespielt. Eine "
"nette zufällige Note zwischen 50 und 100. Aber halt, habe ich gerade diese "
"angeblich zufällige Note exakt bestimmt? Da ist doch etwas nicht ganz "
"sauber. Lasse den Programm-Code noch einmal laufen. Wie bitte? Es hat wieder "
"`83.7527`gewählt? Das kann kein Zufall sein!"

#: 04-Randomisation.md:26
msgid ""
"The answer is that it is not truly random, it's pseudo-random. Sonic Pi will g"
"ive you random-like numbers in a repeatable manner. This is very useful for en"
"suring that the music you create on your machine sounds identical on everybody"
" else's machine - even if you use some randomness in your composition."
msgstr ""
"Die Antwort ist, es ist nicht wirklich zufällig, es ist pseudo-zufällig. "
"Sonic Pi liefert dir zufallsähnliche Zahlen, die sich wiederholen. Das ist "
"sehr nützlich, um sicherzustellen, dass die Musik die du auf deinem Rechner "
"erzeugst, auf jedem anderen Rechner identisch klingt - auch dann, wenn du "
"Zufälligkeiten in deiner Komposition verwendest."

#: 04-Randomisation.md:32
msgid ""
"Of course, in a given piece of music, if it 'randomly' chose `83.7527` every t"
"ime, then it wouldn't be very interesting. However, it doesn't. Try the follow"
"ing:"
msgstr ""
"Klar, wenn es, in einem bestimmten Musikstück, jedes Mal 'zufällig' die `83."
"7527` wählen würde, dann wäre das nicht besonders interessant. Aber das tut "
"es auch nicht. Probiere folgendes:"

#: 04-Randomisation.md:36
#, no-wrap
msgid ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "
msgstr ""
"loop do\n"
"  play rrand(50, 95)\n"
"  sleep 0.5\n"
"end "

#: 04-Randomisation.md:43
msgid ""
"Yes! It finally sounds random. Within a given *run* subsequent calls to random"
" functions will return random values. However, the next run will produce exact"
"ly the same sequence of random values and sound exactly the same. It's as if a"
"ll Sonic Pi code went back in time to exactly the same point every time the Ru"
"n button was pressed. It's the Groundhog Day of music synthesis!"
msgstr ""
"Ja! Jetzt klingt es zufällig. Innerhalb eines gegebenen *Programmlaufes* "
"liefern weitere Aufrufe von Zufallsfunktionen auch zufällige Werte. Trotzdem "
"wird der nächste Programmlauf genau die selbe Abfolge von Zufallswerten "
"liefern und entsprechend auch genau gleich klingen. Es ist als ob Sonic Pi "
"Code immer an denselben Zeitpunkt zurückspringt, wenn der Ausführen-Schalter "
"geklickt wird. Das ist der Murmeltier-Tag der musikalischen Synthese!"

#: 04-Randomisation.md:50
msgid "Haunted Bells"
msgstr "Gesiterglocken"

#: 04-Randomisation.md:52
msgid ""
"A lovely illustration of randomisation in action is the haunted bells example "
"which loops the `:perc_bell` sample with a random rate and sleep time between "
"bell sounds:"
msgstr ""
"Ein schönes Beispiel von Zufälligkeit in Aktion ist das Geisterglocken-"
"Beispiel, in dem das `:perc_bell`-Sample mit einer zufälligen Samplerate und "
"Pausenzeit zwischen den Glockenklängen abgespielt wird:"

#: 04-Randomisation.md:56
#, no-wrap
msgid ""
"loop do\n"
"  sample :perc_bell, rate: rrand(0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"
msgstr ""
"loop do\n"
"  sample :perc_bell, rate: (rrand 0.125, 1.5)\n"
"  sleep rrand(0.2, 2)\n"
"end"

#: 04-Randomisation.md:63
msgid "Random cutoff"
msgstr "Zufällige Begrenzung"

#: 04-Randomisation.md:65
msgid ""
"Another fun example of randomisation is to modify the cutoff of a synth random"
"ly. A great synth to try this out on is the `:tb303` emulator:"
msgstr ""
"Ein anderes unterhaltsames Beispiel für Zufälligkeit ist, einen Synth-Klang "
"zufällig in der Tonhöhe zu begrenzen. Ein toller Synth um das auszuprobieren "
"ist der `:tb303`-Emulator:"

#: 04-Randomisation.md:69
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play 50, release: 0.1, cutoff: rrand(60, 120)\n"
"  sleep 0.125\n"
"end"

#: 04-Randomisation.md:78
msgid "Random seeds"
msgstr "Zufallsstartpunkte"

#: 04-Randomisation.md:80
msgid ""
"So, what if you don't like this particular sequence of random numbers Sonic Pi"
" provides? Well it's totally possible to choose a different starting point via"
" `use_random_seed`. The default seed happens to be 0, so choose a different se"
"ed for a different random experience!"
msgstr ""
"Was, wenn dir eine bestimmte Zufallsabfolge, die Sonic Pi liefert, dir nicht "
"gefällt? Nun, mit `use_random_seed` lässt sich sehr gut ein anderer "
"Startpunkt für diese Zufallsabfolge wählen. Der Standard-Startpunkt ist die "
"0, wähle also einen anderen Startpunkt, und du machst eine andere "
"Zufallserfahrung!"

#: 04-Randomisation.md:85
msgid "Consider the following:"
msgstr "Sieh dir folgenden Code an:"

#: 04-Randomisation.md:87
#, no-wrap
msgid ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:94
msgid ""
"Every time you run this code, you'll hear the same sequence of 5 notes. To get"
" a different sequence simply change the seed:"
msgstr ""
"Jedes Mal, wenn du diesen Programm-Code laufen lässt, hörst du dieselbe "
"Folge von 5 Noten. Um eine andere Folge zu bekommen, setze einen anderen "
"Startpunkt:"

#: 04-Randomisation.md:97
#, no-wrap
msgid ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_random_seed 40\n"
"5.times do\n"
"  play rrand(50, 100)\n"
"  sleep 0.5\n"
"end"

#: 04-Randomisation.md:105
msgid ""
"This will produce a different sequence of 5 notes. By changing the seed and li"
"stening to the results you can find something that you like - and when you sha"
"re it with others, they will hear exactly what you heard too."
msgstr ""
"Nun produziert Sonic Pi eine andere Folge aus 5 Tönen. Indem du den "
"Startpunkt änderst und dir die Ergebnisse anhörst, kannst du eine Folge "
"finden, die dir gefällt - und wenn du den Code an andere weitergibst, werden "
"sie genau das hören, was auch du gehört hast."

#: 04-Randomisation.md:110
msgid "Let's have a look at some other useful random functions."
msgstr "Schauen wir uns noch einige andere nützliche Zufallsfunktionen an."

#: 04-Randomisation.md:113
msgid "choose"
msgstr "Auswählen"

#: 04-Randomisation.md:115
msgid ""
"A very common thing to do is to choose an item randomly from a list of known i"
"tems. For example, I may want to play one note from the following: 60, 65 or 7"
"2. I can achieve this with `choose` which lets me choose an item from a list. "
"First, I need to put my numbers in a list which is done by wrapping them in sq"
"uare brackets and separating them with commas: `[60, 65, 72]`. Next I just nee"
"d to pass them to `choose`:"
msgstr ""
"Eine Sache, die sehr häufig gemacht wird, ist aus einer Liste bekannter "
"Elemente eines zufällig auszuwählen. Zum Beispiel möchte ich vielleicht "
"einen Ton aus der folgenden Liste spielen: 60, 65 oder 72. Das kann ich mit "
"`choose` erreichen, das mich ein Element aus einer Liste wählen lässt. "
"Zuerst musst ich meine Zahlen in eine Liste packen, indem ich sie, durch "
"Kommas getrennt, in eckige Klammern setze. Danach muss ich sie einfach nur "
"an `choose` übergeben:"

#: 04-Randomisation.md:122
#, no-wrap
msgid "choose([60, 65, 72])"
msgstr "choose([60, 65, 72])"

#: 04-Randomisation.md:126
msgid "Let's hear what that sounds like:"
msgstr "Hören wir uns das mal an:"

#: 04-Randomisation.md:128
#, no-wrap
msgid ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"
msgstr ""
"loop do\n"
"  play choose([60, 65, 72])\n"
"  sleep 1\n"
"end"

#: 04-Randomisation.md:135
msgid "rrand"
msgstr "rrand"

#: 04-Randomisation.md:137
msgid ""
"We've already seen `rrand`, but let's run over it again. It returns a random n"
"umber between two values exclusively. That means it will never return either t"
"he top or bottom number - always something in between the two. The number will"
" always be a float - meaning it's not a whole number but a fraction of a numbe"
"r. Examples of floats returned by `rrand(20, 110)`:"
msgstr ""
"Wir haben `rrand` schon kennengelernt, aber sehen wir uns das noch einmal "
"genauer an. Es liefert eine zufällige Zahl zwischen zwei Werten - "
"ausschließlich dieser Werte selbst. Das bedeutet, dass weder der minimale "
"noch der maximale Wert jemals ausgegeben werden, immer nur was zwischen den "
"beiden liegt. Diese Zahl wird immer eine Gleitkommazahl (floating point "
"number) sein - also keine ganze Zahl, sondern eine Bruchzahl (Erinnere dich: "
"Computer verwenden für Rechenoperationen stets die englische Schreibweise - "
"daher Punkt, nicht Komma!). Hier Beispiele für Gleitkommazahlen beim Aufruf "
"von `rrand(20, 110)`:"

#: 04-Randomisation.md:148
msgid "rrand_i"
msgstr "rrand_i"

#: 04-Randomisation.md:150
msgid ""
"Occasionally you'll want a whole random number, not a float. This is where `rr"
"and_i` comes to the rescue. It works similarly to `rrand` except it may return"
" the min and max values as potential random values (which means it's inclusive"
" rather than exclusive of the range). Examples of numbers returned by `rrand_i"
"(20, 110)` are:"
msgstr ""
"Gelegentlich wirst du jedoch eine ganze Zahl wollen, keine Gleitkommazahl. "
"Hier kommt `rrand_i` (*i* für englisch integer, ganze Zahl) zur Hilfe. Es "
"funktioniert ähnlich wie `rrand`, kann jedoch auch den minimalen oder "
"maximalen Wert als mögliche Zufallszahl liefern. (was bedeutet, dass es "
"einschließlich der begrenzenden Werte funktioniert und nicht ausschließlich)"
". Beispiele wären die Werte, die von `rand_i(20,110)` ausgeben werden:"

#: 04-Randomisation.md:160
msgid "rand"
msgstr "rand"

#: 04-Randomisation.md:162
msgid ""
"This will return a random float between 0 (inclusive) and the max value you sp"
"ecify (exclusive). By default it will return a value between 0 and one. It's t"
"herefore useful for choosing random `amp:` values:"
msgstr ""
"Dies wird eine zufällige Gleitkommazahl zwischen 0 (inklusiv) und einem von "
"dir spezifizierten Maximalwert (exklusiv) zurückgeben. Standardmäßig wird "
"ein Wert zwischen 0 und 1 ausgegeben. Daher ist es nützlich für eine Auswahl "
"zufälliger Werte für `amp:`:"

#: 04-Randomisation.md:167
#, no-wrap
msgid ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"
msgstr ""
"loop do\n"
"  play 60, amp: rand\n"
"  sleep 0.25\n"
"end"

#: 04-Randomisation.md:174
msgid "rand_i"
msgstr "rand_i"

#: 04-Randomisation.md:176
msgid ""
"Similar to the relationship between `rrand_i` and `rrand`, `rand_i` will retur"
"n a random whole number between 0 and the max value you specify."
msgstr ""
"Ähnlich wie im Verhältnis von `rrand_i` zu `rrand`, wird `rand_i` eine "
"zufällige ganze Zahl zwischen 0 und dem angegebenen Maximalwert zurückgeben."

#: 04-Randomisation.md:179
msgid "dice"
msgstr "dice"

#: 04-Randomisation.md:181
msgid ""
"Sometimes you want to emulate a dice throw - this is a special case of `rrand_"
"i` where the lower value is always 1. A call to `dice` requires you to specify"
" the number of sides on the dice. A standard dice has 6 sides, so `dice(6)` wi"
"ll act very similarly - returning values of either 1, 2, 3, 4, 5, or 6. Howeve"
"r, just like fantasy role-play games, you might find value in a 4 sided dice, "
"or a 12 sided dice, or a 20 sided dice - perhaps even a 120 sided dice!"
msgstr ""
"Manchmal wirst du so tun wollen, als würdest du würfeln (dice) - dies ist "
"ein Sonderfall von `rrand_i`, bei dem der kleinste Wert immer die 1 ist. Ein "
"Aufruf von `dice` verlangt von dir die Anzahl von Seiten zu bestimmen, die "
"der Würfel haben soll. Ein normaler Würfel hat 6 Seiten, `dice(6)` wird dem "
"entsprechend einen der Werte 1, 2, 3, 4, 5 oder 6 zurückgeben. Wie auch "
"immer, in einem Rollenspiel würdest auch Nutzen in einem 4-seitigen Würfel "
"sehen, oder einem 12-seitigen, oder einem 20-seitigen, vielleicht sogar in "
"einem 120-seitigem!"

#: 04-Randomisation.md:189
msgid "one_in"
msgstr "one_in"

#: 04-Randomisation.md:191
msgid ""
"Finally you may wish to emulate throwing the top score of a dice such as a 6 i"
"n a standard dice. `one_in` therefore returns true with a probability of one i"
"n the number of sides on the dice. Therefore `one_in(6)` will return true with"
" a probability of 1 in 6 or false otherwise. True and false values are very us"
"eful for `if` statements which we will cover in a subsequent section of this t"
"utorial."
msgstr ""
"Schließlich könnte es noch so sein, dass du so tun willst, als ob du beim "
"Würfeln mit einem Standardwürfel eine 6 hast - also den höchsten Wert. "
"`one_in` gibt dafür mit einer Wahrscheinlichkeit von 1 im Verhältnis zur "
"Anzahl Würfelseiten den Wert wahr (true) zurück. Daher wird `one_in(6)` mit "
"einer Wahrscheinlichkeit von 1 zu 6 wahr, ansonsten falsch (false). Wahr- "
"und Falsch-Werte sind sehr nützlich bei `if`-Anweisungen, welche wir in "
"einem späteren Abschnitt dieses Tutorials behandeln werden."

#: 04-Randomisation.md:198
msgid "Now, go and jumble up your code with some randomness!"
msgstr "Jetzt los, bringe deinen Code mit ein wenig Zufälligkeit durcheinander!"

#: 05-Programming-Structures.md:1
msgid "5 Programming Structures"
msgstr "5 Programmstrukturen"

#: 05-Programming-Structures.md:3
msgid "Programming Structures"
msgstr "Programmstrukturen"

#: 05-Programming-Structures.md:5
msgid ""
"Now that you've learned the basics of creating sounds with `play` and `sample`"
" and creating simple melodies and rhythms by `sleep`ing between sounds, you mi"
"ght be wondering what else the world of code can offer you..."
msgstr ""
"Jetzt, da du die Grundlagen für die Erzeugung von Klängen mit `play` und "
"`sample` und die Erzeugung von Melodien und Rhythmen durch den Einsatz von "
"`sleep` zwischen den Klängen gelernt hast, fragst du dich vielleicht, was "
"dir die Welt des Codes darüber hinaus zu bieten hat..."

#: 05-Programming-Structures.md:10
msgid ""
"Well, you're in for an exciting treat! It turns out that basic programming str"
"uctures such as looping, conditionals, functions and threads give you amazingl"
"y powerful tools to express your musical ideas."
msgstr ""
"Nun, ich denke, da kommen noch einige aufregende Sachen auf dich zu! Es ist "
"nämlich so, dass grundlegende Programmstrukturen wie Schleifen (loops), "
"Bedingungen (conditionals), Funktionen (functions) und Stränge (threads) "
"unglaublich machtvolle Werkzeuge sind, um deine musikalischen Ideen "
"auszudrücken."

#: 05-Programming-Structures.md:14
msgid "Let's get stuck in with the basics..."
msgstr "Sehen wir uns die Grundlagen eingehender an..."

#: 05.1-Blocks.md:1
msgid "5.1 Blocks"
msgstr "5.1 Blöcke"

#: 05.1-Blocks.md:3
msgid "Blocks"
msgstr "Blöcke"

#: 05.1-Blocks.md:5
msgid ""
"A structure you'll see a lot in Sonic Pi is the block. Blocks allow us to do u"
"seful things with large chunks of code. For example, with synth and sample par"
"ameters we were able to change something that happened on a single line. Howev"
"er, sometimes we want to do something meaningful to a number of lines of code."
" For example, we may wish to loop it, to add reverb to it, to only run it 1 ti"
"me out of 5, etc. Consider the following code:"
msgstr ""
"Eine Struktur, der du in Sonic Pi häufig begegnen wirst, ist der Block. "
"Blöcke erlauben uns, mit größeren Abschnitten von Programm-Code nützliche "
"Dinge zu tun. Z. B. konnten wir bisher mit Synth- und Sample-Parametern "
"etwas verändern, das in einer einzelnen Zeile des Codes geschah. Manchmal "
"aber möchten wir etwas Sinnvolles mit einer ganzen Abfolge von Code-Zeilen "
"anstellen. Zum Beispiel möchten wir diese in einer Schleife ablaufen lassen, "
"Hall hinzufügen, sie nur 1 von 5 Malen ablaufen lassen etc. Sieh dir "
"folgenden Code an:"

#: 05.1-Blocks.md:13
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_plip\n"
"sleep 0.5\n"
"play 62"

#: 05.1-Blocks.md:21
msgid ""
"To do something with a chunk of code, we need to tell Sonic Pi where the code "
"block *starts* and where it *ends*. We use `do` for start and `end` for end. F"
"or example:"
msgstr ""
"Um etwas auf einen mehrzeiligen Code-Abschnitt anzuwenden, müssen wir Sonic "
"Pi sagen, wo der Code-Block *anfängt*, und wo er *aufhört*. Wir verwenden "
"`do` für den Anfang und `end` für das Ende. So zum Beispiel:"

#: 05.1-Blocks.md:25
#, no-wrap
msgid ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 05.1-Blocks.md:35
msgid ""
"However, this isn't yet complete and won't work (try it and you'll get an erro"
"r) as we haven't told Sonic Pi what we want to do with this *do/end block*. We"
" tell Sonic Pi this by writing some special code before the `do`. We'll see a "
"number of these special pieces of code later on in this tutorial. For now, it'"
"s important to know that wrapping your code within `do` and `end` tells Sonic "
"Pi you wish to do something special with that chunk of code."
msgstr ""
"Das ist aber noch nicht vollständig und wird nicht funktionieren (versuche "
"es, und du wirst eine Fehlermeldung erhalten), weil wir Sonic Pi noch nicht "
"gesagt haben, was wir mit diesem *do/end-Block* anstellen wollen. Wir teilen "
"es Sonic Pi mit, indem wir noch einen speziellen Ausdruck vor das `do` "
"setzen. Wir werden später in diesem Tutorial noch eine Reihe solcher "
"Ausdrücke kennenlernen. Für den Moment ist wichtig zu wissen, dass, wenn du "
"deinen Code zwischen `do` und `end` zusammenfasst, dies Sonic Pi sagt, dass "
"du mit diesem Codeabschnitt etwas Bestimmtes machen willst."

#: 05.2-Iteration-and-Loops.md:1
msgid "5.2 Iteration and Loops"
msgstr "5.2 Wiederholung und Schleifen"

#: 05.2-Iteration-and-Loops.md:3
msgid "Iteration and Loops"
msgstr "Iteration und Schleifen"

#: 05.2-Iteration-and-Loops.md:5
msgid ""
"So far we've spent a lot of time looking at the different sounds you can make "
"with `play` and `sample` blocks. We've also learned how to trigger these sound"
"s through time using `sleep`."
msgstr ""
"Bislang haben wir viel Zeit damit verbracht, uns die unterschiedliche Klänge "
"anzusehen, die du mit `play`- und `sample`-Blöcken erzeugen kannst. Wir "
"haben auch gelernt, wie wir das Triggern dieser Klänge mit `sleep` steuern "
"können."

#: 05.2-Iteration-and-Loops.md:9
msgid ""
"As you've probably found out, there's a *lot* of fun you can have with these b"
"asic building blocks. However, a whole new dimension of fun opens up when you "
"start using the power of code to structure your music and compositions. In the"
" next few sections we'll explore some of these powerful new tools. First up is"
" iteration and loops."
msgstr ""
"Du hast ja wahrscheinlich herausgefunden, dass du mit diesen Grundbausteinen "
"schon *viel* Spaß haben kannst. Eine ganz neue Dimension eröffnet sich "
"jedoch, wenn du anfängst die Macht des Programm-Codes zu nutzen, um deine "
"Musiken und Kompositionen zu strukturieren. In den nächsten Abschnitten "
"sehen wir uns einige wirkungsvolle neue Werkzeuge dafür an. Als erstes "
"kommen Iterationen (wiederholte Abläufe) und Schleifen (Loops) dran."

#: 05.2-Iteration-and-Loops.md:15
msgid "Repetition"
msgstr "Wiederholung"

#: 05.2-Iteration-and-Loops.md:17
msgid ""
"Have you written some code you'd like to repeat a few times? For example, you "
"might have something like this:"
msgstr ""
"Möchtest du Code, den du geschrieben hast, einige Male wiederholen? "
"Vielleicht hast du z. B. so etwas:"

#: 05.2-Iteration-and-Loops.md:20
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:29
msgid ""
"What if we wished to repeat this 3 times? Well, we could do something simple a"
"nd just copy and paste it three times:"
msgstr ""
"Was, wenn du das drei Male wiederholen wolltest? Nun, wir könnten etwas ganz "
"Einfaches tun, es kopieren und dreimal hintereinander einfügen:"

#: 05.2-Iteration-and-Loops.md:32
#, no-wrap
msgid ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"
msgstr ""
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25\n"
"play 50\n"
"sleep 0.5\n"
"sample :elec_blup\n"
"sleep 0.5\n"
"play 62\n"
"sleep 0.25"

#: 05.2-Iteration-and-Loops.md:55
msgid ""
"Now that's a lot of code! What happens if you want to change the sample to `:e"
"lec_plip`? You're going to have to find all the places with the original `:ele"
"c_blup` and switch them over. More importantly, what if you wanted to repeat t"
"he original piece of code 50 times or 1000? Now that would be a lot of code, a"
"nd a lot of lines of code to alter if you wanted to make a change."
msgstr ""
"Nun, das ist eine Menge Code! Was wäre, wenn du das Sample in `:elec_plip` "
"ändern wolltest? Du müsstest alle Stellen mit `:elec_blub` finden und sie "
"ändern. Und darüber hinaus: Was, wenn du den ursprünglichen Code-Block 50 "
"oder 1000 Mal wiederholen wolltest? Das wäre wirklich eine Menge Code, und "
"eine Menge Zeilen, die du bearbeiten müsstest, wenn du etwas ändern wolltest."

#: 05.2-Iteration-and-Loops.md:62
msgid "Iteration"
msgstr "Iteration"

#: 05.2-Iteration-and-Loops.md:64
msgid ""
"In fact, repeating the code should be as easy as saying *do this three times*."
" Well, it pretty much is. Remember our old friend the code block? We can use i"
"t to mark the start and end of the code we'd like to repeat three times. We th"
"en use the special code `3.times`. So, instead of writing *do this three times"
"*, we write `3.times do` - that's not too hard. Just remember to write `end` a"
"t the end of the code you'd like to repeat:"
msgstr ""
"Tatsächlich, Programm-Code wiederholt ablaufen zu lassen sollte so einfach "
"sein wie zu sagen, *mache das drei Mal*. Nun, so ist es auch in etwa. "
"Erinnere dich an unseren Freund, den Code-Block? Wir können damit den Anfang "
"und das Ende des Codes markieren, den wir drei Mal wiederholen wollen. Dafür "
"benutzen wir den speziellen Ausdruck `3.times`. Anstelle von *mache das drei "
"Mal* schreiben wir `3.times do` - das ist nicht besonders schwer. Denke "
"daran an das Ende des Codes, den du wiederholen möchtest, `end` zu schreiben:"

#: 05.2-Iteration-and-Loops.md:72
#, no-wrap
msgid ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"
msgstr ""
"3.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_blup\n"
"  sleep 0.5\n"
"  play 62\n"
"  sleep 0.25\n"
"end"

#: 05.2-Iteration-and-Loops.md:83
msgid ""
"Now isn't that much neater than cutting and pasting! We can use this to create"
" lots of nice repeating structures:"
msgstr ""
"Na, ist das nicht viel eleganter als zu kopieren und einzufügen? Wir können "
"dies verwenden um viele schöne sich wiederholende Strukturen zu erzeugen:"

#: 05.2-Iteration-and-Loops.md:86
#, no-wrap
msgid ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"
msgstr ""
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end\n"
"8.times do\n"
"  play 55, release: 0.2\n"
"  sleep 0.25\n"
"end\n"
"4.times do\n"
"  play 50\n"
"  sleep 0.5\n"
"end"

#: 05.2-Iteration-and-Loops.md:103
msgid "Nesting Iterations"
msgstr "Iterationen verschachteln"

#: 05.2-Iteration-and-Loops.md:105
msgid ""
"We can put iterations inside other iterations to create interesting patterns. "
"For example:"
msgstr ""
"Wir können Iterationen in anderen Iterationen verpacken, um interessante "
"Muster zu erzeugen. Zum Beispiel:"

#: 05.2-Iteration-and-Loops.md:108
#, no-wrap
msgid ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"4.times do\n"
"  sample :drum_heavy_kick\n"
"  2.times do\n"
"    sample :elec_blip2, rate: 2\n"
"    sleep 0.25\n"
"  end\n"
"  sample :elec_snare\n"
"  4.times do\n"
"    sample :drum_tom_mid_soft\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 05.2-Iteration-and-Loops.md:123
msgid "Looping"
msgstr "Schleifen abspielen"

#: 05.2-Iteration-and-Loops.md:125
msgid ""
"If you want something to repeat a lot of times, you might find yourself using "
"really large numbers such as `1000.times do`. In this case, you're probably be"
"tter off asking Sonic Pi to repeat forever (at least until you press the stop "
"button!). Let's loop the amen break forever:"
msgstr ""
"Wenn du etwas sehr oft wiederholen möchtest, könnte es sein, dass du mit "
"sehr hohen Zahlen arbeiten musst, wie zum Beispiel `1000.times do`. In einem "
"solchen Fall ergibt es möglicherweise mehr Sinn Sonic Pi zu bitten, den Code "
"endlos zu wiederholen (zumindest, bis du auf die Stopp-Schaltfläche klickst!)"
". Lass uns den Amen-Break unendlich oft wiederholen:"

#: 05.2-Iteration-and-Loops.md:130
#, no-wrap
msgid ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"
msgstr ""
"loop do\n"
"  sample :loop_amen\n"
"  sleep sample_duration :loop_amen\n"
"end"

#: 05.2-Iteration-and-Loops.md:137
msgid ""
"The important thing to know about loops is that they act like black holes for "
"code. Once the code enters a loop it can never leave until you press stop - it"
" will just go round and round the loop forever. This means if you have code af"
"ter the loop you will *never* hear it. For example, the cymbal after this loop"
" will never play:"
msgstr ""
"Eine wichtige Sache bei Schleifen (Loops) ist, dass es sich mit ihnen für "
"den Code wie mit schwarzen Löchern verhält. Wenn der Code einmal in einer "
"Schleife abläuft, kann er diese nicht verlassen, bis du auf Stopp klickst - "
"ansonsten wird er für immer in dieser Schleife weiterlaufen. Das bedeutet, "
"wenn hinter deiner Schleife noch weiterer Code steht, wirst du diesen *nie* "
"hören. Zum Beispiel wird das Becken hinter dieser Schleife niemals spielen:"

#: 05.2-Iteration-and-Loops.md:143
#, no-wrap
msgid ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"
msgstr ""
"loop do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"sample :drum_cymbal_open"

#: 05.2-Iteration-and-Loops.md:152
msgid "Now, get structuring your code with iteration and loops!"
msgstr ""
"Jetzt fang an und strukturiere deinen Code mit Iterationen und Schleifen!"

#: 05.3-Conditionals.md:1
msgid "5.3 Conditionals"
msgstr "5.3 Bedingungen"

#: 05.3-Conditionals.md:3
msgid "Conditionals"
msgstr "Bedingungen"

#: 05.3-Conditionals.md:5
msgid ""
"A common thing you'll likely find yourself wanting to do is to not only play a"
" random note (see the previous section on randomness) but also make a random d"
"ecision and based on the outcome run some code or some other code. For example"
", you might want to randomly play a drum or a cymbal. We can achieve this with"
" an `if` statement."
msgstr ""
"Was du dir wahrscheinlich wünschen wirst, ist nicht einfach nur eine "
"zufällige Note zu spielen (siehe auch den letzten Abschnitt über "
"Zufälligkeit), sondern auch eine zufällige Entscheidung treffen zu können, "
"und je nachdem wie diese ausfällt, den einen oder den anderen Code ablaufen "
"zu lassen. Zum Beispiel könnte es sein, dass du einer Zufälligkeit folgend "
"entweder eine Trommel oder ein Becken abspielen möchtest. Das können wir mit "
"einem `if`-Ausdruck erreichen."

#: 05.3-Conditionals.md:11
msgid "Flipping a Coin"
msgstr "Eine Münze werfen"

#: 05.3-Conditionals.md:13
msgid ""
"So, let's flip a coin: if it's heads, play a drum, if it's tails, play a cymba"
"l. Easy. We can emulate a coin flip with our `one_in` function (introduced in "
"the section on randomness) specifying a probability of 1 in 2: `one_in(2)`. We"
" can then use the result of this to decide between two pieces of code, the cod"
"e to play the drum and the code to play the cymbal:"
msgstr ""
"Werfen wir also ein Münze: Bei Kopf, spiele eine Trommel, bei Zahl, ein "
"Becken. Das ist leicht. Wir können den Münzwurf mit unserer `one_in`-"
"Funktion nachbilden (eingeführt im Kapitel über Zufälligkeit), indem wir "
"eine Wahrscheinlichkeit von 1 aus 2 angeben: `one_in(2)`. Das Ergebnis "
"dieser Berechnung können wir nutzen, um zwischen zwei Code-Abschnitten "
"auszuwählen, entweder den Code, um die Trommel zu spielen oder den Code, um "
"das Becken zu spielen:"

#: 05.3-Conditionals.md:20
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"  end\n"
"  \n"
"  sleep 0.5\n"
"  \n"
"end"

#: 05.3-Conditionals.md:34
msgid "Notice that `if` statements have three parts:"
msgstr "Merke dir, dass `if`-Anweisungen drei Teile haben:"

#: 05.3-Conditionals.md:36
msgid "The question to ask"
msgstr "Die Frage, die gestellt wird"

#: 05.3-Conditionals.md:37
msgid "The first choice of code to run (if the answer to the question is yes)"
msgstr ""
"Die Auswahl von Programm-Code, der laufen soll (wenn die Antwort auf die "
"Frage ein Ja ist)"

#: 05.3-Conditionals.md:38
msgid "The second choice of code to run (if the answer to the question is no)"
msgstr ""
"Die zweite Auswahl von Programm-Code, der laufen soll (wenn die Antwort auf "
"die Frage ein Nein ist)"

#: 05.3-Conditionals.md:40
msgid ""
"Typically in programming languages, the notion of yes is represented by the te"
"rm `true` and the notion of no is represented by the term `false`. So we need "
"to find a question that will give us a `true` or `false` answer which is exact"
"ly what `one_in` does."
msgstr ""
"In Programmiersprachen steht typischerweise für das Ja der Ausdruck `true` "
"und für das Nein der Ausdruck `false`. Also müssen wir eine Frage finden, "
"auf die wir eine Antwort erhalten, die entweder `true` (wahr) oder `false` "
"(falsch) ist. Das ist genau das, was `one_in` tut."

#: 05.3-Conditionals.md:45
msgid ""
"Notice how the first choice is wrapped between the `if` and the `else` and the"
" second choice is wrapped between the `else` and the `end`. Just like do/end b"
"locks you can put multiple lines of code in either place. For example:"
msgstr ""
"Beachte, wie hier die erste Wahl zwischen dem `if` und dem `else` und die "
"zweite Wahl zwischen dem `else` und dem `end` eingeschlossen wird. So wie "
"bei den do/end-Blöcken kannst du beliebig viele Codezeilen an beiden Stellen "
"einfügen. Zum Beispiel:"

#: 05.3-Conditionals.md:50
#, no-wrap
msgid ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"
msgstr ""
"loop do\n"
"  if one_in(2)\n"
"    sample :drum_heavy_kick\n"
"    sleep 0.5\n"
"  else\n"
"    sample :drum_cymbal_closed\n"
"    sleep 0.25\n"
"  end\n"
"  \n"
"end"

#: 05.3-Conditionals.md:64
msgid ""
"This time we're sleeping for a different amount of time depending on which cho"
"ice we make."
msgstr ""
"Dieses Mal lassen wir den Code unterschiedlich lange schlafen, je nachdem "
"welche Auswahl getroffen wird."

#: 05.3-Conditionals.md:68
msgid "Simple if"
msgstr "Einfaches if"

#: 05.3-Conditionals.md:70
msgid ""
"Sometimes you want to optionally execute just one line of code. This is possib"
"le by placing `if` and then the question at the end. For example:"
msgstr ""
"Manchmal möchtest du wahlweise nur eine Code-Zeile ausführen. Das ist "
"möglich, indem du ein `if` setzt und dahinter die Frage an das Ende, zum "
"Beispiel:"

#: 05.3-Conditionals.md:73
#, no-wrap
msgid ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"
msgstr ""
"use_synth :dsaw\n"
"loop do\n"
"  play 50, amp: 0.3, release: 2\n"
"  play 53, amp: 0.3, release: 2 if one_in(2)\n"
"  play 57, amp: 0.3, release: 2 if one_in(3)\n"
"  play 60, amp: 0.3, release: 2 if one_in(4)\n"
"  sleep 1.5\n"
"end"

#: 05.3-Conditionals.md:85
msgid ""
"This will play chords of different numbers with the chance of each note playin"
"g having a different probability."
msgstr ""
"Dieses Beispiel spielt Akkorde, bestehend aus verschiedenen Noten, wobei die "
"Chance gespielt zu werden für die einzelnen Noten jeweils eine andere "
"Wahrscheinlichkeit hat."

#: 05.4-Threads.md:1
msgid "5.4 Threads"
msgstr "5.4 Threads"

#: 05.4-Threads.md:3
msgid "Threads"
msgstr "Threads"

#: 05.4-Threads.md:5
msgid ""
"So you've made your killer bassline and a phat beat. How do you play them at t"
"he same time? One solution is to weave them together manually - play some bass"
", then a bit of drums, then more bass... However, the timing soon gets hard to"
" think about, especially when you start weaving in more elements."
msgstr ""
"Nun hast du also eine Killer-Basslinie und einen krassen Beat gebaut. Wie "
"kannst du beide zur selben Zeit spielen lassen? Eine Möglichkeit ist, beide "
"Sounds per Hand miteinander zu verweben - spiele erst den Bass ein bisschen, "
"dann das Schlagzeug, dann den Bass etwas mehr... Beides zeitlich aufeinander "
"abzustimmen wird jedoch gedanklich bald immer schwieriger, vor allem, wenn "
"noch mehr Klänge dazukommen sollen."

#: 05.4-Threads.md:11
msgid ""
"What if Sonic Pi could weave things for you automatically? Well, it can, and y"
"ou do it with a special thing called a *thread*."
msgstr ""
"Was, wenn Sonic Pi Klänge automatisch für dich miteinander verweben könnte? "
"Nun, das kann es, und zwar erreichst du das mit einem besonderen Ding, "
"welches *Thread* (*Strang*) genannt wird."

#: 05.4-Threads.md:14
msgid "Infinite Loops"
msgstr "Unendliche Schleifen"

#: 05.4-Threads.md:16
msgid ""
"To keep this example simple, you'll have to imagine that this is a phat beat a"
"nd a killer bassline:"
msgstr ""
"Damit dieses Beispiel nicht zu kompliziert wird, musst du dir einfach "
"vorstellen, dass dies deine Killer-Basslinie und dein krasser Beat sind:"

#: 05.4-Threads.md:19
#, no-wrap
msgid ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"loop do\n"
"  sample :drum_heavy_kick\n"
"  sleep 1\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:32
msgid ""
"As we've discussed previously, loops are like *black holes* for the program. O"
"nce you enter a loop you can never exit from it until you hit stop. How do we "
"play both loops at the same time? We have to tell Sonic Pi that we want to sta"
"rt something at the same time as the rest of the code. This is where threads c"
"ome to the rescue."
msgstr ""
"Wir haben das früher schon besprochen, Schleifen sind wie *schwarze Löcher* "
"für ein Programm. Läuft es einmal in die Schleife kommt es da nicht mehr "
"raus, bis du auf Stopp klickst. Wie also können wir beide Schleifen zur "
"selben Zeit abspielen? Wir müssen Sonic Pi sagen, dass wir einen bestimmten "
"Abschnitt gleichzeitig mit dem Rest des Codes starten möchten. Hierbei "
"helfen uns Reihenfolgen (threads)."

#: 05.4-Threads.md:38
msgid "Threads to the Rescue"
msgstr "Threads als Rettung"

#: 05.4-Threads.md:40
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end"

#: 05.4-Threads.md:55
msgid ""
"By wrapping the first loop in an `in_thread` do/end block we tell Sonic Pi to "
"run the contents of the do/end block at *exactly* the same time as the next st"
"atement after the do/end block (which happens to be the second loop). Try it a"
"nd you'll hear both the drums and the bassline weaved together!"
msgstr ""
"Indem wir die erste Schleife in einen `in_thread`-do/end-Block hinein "
"packen, sagen wir Sonic Pi, es soll den Inhalt dieses do/end-Blocks *genau* "
"zur selben Zeit wie nächste Anweisung nach dem do/end-Block ausführen (und "
"das ist in diesem Fall die zweite Schleife). Probiere es aus, und du wirst "
"den Beat und die Basslinie miteinander verwoben hören!"

#: 05.4-Threads.md:61
msgid "Now, what if we wanted to add a synth on top. Something like:"
msgstr ""
"Mal angenommen, wir wollten darüber noch einen Synth hinzufügen. Ungefähr so:"

#: 05.4-Threads.md:63
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :fm\n"
"  play 40, release: 0.2\n"
"  sleep 0.5\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:84
msgid ""
"Now we have the same problem as before. The first loop is played at the same t"
"ime as the second loop due to the `in_thread`. However, *the third loop is nev"
"er reached*. We therefore need another thread:"
msgstr ""
"Jetzt haben wir das gleiche Problem wie vorhin. Die erste Schleife wird "
"durch das `in_thread` zur selben Zeit wie die zweite gespielt. Aber *die "
"dritte Schleife wird nie erreicht*. Also brauchen wir einen weiteren Thread:"

#: 05.4-Threads.md:88
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :drum_heavy_kick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    use_synth :fm\n"
"    play 40, release: 0.2\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"loop do\n"
"  use_synth :zawa\n"
"  play 52, release: 2.5, phase: 2, amp: 0.5\n"
"  sleep 2\n"
"end"

#: 05.4-Threads.md:111
msgid "Runs as threads"
msgstr "Ausführen als Thread"

#: 05.4-Threads.md:113
msgid ""
"What may surprise you is that when you press the Run button, you're actually c"
"reating a new thread for the code to run. This is why pressing it multiple tim"
"es will layer sounds over each other. As the runs themselves are threads, they"
" will automatically weave the sounds together for you."
msgstr ""
"Was dich vielleicht erstaunt: Wenn du auf Ausführen klickst, erzeugst du "
"eigentlich einen neuen Thread, innerhalb dessen der Programm-Code abläuft. "
"Deshalb entstehen immer neue Klangschichten, wenn du wiederholt auf "
"Ausführen klickst. Weil diese Abläufe jeweils für sich Threads sind, werden "
"sie automatisch die Klänge für dich miteinander verweben."

#: 05.4-Threads.md:119
msgid "Scope"
msgstr "Bereich"

#: 05.4-Threads.md:121
msgid ""
"As you learn how to master Sonic Pi, you'll learn that threads are the most im"
"portant building blocks for your music. One of the important jobs they have is"
" to isolate the notion of *current settings* from other threads. What does thi"
"s mean? Well, when you switch synths using `use_synth` you're actually just sw"
"itching the synth in the *current thread* - no other thread will have their sy"
"nth switched. Let's see this in action:"
msgstr ""
"Während du Sonic Pi besser zu meistern lernst, wirst du auch herausfinden, "
"dass Threads die wichtigsten Bausteine für deine Musik sind. Eine der "
"wichtigen Aufgaben die sie ausführen, ist die *aktuellen Einstellungen*, die "
"für einen Thread gelten, von anderen Threads zu isolieren. Was genau "
"bedeutet das? Nun, wenn du etwa einen Synth mit `use_synth` durch einen "
"anderen ersetzt, dann veränderst du den Synth lediglich für den *aktuellen "
"Thread* - bei keinem anderen der laufenden Threads wird der Synth ersetzt. "
"Sehen wir uns das mal in Aktion an:"

#: 05.4-Threads.md:129
#, no-wrap
msgid ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"
msgstr ""
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  use_synth :tb303\n"
"  play 50\n"
"end\n"
"sleep 1\n"
"play 50"

#: 05.4-Threads.md:142
msgid ""
"Notice how the middle sound was different to the others? The `use_synth` state"
"ment only affected the thread it was in and not the outer main run thread."
msgstr ""
"Bemerke, wie sich der mittlere Klang von den anderen beiden unterschieden "
"hat? Die `use_synth`-Anweisung hat sich nur auf den Thread ausgewirkt, in "
"dem sie auch stand, aber nicht auf den äußeren ausführenden Thread."

#: 05.4-Threads.md:146
msgid "Inheritance"
msgstr "Vererbung"

#: 05.4-Threads.md:148
msgid ""
"When you create a new thread with `in_thread`, the new thread will automatical"
"ly inherit all of the current settings from the current thread. Let's see that"
":"
msgstr ""
"Wenn du einen neuen Thread mit `in_thread` erzeugst, wird der neue Thread "
"alle Einstellungen automatisch vom vorherigen Thread erben. Sehen wir uns "
"das an:"

#: 05.4-Threads.md:152
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"
msgstr ""
"use_synth :tb303\n"
"play 50\n"
"sleep 1\n"
"in_thread do\n"
"  play 55\n"
"end"

#: 05.4-Threads.md:162
msgid ""
"Notice how the second note is played with the `:tb303` synth even though it wa"
"s played from a separate thread? Any of the settings modified with the various"
" `use_*` functions will behave in the same way."
msgstr ""
"Achte darauf, dass der zweite Ton mit dem `:tb303`-Synth gespielt wird, "
"obwohl er in einem anderen Thread läuft? Jede der Einstellungen, vorgenommen "
"mit den unterschiedlichen `use_*`-Ausdrücken, wird sich genauso verhalten."

#: 05.4-Threads.md:166
msgid ""
"When threads are created, they inherit all the settings from their parent but "
"they don't share any changes back."
msgstr ""
"Wenn neue Threads erzeugt werden, erben sie alle Einstellungen von ihren "
"Eltern. Aber Änderungen der Einstellungen innerhalb dieser neuen Threads "
"haben umgekehrt keinen Einfluss auf die Eltern."

#: 05.4-Threads.md:169
msgid "Naming Threads"
msgstr "Threads benennen"

#: 05.4-Threads.md:171
msgid "Finally, we can give our threads names:"
msgstr "Und schließlich können wir unseren Threads auch Namen geben:"

#: 05.4-Threads.md:173
#, no-wrap
msgid ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :bass) do\n"
"  loop do\n"
"    use_synth :prophet\n"
"    play chord(:e2, :m7).choose, release: 0.6\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread(name: :drums) do\n"
"  loop do\n"
"    sample :elec_snare\n"
"    sleep 1\n"
"  end\n"
"end"

#: 05.4-Threads.md:190
msgid ""
"Look at the log pane when you run this code. See how the log reports the name "
"of the thread with the message?"
msgstr ""
"Achte auf das Protokoll-Fenster, wenn du diesen Code laufen lässt. Siehst "
"du, wie das Protokoll mit den Nachrichten auch die Namen der Threads ausgibt?"

#: 05.4-Threads.md:193
#, no-wrap
msgid ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"
msgstr ""
"[Run 36, Time 4.0, Thread :bass]\n"
" |- synth :prophet, {release: 0.6, note: 47}"

#: 05.4-Threads.md:198
msgid "Only One Thread per Name Allowed"
msgstr "Nur ein Thread pro Name erlaubt"

#: 05.4-Threads.md:200
msgid ""
"One last thing to know about named threads is that only one thread of a given "
"name may be running at the same time. Let's explore this. Consider the followi"
"ng code:"
msgstr ""
"Eine letzte Anmerkung zu Threads mit Namen: Es kann nur ein Thread gleichen "
"Namens zur selben Zeit laufen. Probieren wir das aus. Sieh dir folgenden "
"Code an:"

#: 05.4-Threads.md:204
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:213
msgid ""
"Go ahead and paste that into a buffer and press the Run button. Press it again"
" a couple of times. Listen to the cacophony of multiple amen breaks looping ou"
"t of time with each other. Ok, you can press Stop now."
msgstr ""
"Kopiere das einmal in einen Puffer und klicke auf `Ausführen`. Klicke noch "
"ein paar mal darauf. Hör dir diese Kakophonie mehrerer Amen-Breaks an, die "
"rhythmisch nicht unbedingt passend zueinander ablaufen. Ok, du kannst jetzt "
"Stopp klicken."

#: 05.4-Threads.md:217
msgid ""
"This is the behaviour we've seen again and again - if you press the Run button"
", sound layers on top of any existing sound. Therefore if you have a loop and "
"press the Run button three times, you'll have three layers of loops playing si"
"multaneously."
msgstr ""
"Dieses Verhalten haben wir bereits öfter gesehen - wenn du die `Ausführen`-"
"Schaltfläche klickst, legen sich Klänge über alle bereits laufenden Klänge. "
"Wenn du eine Schleife hast und dreimal auf `Ausführen` klickst, bekommst du "
"drei Ebenen mit Schleifen, die gleichzeitig spielen."

#: 05.4-Threads.md:222
msgid "However, with named threads it is different:"
msgstr "Bei benannten Threads jedoch ist das anders:"

#: 05.4-Threads.md:224
#, no-wrap
msgid ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"
msgstr ""
"in_thread(name: :amen) do\n"
"  loop do\n"
"    sample :loop_amen\n"
"    sleep sample_duration :loop_amen\n"
"  end\n"
"end"

#: 05.4-Threads.md:233
msgid ""
"Try pressing the Run button multiple times with this code. You'll only ever he"
"ar one amen break loop. You'll also see this in the log:"
msgstr ""
"Versuche bei diesem Code den `Ausführen`-Schalter mehrmals zu klicken. Du "
"wirst immer nur eine Amen-Break-Schleife hören. Das kannst Du auch im "
"Protokoll sehen:"

#: 05.4-Threads.md:236
#, no-wrap
msgid "==> Skipping thread creation: thread with name :amen already exists."
msgstr "==> Skipping thread creation: thread with name :amen already exists."

#: 05.4-Threads.md:240
msgid ""
"Sonic Pi is telling you that a thread with the name `:amen` is already playing"
", so it's not creating another."
msgstr ""
"Sonic Pi teilt dir mit, dass ein Thread mit dem Namen `:amen` bereits läuft "
"und es deshalb keinen weiteren erzeugt."

#: 05.4-Threads.md:243
msgid ""
"This behaviour may not seem immediately useful to you now - but it will be ver"
"y handy when we start to live code..."
msgstr ""
"Vielleicht erscheint dir dieses Verhalten im Moment noch nicht nützlich - "
"aber es wird sehr nützlich sein, wenn wir ins Live-Coding einsteigen ..."

#: 05.5-Functions.md:1
msgid "5.5 Functions"
msgstr "5.5 Funktionen"

#: 05.5-Functions.md:3
msgid "Functions"
msgstr "Funktionen"

#: 05.5-Functions.md:5
msgid ""
"Once you start writing lots of code, you may wish to find a way to organise an"
"d structure things to make them tidier and easier to understand. Functions are"
" a very powerful way to do this. They give us the ability to give a name to a "
"bunch of code. Let's take a look."
msgstr ""
"Wenn du einmal damit angefangen hast größere Mengen Programm-Code zu "
"schreiben, dann wirst du nach Wegen suchen, wie du die Dinge organisieren "
"und strukturieren kannst, um sie sauberer und verständlicher zu machen. "
"Funktionen sind ein sehr wirkungsvoller Weg das zu tun. Sie geben uns die "
"Möglichkeit, einem Haufen Programm-Code einen Namen zu geben. Sehen wir uns "
"das an."

#: 05.5-Functions.md:10
msgid "Defining functions"
msgstr "Funktionen definieren"

#: 05.5-Functions.md:12
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 2\n"
"end"

#: 05.5-Functions.md:21
msgid ""
"Here, we've defined a new function called `foo`. We do this with our old frien"
"d the do/end block and the magic word `define` followed by the name we wish to"
" give to our function. We didn't have to call it `foo`, we could have called i"
"t anything we want such as `bar`, `baz` or ideally something meaningful to you"
" like `main_section` or `lead_riff`."
msgstr ""
"Hier haben wir eine neue Funktion mit dem Namen `foo` definiert. Wir machen "
"das mit unserem alten Freund, dem do/end-Block und dem Zauberwort `define`, "
"gefolgt von dem Namen, den wir unserer Funktion geben möchten. Wir müssen "
"die Funktion nicht unbedingt `foo` nennen, wir können sie auch irgendwie "
"anders nennen; zum Beispiel `bar`, `baz` oder idealerweise einen für dich "
"bedeutsamen Namen wie `haupt_sektion` oder `hintergrund_akkorde`."

#: 05.5-Functions.md:27
msgid ""
"Remember to prepend a colon `:` to the name of your function when you define i"
"t."
msgstr ""
"Denke daran, bei der Definition einer Funktion ihrem Namen einen Doppelpunkt "
"`:` voranzustellen."

#: 05.5-Functions.md:30
msgid "Calling functions"
msgstr "Funktionen aufrufen"

#: 05.5-Functions.md:32
msgid "Once we have defined our function we can call it by just writing its name:"
msgstr ""
"Wenn wir unsere Funktion definiert haben, können wir sie über die Eingabe "
"ihres Namens aufrufen:"

#: 05.5-Functions.md:35
#, no-wrap
msgid ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"
msgstr ""
"define :foo do\n"
"  play 50\n"
"  sleep 1\n"
"  play 55\n"
"  sleep 0.5\n"
"end\n"
"foo\n"
"sleep 1\n"
"2.times do\n"
"  foo\n"
"end"

#: 05.5-Functions.md:52
msgid ""
"We can even use `foo` inside iteration blocks or anywhere we may have written "
"`play` or `sample`. This gives us a great way to express ourselves and to crea"
"te new meaningful words for use in our compositions."
msgstr ""
"Wir können `foo` sogar in Blocks mit Iterationen verwenden - oder überall "
"da, wo wir sonst auch `play` oder `sample` schreiben würden. Das gibt uns "
"eine sehr weit gehende Möglichkeit uns auszudrücken, und können sinnvolle "
"Worte einsetzen, um sie in unseren Kompositionen zu verwenden."

#: 05.5-Functions.md:56
msgid "Functions are remembered across runs"
msgstr "Funktionen bleiben in Erinnerung"

#: 05.5-Functions.md:58
msgid ""
"So far, every time you've pressed the Run button, Sonic Pi has started from a "
"completely blank slate. It knows nothing except for what is in the buffer. You"
" can't reference code in another buffer or another thread. However, functions "
"change that. When you define a function, Sonic Pi *remembers* it. Let's try it"
". Delete all the code in your buffer and replace it with:"
msgstr ""
"Wenn du bisher auf `Ausführen` geklickt hast, ist Sonic Pi jedes Mal aufs "
"Neue ohne irgendwelche Vorgaben gestartet. Es berücksichtigt dabei nichts, "
"außer dem, was im jeweiligen Puffer steht. Du kannst dich nicht auf "
"irgendwelchen Programm-Code beziehen, der in einem anderen Puffer oder in "
"einem anderen Thread steht. Funktionen ändern das jedoch. Wenn du eine "
"Funktion definierst, dann *erinnert* sich Sonic Pi daran. Probieren wir das "
"aus. Lösche den gesamten Code in deinem Puffer und ersetze ihn durch:"

#: 05.5-Functions.md:65
#, no-wrap
msgid "foo"
msgstr "foo"

#: 05.5-Functions.md:69
msgid ""
"Press the Run button - and hear your function play. Where did the code go? How"
" did Sonic Pi know what to play? Sonic Pi just remembered your function - so e"
"ven after you deleted it from the buffer, it remembered what you had typed. Th"
"is behaviour only works with functions created using `define` (and `defonce`)."
msgstr ""
"Klicke auf `Ausführen` - und höre deine Funktion spielen. Wo wurde dieser "
"Code gespeichert? Woher wusste Sonic Pi, was es zu spielen hat? Sonic Pi hat "
"sich deine Funktion einfach gemerkt - sogar, nachdem du den Programm-Code "
"aus dem Puffer gelöscht hast, wusste Sonic Pi noch, was du geschrieben "
"hattest. Dies funktioniert nur mit Funktionen, die du mit `define` (und "
"`defonce`) erzeugt hast."

#: 05.5-Functions.md:75
msgid "Parameterised functions"
msgstr "Funktionen parametrisieren"

#: 05.5-Functions.md:77
msgid ""
"You might be interested in knowing that just like you can pass min and max val"
"ues to `rrand`, you can teach your functions to accept arguments. Let's take a"
" look:"
msgstr ""
"Es wird dich vielleicht interessieren, dass so wie du `rrand` einen Minimal- "
"und Maximalwert übergeben kannst, du auch deinen Funktionen beibringen "
"kannst Argumente zu akzeptieren. Sehen wir uns das an:"

#: 05.5-Functions.md:81
#, no-wrap
msgid ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"
msgstr ""
"define :my_player do |n|\n"
"  play n\n"
"end\n"
"my_player 80\n"
"sleep 0.5\n"
"my_player 90"

#: 05.5-Functions.md:91
msgid ""
"This isn't very exciting, but it illustrates the point. We've created our own "
"version of `play` called `my_player` which is parameterised."
msgstr ""
"Das ist nicht besonders aufregend, zeigt aber, worum es hier geht. Wir haben "
"unsere eigene Version von `play` mit dem Namen `my_player` erschaffen. Diese "
"ist parametrisiert - sie akzeptiert also Argumente."

#: 05.5-Functions.md:94
msgid ""
"The parameters need to go after the `do` of the `define` do/end block, surroun"
"ded by vertical goalposts `|` and separated by commas `,`. You may use any wor"
"ds you want for the parameter names."
msgstr ""
"Die Parameter müssen hinter dem `do` des `define`-do/end-Blocks stehen, "
"umgeben von senkrechten Strichen (pipes) `|`und durch Kommas `,` getrennt. "
"Du kannst beliebige Wörter als Parameternamen verwenden."

#: 05.5-Functions.md:98
msgid ""
"The magic happens inside the `define` do/end block. You may use the parameter "
"names as if they were real values. In this example I'm playing note `n`. You c"
"an consider the parameters as a kind of promise that when the code runs, they "
"will be replaced with actual values. You do this by passing a parameter to the"
" function when you call it. I do this with `my_player 80` to play note 80. Ins"
"ide the function definition, `n` is now replaced with 80, so `play n` turns in"
"to `play 80`. When I call it again with `my_player 90`, `n` is now replaced wi"
"th 90, so `play n` turns into `play 90`."
msgstr ""
"Die Magie passiert innerhalb des `define`-do/end-Blocks. Du kannst die "
"Parameternamen so benutzen, als wären sie wirkliche Werte. In diesem "
"Beispiel spiele ich den Ton `n`. Du kannst die Parameter als eine Art "
"Versprechen ansehen, dass wenn der Programm-Code läuft, sie durch wirkliche "
"Werte ersetzt werden. Du machst das, indem du der Funktion beim Aufruf einen "
"Parameter mitgibst. Ich tue das hier mit `my_player 80`, um die Note 80 zu "
"spielen. Innerhalb der Funktionsdefinition wird `n` nun durch 80 ersetzt, "
"sodass `play n` sich in `play 80` verwandelt. Wenn ich die Funktion erneut "
"mit `my_player 90` aufrufe, wird `n` durch 90 ersetzt, sodass sich jetzt `"
"play n` in `play 90` verwandelt."

#: 05.5-Functions.md:108
msgid "Let's see a more interesting example:"
msgstr "Sehen wir uns ein interessanteres Beispiel an:"

#: 05.5-Functions.md:110
#, no-wrap
msgid ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"
msgstr ""
"define :chord_player do |root, repeats| \n"
"  repeats.times do\n"
"    play chord(root, :minor), release: 0.3\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"chord_player :e3, 2\n"
"sleep 0.5\n"
"chord_player :a3, 3\n"
"chord_player :g3, 4\n"
"sleep 0.5\n"
"chord_player :e3, 3"

#: 05.5-Functions.md:126
msgid ""
"Here I used `repeats` as if it was a number in the line `repeats.times do`. I "
"also used `root` as if it was a note name in my call to `play`."
msgstr ""
"Hier habe ich `repeats` so benutzt, als ob es eine Zahl in der Zeile `"
"repeats.times do` wäre. Zusätzlich habe ich `roots` so verwendet, als ob es "
"ein Notenname in meinem Aufruf von `play` wäre."

#: 05.5-Functions.md:129
msgid ""
"See how we're able to write something very expressive and easy to read by movi"
"ng a lot of our logic into a function!"
msgstr ""
"Sieh dir an, wie wir hier etwas sehr Ausdrucksstarkes und leicht zu Lesendes "
"schreiben konnten, indem wir vieles von unserer Programmlogik in Funktionen "
"verschieben!"

#: 05.6-Variables.md:1
msgid "5.6 Variables"
msgstr "5.6 Variablen"

#: 05.6-Variables.md:3
msgid "Variables"
msgstr "Variablen"

#: 05.6-Variables.md:5
msgid ""
"A useful thing to do in your code is to create names for things. Sonic Pi make"
"s this very easy: you write the name you wish to use, an equal sign (`=`), the"
"n the thing you want to remember:"
msgstr ""
"Beim Programmieren ist es sehr nützlich, Namen für Dinge zu vergeben. Sonic "
"Pi vereinfacht dies sehr: Du schreibst den Namen, den du verwenden möchtest, "
"dann ein Gleichheitszeichen (`=`) und dann das Ding, welches du dir merken "
"möchtest:"

#: 05.6-Variables.md:9
#, no-wrap
msgid "sample_name = :loop_amen"
msgstr "sample_name = :loop_amen"

#: 05.6-Variables.md:13
msgid ""
"Here, we've 'remembered' the symbol `:loop_amen` in the variable `sample_name`"
". We can now use `sample_name` everywhere we might have used `:loop_amen`. For"
" example:"
msgstr ""
"Hier haben wir uns das Symbol `:loop_amen` mit der Variablen `sample_name` "
"*gemerkt*. Wir können nun `sample_name` überall da verwenden, wo wir auch "
"`loop_amen` verwenden würden. Zum Beispiel:"

#: 05.6-Variables.md:17
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name"

#: 05.6-Variables.md:22
msgid ""
"There are three main reasons for using variables in Sonic Pi: communicating me"
"aning, managing repetition and capturing the results of things."
msgstr ""
"Es gibt drei wesentliche Gründe Variablen in Sonic Pi zu nutzen: Bedeutung "
"vermitteln, Wiederholung steuern und Ergebnisse erfassen und speichern."

#: 05.6-Variables.md:26
msgid "Communicating Meaning"
msgstr "Bedeutung vermitteln"

#: 05.6-Variables.md:28
msgid ""
"When you write code it's easy to just think you're telling the computer how to"
" do stuff - as long as the computer understands it's OK. However, it's importa"
"nt to remember that it's not just the computer that reads the code. Other peop"
"le may read it too and try to understand what's going on. Also, you're likely "
"to read your own code in the future and try to understand what's going on. Alt"
"hough it might seem obvious to you now - it might not be so obvious to others "
"or even your future self!"
msgstr ""
"Wenn du Programm-Code schreibst, ist es leicht zu denken, dass du dem nur "
"Computer sagst, wie er etwas tun soll - solange der Computer das versteht, "
"ist das in Ordnung. Vergiss aber nicht, dass nicht nur der Computer deinen "
"Code lesen wird. Andere Leute könnten den Code auch lesen und versuchen zu "
"verstehen, was da vor sich geht. Es ist möglich, dass du den Code später "
"auch selbst noch einmal lesen wirst und verstehen willst, was er bedeutet. "
"Obwohl dir jetzt alles noch ganz offensichtlich erscheint - wahrscheinlich "
"ist es für andere nicht ganz so offensichtlich und vielleicht auch nicht für "
"dich in der Zukunft!"

#: 05.6-Variables.md:36
msgid ""
"One way to help others understand what your code is doing is to write comments"
" (as we saw in a previous section). Another is to use meaningful variable name"
"s. Look at this code:"
msgstr ""
"Ein Weg um andere darin zu unterstützen deinen Programm-Code zu verstehen, "
"ist das Schreiben von Kommentaren (wie wir im vorherigen Abschnitt gesehen "
"haben). Ein andererr besteht darin sinnvolle Namen für deine Variablen "
"verwenden. Sie dir diesen Code an:"

#: 05.6-Variables.md:40
#, no-wrap
msgid "sleep 1.7533"
msgstr "sleep 1.7533"

#: 05.6-Variables.md:44
msgid ""
"Why does it use the number `1.7533`? Where did this number come from? What doe"
"s it mean? However, look at this code:"
msgstr ""
"Warum steht hier die Zahl `1.7533`? Woher kommt diese Zahl? Was bedeutet "
"sie? Sieh dir zum Vergleich diesen Code an:"

#: 05.6-Variables.md:47
#, no-wrap
msgid ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"
msgstr ""
"loop_amen_duration = 1.7533\n"
"sleep loop_amen_duration"

#: 05.6-Variables.md:52
msgid ""
"Now, it's much clearer what `1.7533` means: it's the duration of the sample `:"
"loop_amen`! Of course, you might say why not simply write:"
msgstr ""
"Nun, es ist viel klarer, was `1.7533` bedeutet: Es ist die Dauer des Samples "
"`:loop_amen`! Natürlich könntest du jetzt sagen, warum nicht einfach "
"schreiben:"

#: 05.6-Variables.md:55
#, no-wrap
msgid "sleep sample_duration(:loop_amen)"
msgstr "sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:59
msgid "Which, of course, is a very nice way of communicating the intent of the code."
msgstr ""
"Was natürlich auch ein sehr guter Weg ist, die Absicht hinter dem Code "
"mitzuteilen."

#: 05.6-Variables.md:62
msgid "Managing Repetition"
msgstr "Wiederholungen steuern"

#: 05.6-Variables.md:64
msgid ""
"Often you see a lot of repetition in your code and when you want to change thi"
"ngs, you have to change it in a lot of places. Take a look at this code:"
msgstr ""
"Oft wirst du in deinem Programm-Code Wiederholungen begegnen, und wenn du "
"eine Sache ändern willst, musst du das an vielen Stellen tun. Schau dir "
"diesen Code an:"

#: 05.6-Variables.md:68
#, no-wrap
msgid ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"
msgstr ""
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)\n"
"sample :loop_amen, rate: 0.5\n"
"sleep sample_duration(:loop_amen, rate: 0.5)\n"
"sample :loop_amen\n"
"sleep sample_duration(:loop_amen)"

#: 05.6-Variables.md:77
msgid ""
"We're doing a lot of things with `:loop_amen`! What if we wanted to hear what "
"it sounded like with another loop sample such as `:loop_garzul`? We'd have to "
"find and replace all `:loop_amen`s with `:loop_garzul`. That might be fine if "
"you have lots of time - but what if you're performing on stage? Sometimes you "
"don't have the luxury of time - especially if you want to keep people dancing."
msgstr ""
"Wir machen hier eine ganze Menge mit dem `:loop_amen`! Was wäre, wenn wir es "
"mit einem anderen Loop-Sample hören wollten, wie zum Beispiel `:loop_garzul`"
"? Wir müssten alle `:loop_amen` suchen und mit `:loop_garzul` ersetzen. Das "
"mag in Ordnung sein, wenn du viel Zeit hast - aber was, wenn du gerade auf "
"der Bühne stehst und performst? Manchmal hast du nicht den Luxus der Zeit - "
"vor allem dann nicht, wenn du willst, dass die Leute weiter tanzen."

#: 05.6-Variables.md:84
msgid "What if you'd written your code like this:"
msgstr "Was wäre, wenn du den Code so geschrieben hättest:"

#: 05.6-Variables.md:86
#, no-wrap
msgid ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"
msgstr ""
"sample_name = :loop_amen\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)\n"
"sample sample_name, rate: 0.5\n"
"sleep sample_duration(sample_name, rate: 0.5)\n"
"sample sample_name\n"
"sleep sample_duration(sample_name)"

#: 05.6-Variables.md:96
msgid ""
"Now, that does exactly the same as above (try it). It also gives us the abilit"
"y to just change one line `sample_name = :loop_amen` to `sample_name = :loop_g"
"arzul` and we change it in many places through the magic of variables."
msgstr ""
"Das tut genau dasselbe wie der Code weiter oben (probiere es aus). Und es "
"gibt uns auch die Möglichkeit, dass wir nur eine Zeile von `sample_name = "
":loop_amen` in `sample_name = :loop_garzul` ändern - und damit zugleich an "
"vielen anderen Stellen durch die Magie der Variablen."

#: 05.6-Variables.md:101
msgid "Capturing Results"
msgstr "Ergebnisse speichern"

#: 05.6-Variables.md:103
msgid ""
"Finally, a good motivation for using variables is to capture the results of th"
"ings. For example, you may wish to do things with the duration of a sample:"
msgstr ""
"Schließlich, eine gute Motivation Variablen zu verwenden ist die Ergebnisse "
"von etwas festzuhalten. Z. B. möchtest du vielleicht irgendetwas mit der "
"Dauer eines Samples anstellen:"

#: 05.6-Variables.md:107
#, no-wrap
msgid "sd = sample_duration(:loop_amen)"
msgstr "sd = sample_duration(:loop_amen)"

#: 05.6-Variables.md:111
msgid "We can now use `sd` anywhere we need the duration of the `:loop_amen` sample."
msgstr ""
"Wir können nun `sd` überall dort einsetzen, wo wir die Länge von `:loop_amen`"
" brauchen."

#: 05.6-Variables.md:114
msgid ""
"Perhaps more importantly, a variable allows us to capture the result of a call"
" to `play` or `sample`:"
msgstr ""
"Vielleicht noch wichtiger, erlaubt uns eine Variable das Ergebnis eines "
"Aufrufs von `play` oder `sample` zu speichern:"

#: 05.6-Variables.md:117
#, no-wrap
msgid "s = play 50, release: 8"
msgstr "s = play 50, release: 8"

#: 05.6-Variables.md:121
msgid ""
"Now we have caught and remembered `s` as a variable, which allows us to contro"
"l the synth as it is running:"
msgstr ""
"Jetzt haben wir `s` als Variable festgehalten und gespeichert, das erlaubt "
"es uns einen Synth zu steuern, während er läuft:"

#: 05.6-Variables.md:124
#, no-wrap
msgid ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"
msgstr ""
"s = play 50, release: 8\n"
"sleep 2\n"
"control s, note: 62"

#: 05.6-Variables.md:130
msgid "We'll look into controlling synths in more detail in a later section."
msgstr ""
"Wir werden uns die Steuerung von Synths in einem späteren Abschnitt noch "
"detaillierter ansehen."

#: 05.6-Variables.md:133
msgid "Warning: Variables and Threads"
msgstr "Warnung: Variablen und Threads"

#: 05.6-Variables.md:135
msgid ""
"Whilst variables are great for giving things names and capturing the results o"
"f things, it is important to know that they should typically only be used loca"
"lly within a thread. For example, *don't do this*:"
msgstr ""
"Während Variablen sehr gut dazu geeignet sind, Dingen Namen zu geben oder "
"ein Ergebnis festzuhalten, ist es wichtig zu wissen, dass sie typischerweise "
"nur im lokalen Kontext eines Threads verwendet werden sollten. Zum Beispiel, "
"*tu das hier nicht*:"

#: 05.6-Variables.md:139
#, no-wrap
msgid ""
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end"
msgstr ""
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end"

#: 05.6-Variables.md:154
msgid ""
"In the above example we assign a ring of numbers to a variable `a` and then us"
"ed it within two separate `live_loop`s. In the first live loop every `0.5`s we"
" sort the ring (to `(ring 1, 2, 3, 4, 5, 6)`) and then print it out to the log"
". If you run the code, you'll find that the printed list *is not always sorted"
"!*. This may surprise you - especially that sometimes the list is printed as s"
"orted, and sometimes it is not. This is called non-deterministic behaviour and"
" is the result of a rather nasty problem called a race-condition. The problem "
"is due to the fact that the second live loop is also manipulating the list (in"
" this case shuffling it) and by the time the list is printed, sometimes it has"
" just been sorted and sometimes it has just been shuffled. Both live loops are"
" racing to do something different to the same variable and every time round a "
"different loop 'wins'."
msgstr ""
"In dem Beispiel oben weisen wir einen Ring aus Zahlen einer Variablen `a` zu "
"und verwenden sie dann in zwei separaten `live_loop`. Innerhalb der ersten "
"Schleife sortieren wir alle `0.5` Sekunden den Ring (zu `(ring 1, 2, 3, 4, "
"5, 6)`) und geben dies im Protokoll aus. Wenn du nun den Code ausführst, "
"wirst du bemerken, dass die ausgegebene Liste *nicht immer sortiert ist!*. "
"Das könnte dich überraschen - insbesondere, da manchmal die Liste sortiert "
"ist und manchmal nicht. Dies wird als nicht-vorhersagbares Verhalten "
"bezeichnet, und ist das Ergebnis eines eher üblen Problems, 'Race-Condition' "
"genannt. Das Problem resultiert aus der Tatsache, dass die zweite Schleife "
"ebenfalls die Liste verändert (in diesem Fall wird sie gemischt) und zum "
"Zeitpunkt der Ausgabe die Liste manchmal sortiert und manchmal gemischt ist. "
"Beide Schleifen befinden sich im Wettlauf miteinander die selbe Variable zu "
"verändern, und es gewinnt manchmal die eine und manchmal die andere."

#: 05.6-Variables.md:168
msgid ""
"There are two solutions to this. Firstly, *don't use the same variable in mult"
"iple live loops or threads*. For example, the following code will always print"
" a sorted list as each live loop has its own separate variable:"
msgstr ""
"Hierzu gibt es zwei Lösungen: Zunächst, *verwende nie die gleiche Variable "
"in mehreren Live-Loops oder Threads*. Beispielsweise gibt der folgende Code "
"die Liste immer richtig sortiert aus, da jeder Live-Loop eine eigene "
"Variable verwendet:"

#: 05.6-Variables.md:173
#, no-wrap
msgid ""
"live_loop :shuffled do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"
msgstr ""
"live_loop :shuffled do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = (ring 6, 5, 4, 3, 2, 1)\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"

#: 05.6-Variables.md:188
msgid ""
"However, sometimes we do want to share things across threads. For example, the"
" current key, BPM, synth etc. In these cases, the solution is to use Sonic Pi'"
"s special thread-safe state system via the fns `get` and `set`. This is discus"
"sed later on in section 10."
msgstr ""
"Allerdings wollen wir manchmal auch Werte zwischen verschiedene Threads "
"teilen, zum Beispiel die aktuelle Tonart, BPM , den aktuellen Synth etc. In "
"diesen Fällen ist die beste Lösung Sonic Pi spezielles Thread-Safe-State-"
"System mit Hilfe der Funktionen `get` und `set` zu verwenden. Dies werden "
"wir etwas später in Abschnitt 10 behandeln."

#: 05.7-Thread-Synchronisation.md:1
msgid "5.7 Thread Synchronisation"
msgstr "5.7 Threads synchronisieren"

#: 05.7-Thread-Synchronisation.md:3
msgid "Thread Synchronisation"
msgstr "Threads synchronisieren"

#: 05.7-Thread-Synchronisation.md:5
msgid ""
"Once you have become sufficiently advanced live coding with a number of functi"
"ons and threads simultaneously, you've probably noticed that it's pretty easy "
"to make a mistake in one of the threads which kills it. That's no big deal, be"
"cause you can easily restart the thread by hitting Run. However, when you rest"
"art the thread it is now *out of time* with the original threads."
msgstr ""
"Sobald du ausreichend vertraut damit bist, mit mehreren gleichzeitig "
"ablaufenden Funktionen und Threads live zu programmieren, wirst du bemerken, "
"dass es ziemlich leicht ist in einem einzelnen Thread einen Fehler zu "
"machen, der ihn zum Absturz bringt. Das ist nicht weiter schlimm, da du den "
"Thread ja mit einem Klick auf `Ausführen` einfach neu starten kannst. Wenn "
"du den Thread aber neu startest, dann läuft er *nicht mehr im Takt* mit den "
"anderen Threads."

#: 05.7-Thread-Synchronisation.md:12
msgid "Inherited Time"
msgstr "Vererbte Zeit"

#: 05.7-Thread-Synchronisation.md:14
msgid ""
"As we discussed earlier, new threads created with `in_thread` inherit all of t"
"he settings from the parent thread. This includes the current time. This means"
" that threads are always in time with each other when started simultaneously."
msgstr ""
"Wie wir bereits vorher gesehen haben, erben neue Threads die mit `in_thread` "
"erzeugt werden alle ihre Einstellungen von einem Eltern-Thread. Das schließt "
"auch die aktuelle Zeit mit ein. Das bedeutet, dass Threads immer miteinander "
"im Takt sind, wenn sie gleichzeitig gestartet werden."

#: 05.7-Thread-Synchronisation.md:19
msgid ""
"However, when you start a thread on its own it starts with its own time which "
"is unlikely to be in sync with any of the other currently running threads."
msgstr ""
"Wenn du aber einen Thread für sich alleine startest, spielt dieser in seinem "
"eigenen Takt, der wahrscheinlich nicht mit irgendeinem der anderen gerade "
"laufenden Threads synchron ist."

#: 05.7-Thread-Synchronisation.md:23
msgid "Cue and Sync"
msgstr "Cue und Sync"

#: 05.7-Thread-Synchronisation.md:25
msgid ""
"Sonic Pi provides a solution to this problem with the functions `cue` and `syn"
"c`."
msgstr ""
"Sonic Pi bietet mit den Funktionen `cue` und `sync` eine Lösung für dieses "
"Problem."

#: 05.7-Thread-Synchronisation.md:28
msgid ""
"`cue` allows us to send out heartbeat messages to all other threads. By defaul"
"t the other threads aren't interested and ignore these heartbeat messages. How"
"ever, you can easily register interest with the `sync` function."
msgstr ""
"`cue` erlaubt es uns, mit einem Taktgeber regelmäßig Signale an alle anderen "
"Threads zu versenden. Normalerweise zeigen die anderen Threads an solchen "
"Takt-Signalen kein Interesse und ignorieren sie. Mit der `sync`-Funktion "
"kann du jedoch erreichen, dass ein anderer Thread Interesse zeigt."

#: 05.7-Thread-Synchronisation.md:33
msgid ""
"The important thing to be aware of is that `sync` is similar to `sleep` in tha"
"t it stops the current thread from doing anything for a period of time. Howeve"
"r, with `sleep` you specify how long you want to wait while with `sync` you do"
"n't know how long you will wait - as `sync` waits for the next `cue` from anot"
"her thread which may be soon or a long time away."
msgstr ""
"Wichtig ist dabei sich darüber bewusst zu sein, dass `sync` ähnlich wie "
"`sleep` funktioniert, indem es den aktuellen Thread für eine bestimmte Dauer "
"anhält. Allerdings legst du bei `sleep`fest, wie lange du warten willst, "
"während du bei `sync` nicht weißt, wie lange gewartet werden wird - da `sync`"
" auf den nächsten `cue` eines anderen Threads wartet - was eine kürzere oder "
"längere Dauer sein kann."

#: 05.7-Thread-Synchronisation.md:40
msgid "Let's explore this in a little more detail:"
msgstr "Sehen wir uns das im Detail an:"

#: 05.7-Thread-Synchronisation.md:42
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:58
msgid ""
"Here we have two threads - one acting like a metronome, not playing any sounds"
" but sending out `:tick` heartbeat messages every beat. The second thread is s"
"ynchronising on `tick` messages and when it receives one it inherits the time "
"of the `cue` thread and continues running."
msgstr ""
"Hier haben wir zwei Threads - einer arbeitet wie ein Metronom, er spielt "
"nichts, aber sendet bei jedem Schlag das Taktgeber-Signal `:tick`. Der "
"zweite Thread synchronisiert sich mit den `tick`-Signalen, und wenn er ein "
"Signal erhält, erbt er dadurch den Takt vom `cue`-Thread und läuft weiter."

#: 05.7-Thread-Synchronisation.md:63
msgid ""
"As a result, we will hear the `:drum_heavy_kick` sample exactly when the other"
" thread sends the `:tick` message, even if the two threads didn't start their "
"execution at the same time:"
msgstr ""
"Im Ergebnis hören wir das `:drum_heavy_kick`-Sample genau dann, wenn der "
"andere Thread das `:tick`-Signal sendet, auch dann wenn die Ausführung "
"beider Threads gar nicht zur selben Zeit gestartet war:"

#: 05.7-Thread-Synchronisation.md:67
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do\n"
"    cue :tick\n"
"    sleep 1\n"
"  end\n"
"end\n"
"sleep(0.3)\n"
"in_thread do\n"
"  loop do\n"
"    sync :tick\n"
"    sample :drum_heavy_kick\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:85
msgid ""
"That naughty `sleep` call would typically make the second thread out of phase "
"with the first. However, as we're using `cue` and `sync`, we automatically syn"
"c the threads bypassing any accidental timing offsets."
msgstr ""
"Der dreiste Aufruf von `sleep` würde normalerweise den zweiten Thread "
"gegenüber dem ersten aus dem Takt bringen. Da wir jedoch `cue` und `sync` "
"verwenden, synchronisieren wir beide Threads automatisch und umgehen dabei "
"ungewollte Abweichungen in der Zeit."

#: 05.7-Thread-Synchronisation.md:90
msgid "Cue Names"
msgstr "Cue-Namen"

#: 05.7-Thread-Synchronisation.md:92
msgid ""
"You are free to use whatever name you'd like for your `cue` messages - not jus"
"t `:tick`. You just need to ensure that any other threads are `sync`ing on the"
" correct name - otherwise they'll be waiting for ever (or at least until you p"
"ress the Stop button)."
msgstr ""
"Du kannst deine `cue`-Signale benennen, wie du willst - nicht nur mit `:tick`"
". Du musst nur sicherstellen, dass jegliche anderen Threads, die sich mit "
"`sync` synchronisieren, auch diesen Namen verwenden - ansonsten werden sie "
"endlos warten (oder zumindest so lange bis du auf `Stopp` klickst)."

#: 05.7-Thread-Synchronisation.md:97
msgid "Let's play with a few `cue` names:"
msgstr "Lass uns mit ein paar Namen für `cue` spielen:"

#: 05.7-Thread-Synchronisation.md:99
#, no-wrap
msgid ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"
msgstr ""
"in_thread do\n"
"  loop do \n"
"    cue [:foo, :bar, :baz].choose\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do \n"
"    sync :foo \n"
"    sample :elec_beep\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :bar\n"
"    sample :elec_flip\n"
"  end\n"
"end\n"
"in_thread do\n"
"  loop do\n"
"    sync :baz\n"
"    sample :elec_blup\n"
"  end\n"
"end"

#: 05.7-Thread-Synchronisation.md:129
msgid ""
"Here we have a main `cue` loop which is randomly sending one of the heartbeat "
"names `:foo`, `:bar` or `:baz`. We then also have three loop threads syncing o"
"n each of those names independently and then playing a different sample. The n"
"et effect is that we hear a sound every 0.5 beats as each of the `sync` thread"
"s is randomly synced with the `cue` thread and plays its sample."
msgstr ""
"Hier haben wir eine taktgebende `cue`-Schleife, die auf Zufallsbasis einen "
"der drei Taktgeber-Namen `:foo`, `:bar` oder `:baz` aussendet. Wir haben "
"außerdem drei Schleifen-Threads, die sich unabhängig voneinander, jeder für "
"sich, mit einem der Namen synchronisieren und dann jeweils ein anderes "
"Sample spielen. Im Endeffekt hören wir jeden halben Schlag einen Klang, da "
"jeder der `sync`-Threads mit dem `cue`-Thread auf Zufallsbasis "
"synchronisiert ist und entsprechend sein Sample abspielt."

#: 05.7-Thread-Synchronisation.md:136
msgid ""
"This of course also works if you order the threads in reverse as the `sync` th"
"reads will simply sit and wait for the next `cue`."
msgstr ""
"Das funktioniert natürlich auch, wenn du die Reihenfolge der Threads "
"umkehrst, da die `sync`-Threads einfach dasitzen und auf den nächsten `cue` "
"warten."

#: 06-FX.md:1
msgid "6 FX"
msgstr "6 Effekte"

#: 06-FX.md:3
msgid "Studio FX"
msgstr "Studio-Effekte"

#: 06-FX.md:5
msgid ""
"One of the most rewarding and fun aspects of Sonic Pi is the ability to easily"
" add studio effects to your sounds. For example, you may wish to add some reve"
"rb to parts of your piece, or some echo or perhaps even distort or wobble your"
" basslines."
msgstr ""
"Einer der lohnendsten und unterhaltsamsten Aspekte von Sonic Pi ist, dass du "
"deinen Klängen sehr einfach Studio-Effekte hinzufügen kannst. Zum Beispiel "
"möchtest du vielleicht Teilen deines Stückes etwas Hall (Reverb) hinzufügen, "
"oder etwas Echo, oder vielleicht sogar deine Basslinien verzerren "
"(Distortion) oder wabern lassen (Wobble)."

#: 06-FX.md:10
msgid ""
"Sonic Pi provides a very simple yet powerful way of adding FX. It even allows "
"you to chain them (so you can pass your sounds through distortion, then echo a"
"nd then reverb) and also control each individual FX unit with opts (in a simil"
"ar way to giving params to synths and samples). You can even modify the opts o"
"f the FX whilst it's still running. So, for example, you could increase the re"
"verb on your bass throughout the track..."
msgstr ""
"Sonic Pi bietet einen sehr einfachen aber mächtigen Weg Effekte "
"hinzuzufügen. Es erlaubt dir sogar sie miteinander verketten (so dass du "
"einen Klang durch Verzerrung, dann Echo und dann Hall schicken kannst) und "
"auch jeden Effekt einzeln mit Parametern zu steuern (ganz ähnlich wie "
"Parameter an Synths und Samples übergeben werden). Du kannst die Parameter "
"eines Effektes sogar ändern, während er noch läuft. Zum Beispiel könntest du "
"so den Hall auf deiner Basslinie im Verlauf des Stückes anheben ..."

#: 06-FX.md:18
msgid "Guitar Pedals"
msgstr "Gitarren-Pedale"

#: 06-FX.md:20
msgid ""
"If all of this sounds a bit complicated, don't worry. Once you play around wit"
"h it a little, it will all become quite clear. Before you do though, a simple "
"analogy is that of guitar FX pedals. There are many kinds of FX pedals you can"
" buy. Some add reverb, others distort etc. A guitarist will plug his or her gu"
"itar into one FX pedal - i.e. distortion -, then take another cable and connec"
"t (chain) a reverb pedal. The output of the reverb pedal can then be plugged i"
"nto the amplifier:"
msgstr ""
"Wenn sich das alles etwas kompliziert anhören sollte, keine Sorge! Wenn du "
"ein wenig damit herumspielst, wird dir das alles ziemlich klar erscheinen. "
"Aber bevor du loslegst: Ein einfacher Vergleich ist der mit Effektpedalen "
"für Gitarren. Es gibt viele Arten solcher Effektpedale. Manche fügen Hall "
"hinzu, andere verzerren etc. Eine Gitarristin oder ein Gitarrist würde ihre "
"bzw. seine Gitarre an ein Effektpedal anstecken - z. B. einen Verzerrer - "
"und dann ein weiteres Kabel nehmen und noch ein Hall-Effektpedal verbinden "
"(verketten). Der Ausgang des Hall-Effektpedals kann dann an einen Verstärker "
"angesteckt werden:"

#: 06-FX.md:29
#, no-wrap
msgid "Guitar -> Distortion -> Reverb -> Amplifier"
msgstr "Gitarre -> Verzerrer -> Hall -> Verstärker"

#: 06-FX.md:33
msgid ""
"This is called FX chaining. Sonic Pi supports exactly this. Additionally, each"
" pedal often has dials and sliders to allow you to control how much distortion"
", reverb, echo etc. to apply. Sonic Pi also supports this kind of control. Fin"
"ally, you can imagine a guitarist playing whilst someone plays with the FX con"
"trols whilst they're playing. Sonic Pi also supports this - but instead of nee"
"ding someone else to control things for you, that's where the computer steps i"
"n."
msgstr ""
"So etwas nennt sich Effektkette. Und das ist genau das, was Sonic Pi "
"unterstützt. Zusätzlich haben Effektpedale oftmals einige Drehknöpfe und "
"Schieberegler, die dir erlauben zu steuern, wieviel Verzerrung, Hall, oder "
"Echo hinzugefügt werden sollen. Sonic Pi unterstützt auch diese Art der "
"Steuerung. Und abschließend stell dir einmal, wie eine Person Gitarre "
"spielt, während eine andere die Effekte steuert, während sie spielt. Sonic "
"Pi unterstützt das auch - aber anstatt für die Effekt-Steuerung auf eine "
"andere Person angewiesen zu sein, springt hier der Computer ein."

#: 06-FX.md:42
msgid "Let's explore FX!"
msgstr "Lass uns Effekte ausprobieren!"

#: 06.1-Adding-FX.md:1
msgid "6.1 Adding FX"
msgstr "6.1 Effekte hinzufügen"

#: 06.1-Adding-FX.md:3 13.1-Sound-In.md:26
msgid "Adding FX"
msgstr "Effekte hinzufügen"

#: 06.1-Adding-FX.md:5
msgid ""
"In this section we'll look at a couple of FX: reverb and echo. We'll see how t"
"o use them, how to control their opts and how to chain them."
msgstr ""
"In diesem Abschnitt sehen wir uns zwei Effekte an: Hall und Echo. Wir werden "
"sehen, wie diese Effekte verwendet werden, wie ihre Parameter gesteuert "
"werden, und wie sie verketten werden."

#: 06.1-Adding-FX.md:9
msgid ""
"Sonic Pi's FX system uses blocks. So if you haven't read section 5.1 you might"
" want to take a quick look and then head back."
msgstr ""
"Das Effekt-System von Sonic Pi verwendet so genannte Code-Blöcke. Falls du "
"Abschnitt 5.1 des Tutorials noch nicht gelesen hast, wirf einen kurzen Blick "
"darauf und komme dann hierher zurück."

#: 06.1-Adding-FX.md:12
msgid "Reverb"
msgstr "Hall"

#: 06.1-Adding-FX.md:14
msgid ""
"If we want to use reverb we write `with_fx :reverb` as the special code to our"
" block like this:"
msgstr ""
"Um den Hall-Effekt zu benutzen schreiben wir `with_fx :reverb` als "
"speziellen Programm-Code zu unserem Code-Block. Und zwar so:"

#: 06.1-Adding-FX.md:17
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:27
msgid ""
"Now play this code and you'll hear it played with reverb. It sounds good, does"
"n't it! Everything sounds pretty nice with reverb."
msgstr ""
"Führe diesen Code-Block aus, und du wirst ihn mit Hall hören. Hört sich gut "
"an, nicht wahr! t Mit Hall hört sich alles recht hübsch an."

#: 06.1-Adding-FX.md:30
msgid "Now let's look what happens if we have code outside the do/end block:"
msgstr ""
"Lass uns schauen, was passiert, wenn wir Programm-Code außerhalb des do/end-"
"Blocks hinzufügen:"

#: 06.1-Adding-FX.md:32
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:45
msgid ""
"Notice how the final `play 55` isn't played with reverb. This is because it is"
" *outside* the do/end block, so it isn't captured by the reverb FX."
msgstr ""
"Beachte wie das letzte `play 55` nicht mit Hall abgespielt wird. Der Grund "
"dafür ist, dass es sich *außerhalb* des do/end-Blocks befindet und deshalb "
"nicht von unserem Hall erfasst wird."

#: 06.1-Adding-FX.md:48
msgid ""
"Similarly, if you make sounds before the do/end block, they also won't be capt"
"ured:"
msgstr ""
"Entsprechend werden Klänge, die du vor dem do/end-Block einfügst, auch nicht "
"von dem Hall-Effekt erfasst:"

#: 06.1-Adding-FX.md:51
#, no-wrap
msgid ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"
msgstr ""
"play 55\n"
"sleep 1\n"
"with_fx :reverb do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end\n"
"sleep 1\n"
"play 55"

#: 06.1-Adding-FX.md:67
msgid "Echo"
msgstr "Echo"

#: 06.1-Adding-FX.md:69
msgid "There are many FX to choose from. How about some echo?"
msgstr "Es stehen viele Effekte zur Auswahl. Wie wäre es mit etwas Echo?"

#: 06.1-Adding-FX.md:71
#, no-wrap
msgid ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:81
msgid ""
"One of the powerful aspects of Sonic Pi's FX blocks is that they may be passed"
" opts similar to opts we've already seen with `play` and `sample`. For example"
" a fun echo opt to play with is `phase:` which represents the duration of a gi"
"ven echo in beats. Let's make the echo slower:"
msgstr ""
"Einer der machtvollen Aspekte von Effekt-Blöcken in Sonic PI ist, dass wir "
"ihnen opts übergeben können, genauso wie wir es schon bei `play` und `sample`"
" gesehen haben. Ein spannender Echo-Parameter ist zum Beispiel `phase:`, der "
"die Dauer des Echos in Beats darstellt. Lass uns das Echo langsamer machen:"

#: 06.1-Adding-FX.md:87
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:97
msgid "Let's also make the echo faster:"
msgstr "Lass uns das Echo auch schneller machen:"

#: 06.1-Adding-FX.md:99
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.125 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:109
msgid ""
"Let's make the echo take longer to fade away by setting the `decay:` time to 8"
" beats:"
msgstr ""
"Lassen wir nun das Echo langsamer ausschwingen, indem wir den `decay:`-Wert "
"auf 8 Schläge setzen:"

#: 06.1-Adding-FX.md:112
#, no-wrap
msgid ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :echo, phase: 0.5, decay: 8 do\n"
"  play 50\n"
"  sleep 0.5\n"
"  sample :elec_plip\n"
"  sleep 0.5\n"
"  play 62\n"
"end"

#: 06.1-Adding-FX.md:122
msgid "Nesting FX"
msgstr "Effekte verschachteln"

#: 06.1-Adding-FX.md:124
msgid ""
"One of the most powerful aspects of the FX blocks is that you can nest them. T"
"his allows you to very easily chain FX together. For example, what if you want"
"ed to play some code with echo and then with reverb? Easy, just put one inside"
" the other:"
msgstr ""
"Einer der mächtigsten Aspekte von Effekt-Blöcken ist, dass du sie "
"verschachteln kannst. Das erlaubt dir Effekte ganz einfach "
"aneinanderzuhängen. Was, zum Beispiel, wenn du einen Code-Block zuerst mit "
"Echo und dann mit Hall versehen willst? Ganz einfach, verschachtele die Code-"
"Blöcke ineinander:"

#: 06.1-Adding-FX.md:129
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  with_fx :echo, phase: 0.5, decay: 8 do\n"
"    play 50\n"
"    sleep 0.5\n"
"    sample :elec_blup\n"
"    sleep 0.5\n"
"    play 62\n"
"  end\n"
"end"

#: 06.1-Adding-FX.md:141
msgid ""
"Think about the audio flowing from the inside out. The sound of all the code w"
"ithin the inner do/end block such as `play 50` is first sent to the echo FX an"
"d the sound of the echo FX is in turn sent out to the reverb FX."
msgstr ""
"Stell dir das was du hörst, als etwas vor, das von innen nach außen fließt. "
"Der Klang aus dem gesamten Programm-Code im inneren do/end-Block, wie `play "
"50`, wird zuerst zu dem Echo-Effekt gesendet, und der Echo-Effekt danach zu "
"dem Hall-Effekt."

#: 06.1-Adding-FX.md:146
msgid ""
"We may use very deep nestings for crazy results. However, be warned, the FX ca"
"n use a lot of resources and when you nest them you're effectively running mul"
"tiple FX simultaneously. So be sparing with your use of FX especially on low p"
"owered platforms such as the Raspberry Pi."
msgstr ""
"Wir können sehr tiefe Verschachtelungen verwenden und verrückte Ergebnisse "
"erzielen. Aber sei gewarnt, die Effekte können eine Menge Ressourcen "
"verbrauchen, und wenn du sie verschachtelst, lässt du effektiv mehrere "
"Effekte gleichzeitig laufen. Sei also sparsam bei deinem Gebrauch von "
"Effekten, besonders auf nicht so kraftvollen Plattformen wie dem Raspberry "
"Pi."

#: 06.1-Adding-FX.md:151
msgid "Discovering FX"
msgstr "Effekte entdecken"

#: 06.1-Adding-FX.md:153
msgid ""
"Sonic Pi ships with a large number of FX for you to play with. To find out whi"
"ch ones are available, click on FX in the far left of this help system and you"
"'ll see a list of available options. Here's a list of some of my favourites:"
msgstr ""
"Sonic Pi bringt eine Vielzahl von Effekten mit, die du verwenden kannst. Um "
"herauszufinden, welche verfügbar sind, klicke links unten im Menü des Hilfe-"
"Fensters auf FX, und du siehst eine Liste der verfügbaren Optionen. Hier "
"eine Liste einiger meiner Favoriten:"

#: 06.1-Adding-FX.md:158
msgid "wobble,"
msgstr "Wobble,"

#: 06.1-Adding-FX.md:159
msgid "reverb,"
msgstr "Reverb,"

#: 06.1-Adding-FX.md:160
msgid "echo,"
msgstr "Echo,"

#: 06.1-Adding-FX.md:161
msgid "distortion,"
msgstr "Distortion,"

#: 06.1-Adding-FX.md:162
msgid "slicer"
msgstr "Slicer"

#: 06.1-Adding-FX.md:164
msgid "Now go crazy and add FX everywhere for some amazing new sounds!"
msgstr ""
"Nun werde wild und füge überall Effekte hinzu - für ein paar tolle neue "
"Klänge!"

#: 06.2-FX-in-Practice.md:1
msgid "6.2 FX in Practice"
msgstr "6.2 Praktische Anwendung von Effekten"

#: 06.2-FX-in-Practice.md:3
msgid "FX in Practice"
msgstr "Praktische Anwendung von Effekten"

#: 06.2-FX-in-Practice.md:5
msgid ""
"Although they look deceptively simple on the outside, FX are actually quite co"
"mplex beasts internally. Their simplicity often entices people to overuse them"
" in their pieces. This may be fine if you have a powerful machine, but if - li"
"ke me - you use a Raspberry Pi to jam with, you need to be careful about how m"
"uch work you ask it to do if you want to ensure the beats keep flowing."
msgstr ""
"Auch wenn sie äußerlich sehr einfach aussehen, sind Effekte in Sonic Pi doch "
"höchst komplexe Gebilde. Ihre anscheinende Einfachheit verleitet Leute oft "
"dazu, zu viele Effekte in ihren Stücken zu verwenden. Das mag Spaß machen, "
"wenn du über einen sehr starken Computer verfügst. Aber falls du - so wie "
"ich - einen Raspberry Pi zum Jammen benutzt, musst du darauf achten, wieviel "
"Arbeit du der Maschine abverlangst, wenn du sicher gehen willst, dass die "
"Beats weiter im Takt laufen."

#: 06.2-FX-in-Practice.md:12
msgid "Consider this code:"
msgstr "Sieh dir den folgenden Programm-Code an:"

#: 06.2-FX-in-Practice.md:14
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:23
msgid ""
"In this code we're playing note 60 with a very short release time, so it's a s"
"hort note. We also want reverb so we've wrapped it in a reverb block. All good"
" so far. Except..."
msgstr ""
"In diesem Programm-Code spielen wir die Note 60 mit einer sehr kurzen "
"Release-Zeit und erzeugen somit einen kurze Note. Wir wollen außerdem einen "
"Hall-Effekt, also haben wir ihn in einen Reverb-Block gepackt. Soweit ist "
"alles gut, abgesehen von ..."

#: 06.2-FX-in-Practice.md:27
msgid ""
"Let's look at what the code does. First we have a `loop` which means everythin"
"g inside of it is repeated forever. Next we have a `with_fx` block. This means"
" we will create a new reverb FX *every time we loop*. This is like having a se"
"parate FX reverb pedal for every time you pluck a string on a guitar. It's coo"
"l that you can do this, but it's not always what you want. For example, this c"
"ode will struggle to run nicely on a Raspberry Pi. All the work of creating th"
"e reverb and then waiting until it needs to be stopped and removed is all hand"
"led by `with_fx` for you, but this takes CPU power which may be precious."
msgstr ""
"Lass uns ansehen, was der Code hier macht. Zunächst haben wir einen `loop`-"
"Befehl, was bedeutet, dass alles darin für immer in einer Schleife "
"wiederholt wird. Dann haben wir einen `with_fx:`-do/end-Block. Das bedeutet, "
"dass wir mit jeder *Wiederholung der Schleife* einen neuen Hall-Effekt "
"erzeugen. Und das ist so, als ob wir für jedes Mal, wenn wir eine "
"Gitarrenseite spielen, ein zusätzliches Hall-Effekt-Pedal an die Effektkette "
"hängen würden. Es ist cool, dass du das machen kannst, aber es ist "
"möglicherweise nicht das, was du eigentlich willst. So wird zum Beispiel "
"dieser Programm-Code Schwierigkeiten haben flüssig auf einem Raspberry Pi zu "
"laufen. Die gesamte Arbeit den Hall zu erzeugen und dann abzuwarten, bis er "
"gestoppt und entfernt werden muss, wird von `with_fx:` für dich erledigt - "
"dafür werden Prozessor-Ressourcen benötigt, die vielleicht anderweitig "
"wertvoll wären."

#: 06.2-FX-in-Practice.md:37
msgid ""
"How do we make it more similar to a traditional setup where our guitarist has "
"just *one* reverb pedal which all sounds pass through? Simple:"
msgstr ""
"Wie können wir einen Code-Block schreiben, der einem traditionellen Aufbau "
"entspricht, bei dem die Gitarre nur *ein* Hall-Effekt-Pedal benutzt, durch "
"das der gesamte Klang geschickt wird? Einfach:"

#: 06.2-FX-in-Practice.md:41
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  loop do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:50
msgid ""
"We put our loop *inside* the `with_fx` block. This way we only create a single"
" reverb for all notes played in our loop. This code is a lot more efficient an"
"d would work fine on a Raspberry Pi."
msgstr ""
"Wir haben unsere Schleife *ins Innere* des `with_fx:`-Blocks gepackt. So "
"erzeugen wir nur noch einen einzelnen Hall-Effekt für alle Noten, die in der "
"Schleife gespielt werden. Dieser Programm-Code ist sehr viel effizienter und "
"würde auch auf einem Raspberry Pi gut funktionieren."

#: 06.2-FX-in-Practice.md:54
msgid "A compromise is to use `with_fx` over an iteration within a loop:"
msgstr ""
"Ein Kompromiss ist `with_fx:` über eine Iteration innerhalb einer Schleife "
"zu verwenden:"

#: 06.2-FX-in-Practice.md:56
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb do\n"
"    16.times do\n"
"      play 60, release: 0.1\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:67
msgid ""
"This way we've lifted the `with_fx` out of the inner part of the `loop` and we"
"'re now creating a new reverb every 16 notes."
msgstr ""
"Somit wird die `with_fx:`-Funktion aus dem Inneren Teil der Schleife geholt, "
"und der Programm-Code erzeugt jetzt nur noch alle 16 Noten einen neuen Hall-"
"Effekt."

#: 06.2-FX-in-Practice.md:70
msgid ""
"This is such a common pattern that `with_fx` supports an opt to do exactly thi"
"s but without having to write the `16.times` block:"
msgstr ""
"Dieser Muster taucht so häufig auf, dass `with_fx` eine Option akzeptiert, "
"die erlaubt genau dies zu tun, ohne den `16.times`-Block zu schreiben:"

#: 06.2-FX-in-Practice.md:73
#, no-wrap
msgid ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"loop do\n"
"  with_fx :reverb, reps: 16 do\n"
"    play 60, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: 06.2-FX-in-Practice.md:82
msgid ""
"Both the `reps: 16` and `16.times do` examples will behave identically. The `r"
"eps: 16` essentially repeats the code in the `do/end` block 16 times so you ca"
"n use them both interchangeably and choose the one that feels best for you."
msgstr ""
"Beide, das `reps: 16`- und das `16.times do`-Beispiel verhalten sich "
"identisch. `reps: 16` wiederholt den Programm-Code im `do/end`-Block 16 mal, "
"sodass du beide Ausdrücke austauschbar verwenden und den auswählen kannst, "
"der sich am besten für dich anfühlt."

#: 06.2-FX-in-Practice.md:87
msgid ""
"Remember, there are no mistakes, just possibilities. However, some of these ap"
"proaches will have a different sound and also different performance characteri"
"stics. So play around and use the approach that sounds best to you whilst also"
" working within the performance constraints of your platform."
msgstr ""
"Denke daran, es gibt keine Fehler, nur Möglichkeiten! Wie auch immer, einige "
"dieser Ansätze werden sich klanglich unterscheiden und auch unterschiedlich "
"verhalten. Spiel also herum, und verwende den Ansatz, der für dich am besten "
"klingt und zugleich innerhalb der Beschränkungen deiner Plattform "
"funktioniert."

#: 07-Control.md:1
msgid "7 Control"
msgstr "7 Steuerung"

#: 07-Control.md:3
msgid "Controlling running sounds"
msgstr "Steuerung laufender Klänge"

#: 07-Control.md:5
msgid ""
"So far we've looked at how you can trigger synths and samples, and also how to"
" change their default opts such as amplitude, pan, envelope settings and more."
" Each sound triggered is essentially its own sound with its own list of option"
"s set for the duration of the sound."
msgstr ""
"Bisher haben wir uns angesehen, wie du Synths und Samples starten und ihre "
"Standard-Parameter wie Lautstärke, Position im Stereofeld, Hüllkurven und so "
"weiter anpassen kannst. Jeder gespielte Klang ist im Grunde genommen ein "
"eigener Klang mit einer eigenen Liste an Optionen, gesetzt für die Dauer, "
"während der er klingt."

#: 07-Control.md:11
msgid ""
"Wouldn't it also be cool if you could change a sound's opts whilst it's still "
"playing, just like you might bend a string of a guitar whilst it's still vibra"
"ting?"
msgstr ""
"Wäre es nicht auch cool, wenn du die Parameter eines Klanges verändern "
"könntest - noch während er erklingt - etwa so, wie du an einer Gitarrensaite "
"ziehen würdest, während sie noch schwingt?"

#: 07-Control.md:15
msgid "You're in luck - this section will show you how to do exactly this."
msgstr ""
"Glück gehabt - dieser Abschnitt wird dir zeigen, wie du genau das tun kannst."

#: 07.1-Controlling-Running-Synths.md:1
msgid "7.1 Controlling Running Synths"
msgstr "7.1 Steuerung laufender Synths"

#: 07.1-Controlling-Running-Synths.md:3
msgid "Controlling Running Synths"
msgstr "Steuerung laufender Synths"

#: 07.1-Controlling-Running-Synths.md:5
msgid ""
"So far we've only concerned ourselves with triggering new sounds and FX. Howev"
"er, Sonic Pi gives us the ability to manipulate and control currently running "
"sounds. We do this by using a variable to capture a reference to a synth:"
msgstr ""
"Bisher haben wir uns nur damit befasst neue Klänge und Effekte zu triggern. "
"Mit Sonic Pi kannst du aber laufende Klänge auch steuern und verändern. Um "
"das zu tun, fassen wir eine Referenz zu einem Synth in einer Variable:"

#: 07.1-Controlling-Running-Synths.md:10
#, no-wrap
msgid "s = play 60, release: 5"
msgstr "s = play 60, release: 5"

#: 07.1-Controlling-Running-Synths.md:14
msgid ""
"Here, we have a run-local variable `s` which represents the synth playing note"
" 60. Note that this is *run-local* - you can't access it from other runs like "
"functions."
msgstr ""
"Jetzt haben wir eine lokal ausgeführte Variable `s`, die einen Synth "
"repräsentiert, der die Note 60 spielt. Beachte, dass sie *lokal ausgeführt* "
"wird - das bedeutet, du kannst nicht von andere Ausführungen, wie z. B. "
"Funktionen auf sie zugreifen."

#: 07.1-Controlling-Running-Synths.md:18
msgid "Once we have `s`, we can start controlling it via the `control` function:"
msgstr ""
"Sobald wir `s` gesetzt haben, können wir es mit der `control`-Funktion "
"steuern:"

#: 07.1-Controlling-Running-Synths.md:21 07.3-Sliding-Parameters.md:13
#, no-wrap
msgid ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.1-Controlling-Running-Synths.md:31
msgid ""
"The thing to notice is that we're not triggering 4 different synths here - we'"
"re just triggering one synth and then change the pitch 3 times afterwards, whi"
"le it's playing."
msgstr ""
"Wichtig zu bemerken ist hier, dass wir nicht 4 verschiedene Synths starten - "
"wir starten nur einen Synth und ändern dann seine Tonhöhe dreimal im "
"Nachhinein, während er noch spielt."

#: 07.1-Controlling-Running-Synths.md:35
msgid ""
"We can pass any of the standard opts to `control`, so you can control things l"
"ike `amp:`, `cutoff:` or `pan:`."
msgstr ""
"Wir können jeden der Standard-Parameter an die `control`-Funktion übergeben, "
"so kannst du Dinge wie `amp:`, `cutoff:` oder `pan:` steuern."

#: 07.1-Controlling-Running-Synths.md:38
msgid "Non-controllable Options"
msgstr "Nicht-steuerbare Parameter"

#: 07.1-Controlling-Running-Synths.md:40
msgid ""
"Some of the opts can't be controlled once the synth has started. This is the c"
"ase for all the ADSR envelope parameters. You can find out which opts are cont"
"rollable by looking at their documentation in the help system. If the document"
"ation says *Can not be changed once set*, you know it's not possible to contro"
"l the opt after the synth has started."
msgstr ""
"Manche der Optionen können nach dem Start des Synths nicht mehr kontrolliert "
"werden. Das ist der Fall bei allen ADSR-Hüllkurven-Parametern. Welche Opts "
"steuerbar sind, kannst du herausfinden, indem du ihre Dokumentation im Hilfe-"
"Fenster ansiehst. Wenn dort steht *Can not be changed once set*, dann weißt "
"du, dass es nicht möglich ist diese Option zu steuern, nachdem der Synth "
"gestartet ist."

#: 07.2-Controlling-FX.md:1
msgid "7.2 Controlling FX"
msgstr "7.2 Steuerung von Effekten"

#: 07.2-Controlling-FX.md:3
msgid "Controlling FX"
msgstr "Steuerung von Effekten"

#: 07.2-Controlling-FX.md:5
msgid ""
"It is also possible to control FX, although this is achieved in a slightly dif"
"ferent way:"
msgstr ""
"Es ist auch möglich Effekte zu steuern, allerdings funktioniert das ein "
"wenig anders:"

#: 07.2-Controlling-FX.md:8
#, no-wrap
msgid ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"
msgstr ""
"with_fx :reverb do |r|\n"
"  play 50\n"
"  sleep 0.5\n"
"  control r, mix: 0.7\n"
"  play 55\n"
"  sleep 1\n"
"  control r, mix: 0.9\n"
"  sleep 1\n"
"  play 62\n"
"end"

#: 07.2-Controlling-FX.md:21
msgid ""
"Instead of using a variable, we use the goalpost parameters of the do/end bloc"
"k. Inside the `|` bars, we need to specify a unique name for our running FX wh"
"ich we then reference from the containing do/end block. This behaviour is iden"
"tical to using parameterised functions."
msgstr ""
"Anstatt eine Variable zu verwenden, nutzen wir die Parameter zwischen den so "
"genannten Pipes des do/end-Blocks. Innerhalb dieser Pipes `|`, müssen wir "
"einen eindeutigen Namen für unseren laufenden Effekt vergeben, den wir dann "
"innerhalb des do/end-Blocks verwenden. Dieses Verhalten ist das gleiche wie "
"bei parametrisierten Funktionen."

#: 07.2-Controlling-FX.md:26
msgid "Now go and control some synths and FX!"
msgstr "Jetzt los - steuere ein paar Synths und Effekte!"

#: 07.3-Sliding-Parameters.md:1
msgid "7.3 Sliding Options"
msgstr "7.3 Gleitende Parameter"

#: 07.3-Sliding-Parameters.md:3
msgid "Sliding Opts"
msgstr "Gleitende Parameter"

#: 07.3-Sliding-Parameters.md:5
msgid ""
"Whilst exploring the synth and FX opts, you might have noticed that there are "
"a number of opts ending with `_slide`. You might have even tried calling them "
"and seeing no effect. This is because they're not normal parameters, they're s"
"pecial opts that only work when you control synths as introduced in the previo"
"us section."
msgstr ""
"Während du die Synth- und Effekt-Optionen erforscht hast, ist dir vielleicht "
"aufgefallen, dass einige von ihnen auf `_slide` enden. Vielleicht hast du "
"sogar ausprobiert sie aufzurufen und keinen Effekt bemerkt. Das liegt daran, "
"dass dies keine normalen Parameter sind, sie sind besondere Opts, die nur "
"dann funktionieren, wenn du Synths steuerst, wie im letzten Abschnitt "
"beschrieben."

#: 07.3-Sliding-Parameters.md:11
msgid "Consider the following example:"
msgstr "Schau dir das folgende Beispiel an:"

#: 07.3-Sliding-Parameters.md:23
msgid ""
"Here, you can hear the synth pitch changing immediately on each `control` call"
". However, we might want the pitch to slide between changes. As we're controll"
"ing the `note:` parameter, to add slide, we need to set the `note_slide` param"
"eter of the synth:"
msgstr ""
"Hier kannst du hören, wie sich die Tonhöhe des Synth unmittelbar bei jedem "
"Aufruf von `control` ändert. Vielleicht möchtest du aber, dass die Tonhöhe "
"sich gleitend zwischen den Aufrufen verändert. Wenn wir die Opt `note:` "
"verwenden, müssen wir, um gleitende Übergänge zu erhalten, den `note_slide:`-"
"Parameter des Synth setzen:"

#: 07.3-Sliding-Parameters.md:28
#, no-wrap
msgid ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"
msgstr ""
"s = play 60, release: 5, note_slide: 1\n"
"sleep 0.5\n"
"control s, note: 65\n"
"sleep 0.5\n"
"control s, note: 67\n"
"sleep 3\n"
"control s, note: 72"

#: 07.3-Sliding-Parameters.md:38
msgid ""
"Now we hear the notes being bent between the `control` calls. It sounds nice, "
"doesn't it? You can speed up the slide by using a shorter time such as `note_s"
"lide: 0.2` or slow it down by using a longer slide time."
msgstr ""
"Nun hören wir, wie die Noten zwischen den `control`-Aufrufen gezogen werden. "
"Hört sich gut an, oder? Mit einer kürzeren Dauer wie beispielsweise "
"`note_slide: 0,2` kannst du den Übergang beschleunigen, oder ihn mit einer "
"längeren Slide-Dauer verlangsamen."

#: 07.3-Sliding-Parameters.md:43
msgid ""
"Every parameter that can be controlled has a corresponding `_slide` parameter "
"for you to play with."
msgstr ""
"Jeder steuerbare Parameter hat einen entsprechenden `_slide`-Parameter, mit "
"dem du spielen kannst."

#: 07.3-Sliding-Parameters.md:46
msgid "Sliding is sticky"
msgstr "Gleiten ist klebrig"

#: 07.3-Sliding-Parameters.md:48
msgid ""
"Once you've set a `_slide` parameter on a running synth, it will be remembered"
" and used every time you slide the corresponding parameter. To stop sliding yo"
"u must set the `_slide` value to 0 before the next `control` call."
msgstr ""
"Nachdem du einmal einen `_slide` Parameter auf einem laufenden Synth gesetzt "
"hast, wird er erinnert - und er wird jedes mal genutzt, wenn du den dazu "
"gehörenden Parameter nutzt. Um das Gleiten zu stoppen, musst du den `_slide` "
"Wert vor dem nächsten `control`-Aufruf auf 0 setzen."

#: 07.3-Sliding-Parameters.md:53
msgid "Sliding FX Opts"
msgstr "Gleitende Effekt-Parameter"

#: 07.3-Sliding-Parameters.md:55
msgid "It is also possible to slide FX opts:"
msgstr "Es ist ebenso möglich, Effekt-Opts gleiten zu lassen:"

#: 07.3-Sliding-Parameters.md:57
#, no-wrap
msgid ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"
msgstr ""
"with_fx :wobble, phase: 1, phase_slide: 5 do |e|\n"
"  use_synth :dsaw\n"
"  play 50, release: 5\n"
"  control e, phase: 0.025\n"
"end"

#: 07.3-Sliding-Parameters.md:65
msgid ""
"Now have fun sliding things around for smooth transitions and flowing control."
".."
msgstr ""
"Und jetzt hab Spaß damit die Dinge ein wenig herumgleiten zu lassen - für "
"weiche Übergänge und Steuerung der Abläufe ..."

#: 08-Data-Structures.md:1
msgid "8 Data Structures"
msgstr "8 Datenstrukturen"

#: 08-Data-Structures.md:3
msgid "Data Structures"
msgstr "Datenstrukturen"

#: 08-Data-Structures.md:5
msgid "A very useful tool in a programmer's toolkit is a data structure."
msgstr ""
"Ein sehr praktisches Werkzeug im Werkzeugkasten jeder Programmiererin und "
"jedes Programmierers sind Datenstrukturen."

#: 08-Data-Structures.md:7
msgid ""
"Sometimes you may wish to represent and use more than one thing. For example, "
"you may find it useful to have a series of notes to play one after another. Pr"
"ogramming languages have data structures to allow you do exactly this."
msgstr ""
"Manchmal möchtest du mehr als ein einzelnes Ding darstellen oder verwenden. "
"Du könntest z. B. nützlich finden, eine Reihe von Noten zu haben und sie "
"dann nacheinander abzuspielen. Programmiersprachen verwenden Datenstrukturen "
"für genau diesen Zweck."

#: 08-Data-Structures.md:12
msgid ""
"There are many exciting and exotic data structures available to programmers - "
"and people are always inventing new ones. However, for now we only really need"
" to consider a very simple data structure - the list."
msgstr ""
"Es gibt einige aufregende und exotische Datenstrukturen die "
"Programmiererinnen und Programmierern zur Verfügung stehen - und es werden "
"immer noch weitere erfunden. Für unsere Zwecke jedoch benötigen wir vorerst "
"nur eine, sehr einfache, Datenstruktur - die Liste."

#: 08-Data-Structures.md:16
msgid ""
"Let's look at it in more detail. We'll cover its basic form and then also how "
"lists can be used to represent scales and chords."
msgstr ""
"Lass uns das im Detail ansehen. Wir werden uns die Grundform einer Liste "
"anschauen und wie man sie verwendet, um Skalen und Akkorde abzubilden."

#: 08.1-Lists.md:1
msgid "8.1 Lists"
msgstr "8.1 Listen"

#: 08.1-Lists.md:3
msgid "Lists"
msgstr "Listen"

#: 08.1-Lists.md:5
msgid ""
"In this section we'll take a look at a data structure which is very useful - t"
"he list. We met it very briefly before in the section on randomisation when we"
" randomly chose from a list of notes to play:"
msgstr ""
"In diesem Abschnitt werden wir uns eine sehr nützliche Datenstruktur ansehen "
"- die Liste. Wir hatten schon einmal in dem Abschnitt über Zufälligkeit kurz "
"mit ihr zu tun, als wir die zu spielenden Noten zufällig aus einer Liste "
"ausgewählt haben:"

#: 08.1-Lists.md:9
#, no-wrap
msgid "play choose([50, 55, 62])"
msgstr "play choose([50, 55, 62])"

#: 08.1-Lists.md:13
msgid ""
"In this section we'll explore using lists to also represent chords and scales."
" First let's recap how we might play a chord. Remember that if we don't use `s"
"leep`, sounds all happen at the same time:"
msgstr ""
"In diesem Abschnitt erforschen wir, wie wir Akkorde und Skalen mit Listen "
"darstellen können. Zuerst rufen wir uns wieder in Erinnerung, wie wir einen "
"Akkord spielen könnten. Erinnere dich, dass ohne `sleep` alle Töne zur "
"gleichen Zeit gespielt werden:"

#: 08.1-Lists.md:17
#, no-wrap
msgid ""
"play 52\n"
"play 55\n"
"play 59"
msgstr ""
"play 52\n"
"play 55\n"
"play 59"

#: 08.1-Lists.md:23
msgid "Let's look at other ways to represent this code."
msgstr ""
"Lass uns weitere Möglichkeiten ansehen diesen Programm-Code zu schreiben."

#: 08.1-Lists.md:25
msgid "Playing a List"
msgstr "Abspielen einer Liste"

#: 08.1-Lists.md:27
msgid ""
"One option is to place all the notes in a list: `[52, 55, 59]`. Our friendly `"
"play` function is smart enough to know how to play a list of notes. Try it:"
msgstr ""
"Eine Möglichkeit ist, alle Noten aus einer Liste heraus abzuspielen: `[52, "
"55, 59]`. Unsere freundliche Funktion `play` ist schlau genug, um zu wissen, "
"wie man eine Liste von Noten abspielt. Probiere es aus:"

#: 08.1-Lists.md:31
#, no-wrap
msgid "play [52, 55, 59]"
msgstr "play [52, 55, 59]"

#: 08.1-Lists.md:35
msgid ""
"Ooh, that's already nicer to read. Playing a list of notes doesn't stop you fr"
"om using any of the parameters as normal:"
msgstr ""
"Oh, das lässt sich schon viel besser lesen. Eine Liste von Noten abzuspielen "
"hindert dich nicht daran, alle Parameter so zu verwenden wie sonst auch:"

#: 08.1-Lists.md:38
#, no-wrap
msgid "play [52, 55, 59], amp: 0.3"
msgstr "play [52, 55, 59], amp: 0.3"

#: 08.1-Lists.md:42
msgid ""
"Of course, you can also use the traditional note names instead of the MIDI num"
"bers:"
msgstr ""
"Natürlich kannst du auch die traditionellen Notennamen anstelle der MIDI-"
"Nummern verwenden:"

#: 08.1-Lists.md:45
#, no-wrap
msgid "play [:E3, :G3, :B3]"
msgstr "play [:E3, :G3, :B3]"

#: 08.1-Lists.md:49
msgid ""
"Now those of you lucky enough to have studied some music theory might recognis"
"e that chord as *E Minor* played in the 3rd octave."
msgstr ""
"Die Glücklichen unter euch, die ein wenig Musiktheorie gelernt haben, haben "
"den Akkord vielleicht erkannt: Es ist *E-Moll*, gespielt in der 3. Oktave."

#: 08.1-Lists.md:52
msgid "Accessing a List"
msgstr "Auf Listen zugreifen"

#: 08.1-Lists.md:54
msgid ""
"Another very useful feature of a list is the ability to get information out of"
" it. This may sound a bit strange, but it's no more complicated than someone a"
"sking you to turn a book to page 23. With a list, you'd say, what's the elemen"
"t at index 23? The only strange thing is that in programming indexes usually s"
"tart at 0 not 1."
msgstr ""
"Ein weiteres sehr nützliches Merkmal von Listen ist, dass man die in ihnen "
"enthaltenen Informationen auslesen kann. Das klingt vielleicht etwas "
"eigenartig, aber es ist nicht komplizierter, als eine Person zu bitten Seite "
"23 in einem Buch aufzuschlagen. Eine Liste fragst du einfach, was das "
"Element mit der Indexnummer 23 ist. Das einzig seltsame in diesem Fall ist , "
"dass beim Programmieren Indizes üblicherweise bei 0 beginnen - nicht bei 1."

#: 08.1-Lists.md:60
msgid "With list indexes we don't count 1, 2, 3... Instead we count 0, 1, 2..."
msgstr "Listen-Indizes zählen wir also nicht 1, 2, 3 ... sondern 0, 1 ,2 ..."

#: 08.1-Lists.md:62
msgid "Let's look at this in a little more detail. Take a look at this list:"
msgstr "Lass uns das im Detail ansehen. Sieh dir diese Liste an:"

#: 08.1-Lists.md:64
#, no-wrap
msgid "[52, 55, 59]"
msgstr "[52, 55, 59]"

#: 08.1-Lists.md:68
msgid ""
"There's nothing especially scary about this. Now, what's the second element in"
" that list? Yes, of course, it's `55`. That was easy. Let's see if we can get "
"the computer to answer it for us too:"
msgstr ""
"Nichts besonders Beängstigendes. Was ist das zweite Element in dieser Liste? "
"Natürlich, es ist `55`. Das war einfach. Lass uns sehen, ob wir nicht auch "
"den Computer dazu bringen können, die Frage für uns zu beantworten:"

#: 08.1-Lists.md:72 08.4-Rings.md:12
#, no-wrap
msgid "puts [52, 55, 59][1]"
msgstr "puts [52, 55, 59][1]"

#: 08.1-Lists.md:76
msgid ""
"OK, that looks a bit weird if you've never seen anything like it before. Trust"
" me though, it's not too hard. There are three parts to the line above: the wo"
"rd `puts` , our list `52, 55, 59` and our index `[1]`. Firstly we're saying `p"
"uts` because we want Sonic Pi to print the answer out for us in the log. Next,"
" we're giving it our list, and finally our index is asking for the second elem"
"ent. We need to surround our index with square brackets and because counting s"
"tarts at `0`, the index for the second element is `1`. Look:"
msgstr ""
"OK, das sieht etwas seltsam aus, wenn du so etwas noch nie gesehen hast. "
"Aber vertrau mir, es ist nicht allzu schwer. Die Zeile oben besteht aus drei "
"Teilen: dem Wort `puts`, unserer Liste `52, 55, 59` und unserem Index `[1]`. "
"Zuerst sagen wir `puts`, weil wir wollen, dass Sonic Pi die Antwort für uns "
"ins Protokoll schreibt. Als nächstes übergeben wir unsere Liste, und am Ende "
"fragen wir mit dem Index nach dem zweiten Element in der Liste. Den Index "
"müssen wir mit eckigen Klammern umschließen, und da das Zählen mit `0` "
"beginnt, ist die Index-Zahl für das zweite Element `1`. Schau:"

#: 08.1-Lists.md:85
#, no-wrap
msgid ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"
msgstr ""
"# indexes:  0   1   2\n"
"           [52, 55, 59]"

#: 08.1-Lists.md:90
msgid ""
"Try running the code `puts [52, 55, 59][1]` and you'll see `55` pop up in the "
"log. Change the index `1` to other indexes, try longer lists and think about h"
"ow you might use a list in your next code jam. For example, what musical struc"
"tures might be represented as a series of numbers..."
msgstr ""
"Versuche mal, den Programm-Code `puts [52, 55, 59][1]` auszuführen, dann "
"wirst du sehen, dass `55` im Protokoll erscheint. Ändere den Index `1` in "
"andere Indizes, probiere längere Listen aus - und denke darüber nach, wie du "
"Listen einsetzen könntest, wenn du demnächst Code live programmieren und "
"damit jammen willst. Zum Beispiel, welche musikalischen Strukturen könnten "
"als eine Reihe von Zahlen geschrieben werden ..."

#: 08.2-Chords.md:1
msgid "8.2 Chords"
msgstr "8.2 Akkorde"

#: 08.2-Chords.md:5
msgid ""
"Sonic Pi has built-in support for chord names which will return lists. Try it "
"for yourself:"
msgstr ""
"Sonic Pi bietet dir auch Unterstützung dabei, dir den Namen eines Akkords in "
"eine Liste seiner Töne zu übersetzen. Probiere es selbst aus:"

#: 08.2-Chords.md:8
#, no-wrap
msgid "play chord(:E3, :minor)"
msgstr "play chord(:E3, :minor)"

#: 08.2-Chords.md:12
msgid ""
"Now, we're really getting somewhere. That looks a lot more pretty than the raw"
" lists (and is easier to read for other people). So what other chords does Son"
"ic Pi support? Well, a *lot*. Try some of these:"
msgstr ""
"Damit kommen wir nun wirklich weiter. Das sieht schon viel besser aus als "
"einfache Listen (und es ist für andere viel leichter zu lesen). Welche "
"Akkordauflösungen unterstützt Sonic Pi noch? Naja, *viele*. Probiere ein "
"paar hiervon aus:"

#: 08.2-Chords.md:16
msgid "`chord(:E3, :m7)`"
msgstr "`chord(:E3, :m7)`"

#: 08.2-Chords.md:17
msgid "`chord(:E3, :minor)`"
msgstr "`chord(:E3, :minor)`"

#: 08.2-Chords.md:18
msgid "`chord(:E3, :dim7)`"
msgstr "`chord(:E3, :dim7)`"

#: 08.2-Chords.md:19
msgid "`chord(:E3, :dom7)`"
msgstr "`chord(:E3, :dom7)`"

#: 08.2-Chords.md:21
msgid "Arpeggios"
msgstr "Arpeggios"

#: 08.2-Chords.md:23
msgid "We can easily turn chords into arpeggios with the function `play_pattern`:"
msgstr ""
"Wir können Akkorde leicht in Arpeggios umwandeln, indem wir die Funktion "
"`play_pattern` verwenden:"

#: 08.2-Chords.md:26
#, no-wrap
msgid "play_pattern chord(:E3, :m7)"
msgstr "play_pattern chord(:E3, :m7)"

#: 08.2-Chords.md:30
msgid ""
"Ok, that's not so fun - it played it really slowly. `play_pattern` will play e"
"ach note in the list separated with a call to `sleep 1` between each call to `"
"play`. We can use another function `play_pattern_timed` to specify our own tim"
"ings and speed things up:"
msgstr ""
"Ok, das war nicht so toll - es war wirklich langsam gespielt. `play_pattern` "
"spielt jede Note in der Liste hintereinander ab, getrennt durch Aufrufe von `"
"sleep 1`. Wir können eine andere Funktion - `play_pattern_timed` - "
"verwenden, um unsere eigenen Zeiten zu verwenden und das Ganze zu "
"beschleunigen:"

#: 08.2-Chords.md:35
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m7), 0.25"
msgstr "play_pattern_timed chord(:E3, :m7), 0.25"

#: 08.2-Chords.md:39
msgid "We can even pass a list of times which it will treat as a circle of times:"
msgstr ""
"Wir können sogar eine Liste von Zeiten übergeben, die nacheinander verwendet "
"und wiederholt werden:"

#: 08.2-Chords.md:42
#, no-wrap
msgid "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"
msgstr "play_pattern_timed chord(:E3, :m13), [0.25, 0.5]"

#: 08.2-Chords.md:46
msgid "This is the equivalent to:"
msgstr "Das bedeutet das gleiche wie:"

#: 08.2-Chords.md:48
#, no-wrap
msgid ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"
msgstr ""
"play 52\n"
"sleep 0.25\n"
"play 55\n"
"sleep 0.5\n"
"play 59\n"
"sleep 0.25\n"
"play 62\n"
"sleep 0.5\n"
"play 66\n"
"sleep 0.25\n"
"play 69\n"
"sleep 0.5\n"
"play 73"

#: 08.2-Chords.md:64
msgid "Which would you prefer to write?"
msgstr "Was würdest du lieber schreiben?"

#: 08.3-Scales.md:1
msgid "8.3 Scales"
msgstr "8.3 Skalen"

#: 08.3-Scales.md:3
msgid "Scales"
msgstr "Skalen"

#: 08.3-Scales.md:5
msgid ""
"Sonic Pi has support for a wide range of scales. How about playing a C3 major "
"scale?"
msgstr ""
"Sonic Pi unterstützt weite Auswahl von Tonleitern. Wie wäre es mit einer C3"
"-Dur-Skala?"

#: 08.3-Scales.md:8
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major), 0.125, release: 0.1"

#: 08.3-Scales.md:12
msgid "We can even ask for more octaves:"
msgstr "Wir können sie auch über mehrere Oktaven spielen lassen:"

#: 08.3-Scales.md:14
#, no-wrap
msgid "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"
msgstr "play_pattern_timed scale(:c3, :major, num_octaves: 3), 0.125, release: 0.1"

#: 08.3-Scales.md:18
msgid "How about all the notes in a pentatonic scale?"
msgstr "Und wie wäre es mit allen Noten einer pentatonischen Skala?"

#: 08.3-Scales.md:20
#, no-wrap
msgid ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"
msgstr ""
"play_pattern_timed scale(:c3, :major_pentatonic, num_octaves: 3), 0.125, relea"
"se: 0.1"

#: 08.3-Scales.md:24
msgid "Random notes"
msgstr "Zufällige Noten"

#: 08.3-Scales.md:26
msgid ""
"Chords and scales are great ways of constraining a random choice to something "
"meaningful. Have a play with this example which picks random notes from the ch"
"ord E3 minor:"
msgstr ""
"Akkorde und Skalen sind gute Methoden, um eine zufällige Auswahl auf etwas "
"Bedeutungsvolles einzugrenzen. Spiele einmal mit diesem Beispiel, das "
"zufällig Noten aus dem E-Moll-Akkord in der 3. Oktave auswählt:"

#: 08.3-Scales.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"use_synth :tb303\n"
"loop do\n"
"  play choose(chord(:E3, :minor)), release: 0.3, cutoff: rrand(60, 120)\n"
"  sleep 0.25\n"
"end"

#: 08.3-Scales.md:38
msgid "Try switching in different chord names and cutoff ranges."
msgstr "Probiere auch verschiedene Akkord-Namen und Cut-Off-Bereiche aus."

#: 08.3-Scales.md:40
msgid "Discovering Chords and Scales"
msgstr "Akkorde und Skalen entdecken"

#: 08.3-Scales.md:42
msgid ""
"To find out which scales and chords are supported by Sonic Pi simply click the"
" Lang button on the far left of this tutorial and then choose either chord or "
"scale in the API list. In the information in the main panel, scroll down until"
" you see a long list of chords or scales (depending on which you're looking at"
")."
msgstr ""
"Um herauszufinden, welche Skalen und Akkorde Sonic Pi unterstützt, klicke "
"einfach auf die `Codes`-Schaltfläche unten links in diesem Tutorial und "
"wähle entweder chord (Akkord) oder scale (Skala, Tonleiter) aus der API-"
"Liste. Im Info-Bereich im Hauptfenster scrolle nach unten, bist du eine "
"lange Liste von Akkorden oder Skalen findest (je nach dem auf welches "
"Fenster du gerade schaust)."

#: 08.3-Scales.md:48
msgid "Have fun and remember: there are no mistakes, only opportunities."
msgstr "Viel Spaß und nicht vergessen: Es gibt keine Fehler, nur Möglichkeiten."

#: 08.4-Rings.md:1
msgid "8.4 Rings"
msgstr "8.4 Ringe"

#: 08.4-Rings.md:3 A.11-beat-tracking.md:62
msgid "Rings"
msgstr "Ringe"

#: 08.4-Rings.md:5
msgid ""
"An interesting spin on standard lists are rings. If you know some programming,"
" you might have come across ring buffers or ring arrays. Here, we'll just go f"
"or ring - it's short and simple."
msgstr ""
"Eine interessanter Dreh bei einfachen Listen sind Ringe. Wenn du ein "
"bisschen Programmiererfahrung hast, bist du vielleicht schon einmal auf Ring-"
"Buffer (Ringspeicher) oder Ring-Arrays gestoßen. Wir nennen sie hier - kurz "
"und einfach - Ring."

#: 08.4-Rings.md:9
msgid ""
"In the previous section on lists we saw how we could fetch elements out of the"
"m by using the indexing mechanism:"
msgstr ""
"Im vorherigen Abschnitt über Listen haben wir gesehen, wie wir über den "
"Index-Mechanismus Elemente aus einer Liste holen können:"

#: 08.4-Rings.md:16
msgid ""
"Now, what happens if you want index `100`? Well, there's clearly no element at"
" index 100 as the list has only three elements in it. So Sonic Pi will return "
"you `nil` which means nothing."
msgstr ""
"Was passiert jetzt wohl, wenn du den Index `100` abfragen willst? Nun, es "
"gibt offensichtlich kein Element mit dem Index 100, da die Liste nur drei "
"Elemente enthält. Also gibt Sonic Pi `nil` zurück, das steht für 'nichts'."

#: 08.4-Rings.md:20
msgid ""
"However, consider you have a counter such as the current beat which continuall"
"y increases. Let's create our counter and our list:"
msgstr ""
"Stell dir jedoch vor, du hast einen Zähler, wie den aktuellen Beat (Schlag), "
"der kontinuierlich wächst. Lass uns damit unseren Zähler und unsere Liste "
"anlegen:"

#: 08.4-Rings.md:23
#, no-wrap
msgid ""
"counter = 0\n"
"notes = [52, 55, 59]"
msgstr ""
"counter = 0\n"
"notes = [52, 55, 59]"

#: 08.4-Rings.md:28
msgid "We can now use our counter to access a note in our list:"
msgstr ""
"Wir können jetzt unseren Zähler verwenden, um auf eine Note in unserer Liste "
"zuzugreifen:"

#: 08.4-Rings.md:30
#, no-wrap
msgid "puts notes[counter]"
msgstr "puts notes[counter]"

#: 08.4-Rings.md:34
msgid "Great, we got `52`. Now, let's increment our counter and get another note:"
msgstr ""
"Super, da kam `52` heraus. Nun Lass uns den Zähler erhöhen (increment) und "
"auf eine andere Note zugreifen:"

#: 08.4-Rings.md:37
#, no-wrap
msgid ""
"counter = (inc counter)\n"
"puts notes[counter]"
msgstr ""
"counter = (inc counter)\n"
"puts notes[counter]"

#: 08.4-Rings.md:42
msgid ""
"Super, we now get `55` and if we do it again we get `59`. However, if we do it"
" again, we'll run out of numbers in our list and get `nil`. What if we wanted "
"to just loop back round and start at the beginning of the list again? This is "
"what rings are for."
msgstr ""
"Gut, jetzt kommt `55` und beim folgenden Mal `59` heraus. Wenn wir das "
"jedoch noch einmal machen, werden wir keine Zahlen mehr in unserer Liste "
"haben, und wir bekommen `nil` zurück. Was wäre, wenn wir in diesem Fall "
"einfach wieder vom Anfang der Liste an zählen wollten? Genau dafür gibt es "
"Ringe."

#: 08.4-Rings.md:47
msgid "Creating Rings"
msgstr "Ringe erzeugen"

#: 08.4-Rings.md:49
msgid ""
"We can create rings one of two ways. Either we use the `ring` function with th"
"e elements of the ring as parameters:"
msgstr ""
"Wir können Ringe auf zwei Arten erzeugen. Entweder wir nutzen die `ring`-"
"Funktion, mit den gewünschten Elementen aus dem Rings als Parameter:"

#: 08.4-Rings.md:52
#, no-wrap
msgid "(ring 52, 55, 59)"
msgstr "(ring 52, 55, 59)"

#: 08.4-Rings.md:56
msgid ""
"Or we can take a normal list and convert it to a ring by sending it the `.ring"
"` message:"
msgstr ""
"Oder wir nehmen eine normale Liste und wandeln sie mit der Nachricht `.ring` "
"in einen Ring um:"

#: 08.4-Rings.md:59
#, no-wrap
msgid "[52, 55, 59].ring"
msgstr "[52, 55, 59].ring"

#: 08.4-Rings.md:63
msgid "Indexing Rings"
msgstr "Ringe indizieren"

#: 08.4-Rings.md:65
msgid ""
"Once we have a ring, you can use it in exactly the same way you would use a no"
"rmal list with the exception that you can use indexes that are negative or lar"
"ger than the size of the ring and they'll wrap round to always point at one of"
" the ring's elements:"
msgstr ""
"Sobald du einen Ring hast, kannst du ihn genauso verwenden wie du eine "
"normale Liste verwenden würdest, mit einer Ausnahme: Du kannst darauf auch "
"solche Indizes verwenden, die negativ oder größer als der Ringinhalt sind - "
"diese machen dann eine Schleife wieder zum Anfang, um immer auf ein Element "
"des Rings zu verweisen:"

#: 08.4-Rings.md:70
#, no-wrap
msgid ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"
msgstr ""
"(ring 52, 55, 59)[0] #=> 52\n"
"(ring 52, 55, 59)[1] #=> 55\n"
"(ring 52, 55, 59)[2] #=> 59\n"
"(ring 52, 55, 59)[3] #=> 52\n"
"(ring 52, 55, 59)[-1] #=> 59"

#: 08.4-Rings.md:78
msgid "Using Rings"
msgstr "Ringe verwenden"

#: 08.4-Rings.md:80
msgid ""
"Let's say we're using a variable to represent the current beat number. We can "
"use this as an index into our ring to fetch notes to play, or release times or"
" anything useful we've stored in our ring regardless of the beat number we're "
"currently on."
msgstr ""
"Lass uns annehmen, wir verwenden eine Variable, die stets die aktuelle "
"Schlagzahl abbildet. Wir können diese Variable in unserem Ring als Index "
"verwenden, um so Noten, Release-Zeiten oder andere sinnvolle Dinge "
"abzurufen, unabhängig davon bei welcher Schlagzahl wir uns gerade befinden."

#: 08.4-Rings.md:85
msgid "Scales and Chords are Rings"
msgstr "Skalen und Akkorde sind Ringe"

#: 08.4-Rings.md:87
msgid ""
"A useful thing to know is that the lists returned by `scale` and `chord` are a"
"lso rings and allow you to access them with arbitrary indexes."
msgstr ""
"Es ist nützlich zu wissen, das die Listen, die von `scale` und `chord` "
"zurückgegeben werden, auch Ringe sind und du so mit beliebigen Indizes auf "
"sie zugreifen kannst."

#: 08.4-Rings.md:90
msgid "Ring Constructors"
msgstr "Ring-Konstruktoren"

#: 08.4-Rings.md:92
msgid ""
"In addition to `ring` there are a number of other functions which will constru"
"ct a ring for us."
msgstr ""
"Zusätzlich zu `ring` gibt es eine Anzahl weiterer Funktionen, die Ringe für "
"uns erzeugen."

#: 08.4-Rings.md:95
msgid "`range` invites you specify a starting point, end point and step size."
msgstr ""
"`range` lädt dich dazu ein, einen Startpunkt, einen Endpunkt und eine "
"Schrittgröße festzulegen."

#: 08.4-Rings.md:96
msgid "`bools` allows you to use `1`s and `0`s to succinctly represent booleans."
msgstr ""
"`bools` erlaubt dir `1`en und `0`en als Kurzform für boolesche Werte zu "
"nutzen."

#: 08.4-Rings.md:97
msgid "`knit` allows you to knit a sequence of repeated values."
msgstr ""
"`knit` erlaubt dir, eine Abfolge zu wiederholender Werte zu stricken (to "
"knit)."

#: 08.4-Rings.md:98
msgid "`spread` creates a ring of bools with a Euclidean distribution."
msgstr ""
"`spread` erzeugt einen Ring boolescher Werte in euklidischer Verteilung."

#: 08.4-Rings.md:100
msgid "Take a look at their respective documentation for more information."
msgstr ""
"Für weitere Information sieh dir die Dokumentation zur jeweiligen Funktion "
"an."

#: 08.5-Ring-Chains.md:1
msgid "8.5 Ring Chains"
msgstr "8.5 Ring-Ketten"

#: 08.5-Ring-Chains.md:3
msgid "Ring Chains"
msgstr "Ring-Ketten"

#: 08.5-Ring-Chains.md:5
msgid ""
"In addition to the constructors such as `range` and `spread` another way of cr"
"eating new rings is to manipulate existing rings."
msgstr ""
"Neben der Verwendung von Konstruktoren wie `range` und `spread` können wir "
"neue Ringe auch dadurch erzeugen, das wir bereits existierende Ringe "
"verändern."

#: 08.5-Ring-Chains.md:9
msgid "Chain Commands"
msgstr "Befehle verketten"

#: 08.5-Ring-Chains.md:11
msgid "To explore this, take a simple ring:"
msgstr "Um dies auszuprobieren, verwende einen einfachen Ring:"

#: 08.5-Ring-Chains.md:13
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50)"
msgstr "(ring 10, 20, 30, 40, 50)"

#: 08.5-Ring-Chains.md:17
msgid ""
"What if we wanted it backwards? Well we'd use the chain command `.reverse` to "
"take the ring and turn it around:"
msgstr ""
"Was, wenn wir diese Reihe umkehren wollen? Nun, wir verwenden den "
"Verkettungsbefehl `.reverse`, um den Ring umzudrehen:"

#: 08.5-Ring-Chains.md:20
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"
msgstr "(ring 10, 20, 30, 40, 50).reverse  #=> (ring 50, 40, 30, 20, 10)"

#: 08.5-Ring-Chains.md:24
msgid "Now, what if we wanted the first three values from the ring?"
msgstr "Ok, und wenn wir nur die ersten 3 Werte aus dem Ring haben wollten?"

#: 08.5-Ring-Chains.md:26
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"
msgstr "(ring 10, 20, 30, 40, 50).take(3)  #=> (ring 10, 20, 30)"

#: 08.5-Ring-Chains.md:30
msgid "Finally, what if we wanted to shuffle the ring?"
msgstr "Und schließlich, wenn wir den Ring mischen wollten?"

#: 08.5-Ring-Chains.md:32
#, no-wrap
msgid "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"
msgstr "(ring 10, 20, 30, 40, 50).shuffle  #=> (ring 40, 30, 10, 50, 20)"

#: 08.5-Ring-Chains.md:36
msgid "Multiple Chains"
msgstr "Mehrfache Ketten"

#: 08.5-Ring-Chains.md:38
msgid ""
"This is already a powerful way of creating new rings. However, the *real* powe"
"r comes when you chain a few of these commands together."
msgstr ""
"Auf diese Art haben wir bereits mächtige Möglichkeiten neue Ringe zu "
"erzeugen. Noch *mächtiger* werden sie allerdings, wenn du mehrere dieser "
"Befehle verkettest."

#: 08.5-Ring-Chains.md:41
msgid "How about shuffling the ring, dropping 1 element and then taking the next 3?"
msgstr ""
"Wie wäre es den Ring zu mischen, das erste Element wegzulassen, und dann die "
"3 folgenden Elemente zu verwenden?"

#: 08.5-Ring-Chains.md:43
msgid "Let's take this in stages:"
msgstr "Lass uns das Schritt für Schritt durchgehen:"

#: 08.5-Ring-Chains.md:45
msgid "`(ring 10, 20, 30, 40, 50)` - our initial ring"
msgstr "`(ring 10, 20, 30, 40, 50)` - dein anfänglicher Ring"

#: 08.5-Ring-Chains.md:46
msgid "`(ring 10, 20, 30, 40, 50).shuffle` - shuffles - `(ring 40, 30, 10, 50, 20)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle` - mischt ihn zu - `(ring 40, 30, 10, 50, "
"20)`"

#: 08.5-Ring-Chains.md:47
msgid "`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - drop 1 - `(ring 30, 10, 50, 20)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1)` - mischt und lässt dann das "
"erste Element weg - `(ring 30, 10, 50, 20)`"

#: 08.5-Ring-Chains.md:48
msgid ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - take 3 - `(ring 30, 10, "
"50)`"
msgstr ""
"`(ring 10, 20, 30, 40, 50).shuffle.drop(1).take(3)` - mischt, lässt das "
"erste Element weg und nimmt 3 - `(ring 30, 10, 50)`"

#: 08.5-Ring-Chains.md:50
msgid ""
"Can you see how we can just create a long chain of these methods by just *stic"
"king them together*. We can combine these in any order we want creating an ext"
"remely rich and powerful way of generating new rings from existing ones."
msgstr ""
"Kannst du sehen, wie wir eine lange Kette dieser Methoden einfach dadurch "
"erzeugen können, dass wir sie *aneinander kleben*? Wir können das in jeder "
"beliebigen Reihenfolge tun, und damit haben wir einen *extrem mächtigen* "
"Weg, um neue Ringe aus bereits bestehenden zu erzeugen."

#: 08.5-Ring-Chains.md:55
msgid "Immutability"
msgstr "Unveränderlichkeit"

#: 08.5-Ring-Chains.md:57
msgid ""
"These rings have a powerful and important property. They are immutable which m"
"eans that they can not change. This means that the chaining methods described "
"in this section *do not change rings* rather they *create new rings*. This mea"
"ns you're free to share rings across threads and start chaining them within a "
"thread knowing you won't be affecting any other thread using the same ring."
msgstr ""
"Diese Ringe haben eine mächtige und wichtige Eigenschaft. Sie sind "
"unveränderlich (immutable) - sie können nicht verändert werden. Das "
"bedeutet, dass die Verkettungsmethoden, von denen wir in diesem Abschnitt "
"sprechen, *die Ringe nicht verändern* sondern eher *neue Ringe erzeugen*. "
"Das bedeutet, du kannst Ringe über verschiedene Threads hinweg teilen und "
"anfangen sie innerhalb eines Threads zu verketten, ohne dabei irgend einen "
"anderen Thread zu verändern, der auf den gleichen Ring zugreift."

#: 08.5-Ring-Chains.md:64
msgid "Available Chain Methods"
msgstr "Verfügbare Verkettungsmethoden"

#: 08.5-Ring-Chains.md:66
msgid "Here's a list of the available chain methods for you to play with:"
msgstr ""
"Dies ist eine Liste der Verkettungsmethoden, mit denen du spielen kannst:"

#: 08.5-Ring-Chains.md:68
msgid "`.reverse` - returns a reversed version of the ring"
msgstr "`.reverse` - gibt eine umgedrehte Version des Ringes zurück"

#: 08.5-Ring-Chains.md:69
msgid "`.sort` - creates a sorted version of the ring"
msgstr "`.sort` - erzeugt eine sortierte Version des Ringes"

#: 08.5-Ring-Chains.md:70
msgid "`.shuffle` - creates a shuffled version of the ring"
msgstr "`.shuffle` - erzeugt eine gemischte Version des Ringes"

#: 08.5-Ring-Chains.md:71
msgid "`.pick` - returns a ring with the results of calling `.choose` once"
msgstr "`.pick` - liefert einen Ring mit den Resultaten wie 1 mal `.choose`"

#: 08.5-Ring-Chains.md:72
msgid "`.pick(3)` - returns a ring with the results of calling `.choose` 3 times"
msgstr ""
"`.pick(3)` - liefert einen Ring mit den selben Resultaten wie 3 mal `.choose`"

#: 08.5-Ring-Chains.md:73
msgid "`.take(5)` - returns a new ring containing only the first 5 elements"
msgstr "`.take(5)` - liefert einen Ring, der nur die ersten 5 Elemente enthält"

#: 08.5-Ring-Chains.md:74
msgid "`.drop(3)` - returns a new ring with everything but the first 3 elements"
msgstr ""
"`.drop(3)` - liefert einen Ring, der alles außer den ersten 3 Elementen "
"enthält"

#: 08.5-Ring-Chains.md:75
msgid "`.butlast` - returns a new ring with the last element missing"
msgstr "`.butlast` - liefert einen Ring ohne das letzte Element"

#: 08.5-Ring-Chains.md:76
msgid "`.drop_last(3)` - returns a new ring with the last 3 elements missing"
msgstr "`.drop_last(3)` - liefert einen Ring ohne die letzten 3 Elemente"

#: 08.5-Ring-Chains.md:77
msgid "`.take_last(6)`- returns a new ring with only the last 6 elements"
msgstr ""
"`.take_last(6)`- liefert einen Ring, der nur die letzten 6 Elemente enthält"

#: 08.5-Ring-Chains.md:78
msgid "`.stretch(2)` - repeats each element in the ring twice"
msgstr "`.stretch(2)` - wiederholt jedes Element im Ring zweimal"

#: 08.5-Ring-Chains.md:79
msgid "`.repeat(3)` - repeats the entire ring 3 times"
msgstr "`.repeat(3)` - wiederholt den Ring als Ganzes 3 mal"

#: 08.5-Ring-Chains.md:80
msgid "`.mirror` - adds the ring to a reversed version of itself"
msgstr "`.mirror` - hängt eine umgekehrte Version des Rings an den Ring an"

#: 08.5-Ring-Chains.md:81
msgid "`.reflect` - same as mirror but doesn't duplicate middle value"
msgstr "`.reflect` - wie `.mirror`, verdoppelt aber nicht den mittleren Wert"

#: 08.5-Ring-Chains.md:82
msgid ""
"`.scale(2)` - returns a new ring with all elements multiplied by 2 (assumes ri"
"ng contains numbers only)"
msgstr ""
"`.scale(2)` - liefert einen neuen Ring mit allen Elementen multipliziert mit "
"2 (setzt voraus, dass der Ring nur Zahlen enthält)"

#: 08.5-Ring-Chains.md:84
msgid ""
"Of course, those chain methods that take numbers can take other numbers too! S"
"o feel free to call `.drop(5)` instead of `.drop(3)` if you want to drop the f"
"irst 5 elements."
msgstr ""
"Natürlich können solche Verkettungsmethoden, die Zahlenparameter annehmen "
"auch andere Werte annehmen. So kannst du anstelle von `.drop(3)` z. B. auch `"
".drop(5)` aufrufen, wenn du die ersten fünf Elemente wegfallen lassen willst."

#: 09-Live-Coding.md:1
msgid "9 Live Coding"
msgstr "9 Live-Coding"

#: 09-Live-Coding.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to write a"
"nd modify code live to make music, just like you might perform live with a gui"
"tar. One advantage of this approach is to give you more feedback whilst compos"
"ing (get a simple loop running and keep tweaking it till it sounds just perfec"
"t). However, the main advantage is that you can take Sonic Pi on stage and gig"
" with it."
msgstr ""
"Einer der aufregendsten Aspekte von Sonic Pi ist, dass es dir ermöglicht den "
"Programm-Code für deine Musik live zu schreiben und zu verändern, ganz so "
"wie wenn du mit einer Gitarre live auftreten würdest. Ein Vorteil dieses "
"Ansatzes ist, dass du mehr Rückmeldung erhältst, noch während du komponierst "
"- bringe eine einfache Schleife (Loop) an den Start und bearbeite sie so "
"lange, bis sie perfekt klingt. Wie auch immer, der eigentliche Vorteil "
"besteht darin, dass du Sonic Pi mit auf die Bühne nehmen und damit einen "
"Auftritt absolvieren kannst."

#: 09-Live-Coding.md:12
msgid ""
"In this section we'll cover the fundamentals of turning your static code compo"
"sitions into dynamic performances."
msgstr ""
"In diesem Abschnitt behandeln wir die Grundlagen davon, wie du deine "
"statischen Programm-Code-Kompositionen in dynamische Performances verwandeln "
"kannst."

#: 09-Live-Coding.md:15
msgid "Hold on to your seats..."
msgstr "Halt dich fest ..."

#: 09.1-Live-Coding-Fundamentals.md:1
msgid "9.1 Live Coding Fundamentals"
msgstr "9.1 Live-Coding: Grundlagen"

#: 09.1-Live-Coding-Fundamentals.md:5
msgid ""
"Now we've learned enough to really start having some fun. In this section we'l"
"l draw from all the previous sections and show you how you can start making yo"
"ur music compositions live and turning them into a performance. For that we'll"
" need 3 main ingredients:"
msgstr ""
"Inzwischen haben wir genug gelernt, um tatsächlich mit dem Spaß anzufangen. "
"In diesem Abschnitt verwenden wir alles, was wir in den vorherigen "
"Abschnitten behandelt haben und zeigen dir, wie du damit beginnen kannst, "
"deine Musik live zu komponieren und in eine Performance zu verwandeln. Dazu "
"benötigen wir 3 wesentliche Zutaten:"

#: 09.1-Live-Coding-Fundamentals.md:10
msgid "An ability to write code that makes sounds - CHECK!"
msgstr "Die Fähigkeit Programm-Code zu schreiben, der Klänge erzeugt - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:11
msgid "An ability to write functions - CHECK!"
msgstr "Die Fähigkeit Funktionen zu schreiben - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:12
msgid "An ability to use (named) threads - CHECK!"
msgstr "Die Fähigkeit Threads (mit Namen) zu verwenden - CHECK!"

#: 09.1-Live-Coding-Fundamentals.md:14
msgid ""
"Alrighty, let's get started. Let's live code our first sounds. We first need a"
" function containing the code we want to play. Let's start simple. We also wan"
"t to loop calls to that function in a thread:"
msgstr ""
"Ok, lass uns loslegen. Lass uns unsere ersten Klänge live programmieren. "
"Zuerst brauchen wir eine Funktion, die den abzuspielenden Code enthält. Lass "
"uns einfach beginnen. Außerdem wollen wir Aufrufe an diese Funktion in einer "
"Schleife in einem Thread ausführen:"

#: 09.1-Live-Coding-Fundamentals.md:18
#, no-wrap
msgid ""
"define :my_sound do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_sound\n"
"  end\n"
"end"
msgstr ""
"define :my_sound do\n"
"  play 50\n"
"  sleep 1\n"
"end\n"
"in_thread(name: :looper) do\n"
"  loop do\n"
"    my_sound\n"
"  end\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:31
msgid ""
"If that looks a little too complicated to you, go back and re-read the section"
"s on functions and threads. It's not too complicated if you've already wrapped"
" your head around these things."
msgstr ""
"Wenn dir das ein bisschen zu kompliziert vorkommt, lies bitte noch einmal "
"die Abschnitte über Funktionen und Threads durch. Es ist nicht mehr so "
"kompliziert, wenn du sie erstmal verstanden hast."

#: 09.1-Live-Coding-Fundamentals.md:35
msgid ""
"What we have here is a function definition which just plays note 50 and sleeps"
" for a beat. We then define a named thread called `:looper` which just loops a"
"round calling `my_sound` repeatedly."
msgstr ""
"Was wir hier haben, ist die Definition einer Funktion, welche einfach die "
"Note 50 spielt und danach einen Schlag lang schläft. Dann definieren wir "
"einen Thread (mit Namen) - wir nennen ihn `:looper`- und er ruft in einer "
"Schleife `my_sound` auf."

#: 09.1-Live-Coding-Fundamentals.md:39
msgid "If you run this code, you'll hear note 50 repeating again and again..."
msgstr ""
"Wenn du diesen Code ausführst, wirst du immer und immer wieder die Note 50 "
"hören..."

#: 09.1-Live-Coding-Fundamentals.md:41
msgid "Changing it up"
msgstr "Einen Gang hochschalten"

#: 09.1-Live-Coding-Fundamentals.md:43
msgid ""
"Now, this is where the fun starts. Whilst the code is *still running* change 5"
"0 to another number, say 55, then press the Run button again. Woah! It changed"
"! Live!"
msgstr ""
"Nun, hier fängt der Spaß an. Während der Code *noch läuft*, ändere die 50 in "
"eine andere Zahl, sagen wir 55, und klicke nochmals auf `Ausführen`. Wow! Es "
"hat sich geändert! Live!"

#: 09.1-Live-Coding-Fundamentals.md:47
msgid ""
"It didn't add a new layer because we're using named threads which only allow o"
"ne thread for each name. Also, the sound changed because we *redefined* the fu"
"nction. We gave `:my_sound` a new definition. When the `:looper` thread looped"
" around it simply called the new definition."
msgstr ""
"Es hat keine neue Ebene hinzugefügt, da wir einen benannten Thread verwendet "
"haben und es für jeden Namen nur einen Thread geben kann. Der Klang hat sich "
"geändert, weil wir die Funktion *umdefiniert* haben. Wir haben also "
"`:my_sound` eine neue Definition gegeben. Während im`:looper`-Thread die "
"Schleife lief, hat er darin einfach die neue Definition aufgerufen."

#: 09.1-Live-Coding-Fundamentals.md:52
msgid ""
"Try changing it again, change the note, change the sleep time. How about addin"
"g a `use_synth` statement? For example, change it to:"
msgstr ""
"Verändere die Definition der Funktion noch einmal, ändere die Note, ändere "
"die Pausenzeit. Und wie wäre es eine `use_synth`-Aussage hinzuzufügen? Z. B. "
"ändere die Funktion in:"

#: 09.1-Live-Coding-Fundamentals.md:55
#, no-wrap
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play 50, release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:63
msgid ""
"Now it sounds pretty interesting, but we can spice it up further. Instead of p"
"laying the same note again and again, try playing a chord:"
msgstr ""
"Jetzt klingt es schon ganz interessant, wir können es aber noch ein bisschen "
"interessanter machen. Anstatt immer wieder die gleiche Note zu spielen, "
"versuche einen Akkord zu spielen:"

#: 09.1-Live-Coding-Fundamentals.md:67
#, no-wrap
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play chord(:e3, :minor), release: 0.3\n"
"  sleep 0.5\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:75
msgid "How about playing random notes from the chord:"
msgstr "Und wie wäre es damit, zufällige Töne des Akkords zu spielen:"

#: 09.1-Live-Coding-Fundamentals.md:77
#, no-wrap
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.3\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:85
msgid "Or using a random cutoff value:"
msgstr "Oder einen zufälligen Cut-Off-Wert:"

#: 09.1-Live-Coding-Fundamentals.md:87
#, no-wrap
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:95
msgid "Finally, add some drums:"
msgstr "Und schließlich, füge etwas Schlagzeug hinzu:"

#: 09.1-Live-Coding-Fundamentals.md:97
#, no-wrap
msgid ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"
msgstr ""
"define :my_sound do\n"
"  use_synth :tb303\n"
"  sample :drum_bass_hard, rate: rrand(0.5, 2)\n"
"  play choose(chord(:e3, :minor)), release: 0.2, cutoff: rrand(60, 130)\n"
"  sleep 0.25\n"
"end"

#: 09.1-Live-Coding-Fundamentals.md:106
msgid "Now things are getting exciting!"
msgstr "Jetzt wird die Sache langsam aufregend!"

#: 09.1-Live-Coding-Fundamentals.md:108
msgid ""
"However, before you jump up and start live coding with functions and threads, "
"stop what you're doing and read the next section on `live_loop` which will cha"
"nge the way you code in Sonic Pi forever..."
msgstr ""
"Wie auch immer, bevor du jetzt aufspringst und anfängst mit Funktionen und "
"Threads live zu programmieren, hör mit dem was du gerade machst auf und lies "
"den nächsten Abschnitt über `live_loop` - das wird die Art wie du in Sonic "
"Pi programmierst, für immer verändern ..."

#: 09.2-Live-Loops.md:1
msgid "9.2 Live Loops"
msgstr "9.2 Live-Loops"

#: 09.2-Live-Loops.md:3
msgid "Live Loops"
msgstr "Live-Loops"

#: 09.2-Live-Loops.md:5
msgid ""
"Ok, so this section of the tutorial is the real gem. If you only read one sect"
"ion, it should be this one. If you read the previous section on Live Coding Fu"
"ndamentals, `live_loop` is a simple way of doing exactly that but without havi"
"ng to write so much."
msgstr ""
"Ok, dieser Abschnitt des Tutorials ist ein echtes Juwel. Wenn du nur einen "
"einzigen Abschnitt lesen würdest, sollte es dieser sein. Wenn du den letzten "
"Abschnitt über die Grundlagen von Live-Coding gelesen hast - `live_loop` ist "
"eine einfache Art genau das gleiche zu tun, aber ohne dass du so viel "
"schreiben musst."

#: 09.2-Live-Loops.md:10
msgid ""
"If you didn't read the previous section, `live_loop` is the best way to jam wi"
"th Sonic Pi."
msgstr ""
"Falls du den letzten Abschnitt nicht gelesen hast - `live_loop` ist der "
"beste Weg, um mit Sonic Pi zu jammen."

#: 09.2-Live-Loops.md:13
msgid "Let's play. Write the following in a new buffer:"
msgstr "Lass uns spielen. Schreibe Folgendes in einen neuen Puffer:"

#: 09.2-Live-Loops.md:15
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 60\n"
"  sleep 1\n"
"end"

#: 09.2-Live-Loops.md:22
msgid ""
"Now press the Run button. You hear a basic beep every beat. Nothing fun there."
" However, don't press Stop just yet. Change the `60` to `65` and press Run aga"
"in."
msgstr ""
"Jetzt klicke auf `Ausführen`. Du hörst mit jedem Schlag ein einfaches "
"Piepen. Nichts unterhaltsames daran. Klicke aber noch nicht auf `Stopp`. "
"Ändere die `60` in `65` und klicke wieder `Ausführen`."

#: 09.2-Live-Loops.md:26
msgid "Woah! It changed *automatically* without missing a beat. This is live coding."
msgstr ""
"Wow! Es hat sich *automatisch*geändert ohne einen Schlag auszulassen. Das "
"ist Live-Coding."

#: 09.2-Live-Loops.md:28
msgid ""
"Why not change it to be more bass like? Just update your code whilst it's play"
"ing:"
msgstr ""
"Warum es nicht ein wenig mehr nach Bass klingen lassen? Aktualisiere deinen "
"Programm-Code, während er abläuft:"

#: 09.2-Live-Loops.md:30
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:38
msgid "Then hit Run."
msgstr "Dann klicke auf `Ausführen`."

#: 09.2-Live-Loops.md:40
msgid "Let's make the cutoff move around:"
msgstr "Lassen wir den Cut-Off sich ein wenig bewegen:"

#: 09.2-Live-Loops.md:42
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:50
msgid "Hit Run again."
msgstr "Klicke wieder auf `Ausführen`."

#: 09.2-Live-Loops.md:52
msgid "Add some drums:"
msgstr "Füge etwas Schlagzeug hinzu:"

#: 09.2-Live-Loops.md:54
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :e1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:63
msgid "Change the note from `e1` to `c1`:"
msgstr "Wechsle die Note von `e1` zu `c1`:"

#: 09.2-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  sample :loop_garzul\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end"

#: 09.2-Live-Loops.md:74
msgid "Now stop listening to me and play around yourself! Have fun!"
msgstr "Nun höre nicht weiter mir zu - spiele selbst herum! Viel Spaß!"

#: 09.3-Multiple-Live-Loops.md:1
msgid "9.3 Multiple Live Loops"
msgstr "9.3 Mehrere Live-Loops"

#: 09.3-Multiple-Live-Loops.md:3
msgid "Multiple Live Loops"
msgstr "Mehrere Live-Loops"

#: 09.3-Multiple-Live-Loops.md:5
msgid "Consider the following live loop:"
msgstr "Sieh dir den folgenden Live-Loop an:"

#: 09.3-Multiple-Live-Loops.md:7
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play 50\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:14
msgid ""
"You may have wondered why it needs the name `:foo`. This name is important bec"
"ause it signifies that this live loop is different from all other live loops."
msgstr ""
"Vielleicht fragst du dich, warum er den Namen `:foo` braucht. Dieser Name "
"ist wichtig, weil er bedeutet, dass sich dieser Live-Loop von allen anderen "
"Live-Loops unterscheidet."

#: 09.3-Multiple-Live-Loops.md:18
msgid "*There can never be two live loops running with the same name*."
msgstr ""
"*Es kann nie zwei Live-Loops mit dem selben Namen geben, die zur gleichen "
"Zeit laufen*."

#: 09.3-Multiple-Live-Loops.md:20
msgid ""
"This means that if we want multiple concurrently running live loops, we just n"
"eed to give them different names:"
msgstr ""
"Das bedeutet, wenn wir mehrere Live-Loops gleichzeitig laufen lassen wollen, "
"müssen wir ihnen einfach nur verschiedene Namen geben:"

#: 09.3-Multiple-Live-Loops.md:23
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  use_synth :prophet\n"
"  play :c1, release: 8, cutoff: rrand(70, 130)\n"
"  sleep 8\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: 09.3-Multiple-Live-Loops.md:36
msgid ""
"You can now update and change each live loop independently and it all just wor"
"ks."
msgstr ""
"Du kannst jetzt beide Live-Loops unabhängig voneinander verändern, und alles "
"funktioniert - einfach so."

#: 09.3-Multiple-Live-Loops.md:39
msgid "Syncing Live Loops"
msgstr "Live-Loops synchronisieren"

#: 09.3-Multiple-Live-Loops.md:41
msgid ""
"One thing you might have already noticed is that live loops work automatically"
" with the thread cue mechanism we explored previously. Every time the live loo"
"p loops, it generates a new `cue` event with the name of the live loop. We can"
" therefore `sync` on these cues to ensure our loops are in sync without having"
" to stop anything."
msgstr ""
"Du hast vielleicht schon bemerkt, dass Live-Loops automatisch mit dem Thread-"
"Cue-Mechanismus arbeiten, den wir uns bereits angeschaut haben. Mit jedem "
"Mal wenn der Live-Loop einen Durchlauf beginnt, generiert er ein neues Cue-"
"Ereignis, das den Namen des Live-Loops erhält. Wir können daher mit diesen "
"Cues in `sync` bleiben und so sicherstellen, dass unsere Schleifen sich "
"synchronisieren, ohne dass wir etwas anhalten müssen."

#: 09.3-Multiple-Live-Loops.md:47
msgid "Consider this badly synced code:"
msgstr "Schau dir diesen schlecht synchronisierten Code an:"

#: 09.3-Multiple-Live-Loops.md:49
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.4\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:61
msgid ""
"Let's see if we can fix the timing and sync without stopping it. First, let's "
"fix the `:foo` loop to make the sleep a factor of 1 - something like `0.5` wil"
"l do:"
msgstr ""
"Lass uns versuchen das Timing zu korrigieren ohne den Live-Loop zu stoppen. "
"Zuerst lass uns den Live-Loop `:foo`reparieren, indem wir seine Sleep-Zeit "
"zu einem Divisor von 1 machen - so etwas wie `0.5`wird z. B. funktionieren:"

#: 09.3-Multiple-Live-Loops.md:65
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:77
msgid ""
"We're not quite finished yet though - you'll notice that the beats don't quite"
" line up correctly. This is because the loops are *out of phase*. Let's fix th"
"at by syncing one to the other:"
msgstr ""
"Damit sind wir aber noch nicht ganz fertig - du wirst bemerken, dass die "
"Beats nicht so recht zusammenpassen. Der Grund dafür ist, dass die Live-"
"Loops *out of phase* sind. Lass uns das reparieren, indem wir den einen mit "
"dem anderen synchronisieren:"

#: 09.3-Multiple-Live-Loops.md:81
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :foo do\n"
"  play :e4, release: 0.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :bar do\n"
"  sync :foo\n"
"  sample :bd_haus\n"
"  sleep 1\n"
"end"

#: 09.3-Multiple-Live-Loops.md:94
msgid "Wow, everything is now perfectly in time - all without stopping."
msgstr ""
"Toll, jetzt passt das Timing perfekt - ohne dass wir die Live-Loops anhalten "
"mussten."

#: 09.3-Multiple-Live-Loops.md:96
msgid "Now, go forth and live code with live loops!"
msgstr "Jetzt leg los und programmiere live mit Live-Loops!"

#: 09.4-Ticking.md:1
msgid "9.4 Ticking"
msgstr "9.4 Ticks verwenden"

#: 09.4-Ticking.md:3
msgid "Ticking"
msgstr "Ticks verwenden"

#: 09.4-Ticking.md:5
msgid ""
"Something you'll likely find yourself doing a lot when live coding is looping "
"through rings. You'll be putting notes into rings for melodies, sleeps for rhy"
"thms, chord progressions, timbral variations, etc. etc."
msgstr ""
"Du wirst sehen, dass du beim Live-Coding sehr häufig Ringe in deinen Live-"
"Loops verwenden wirst. Du wirst Noten in Ringen setzen für Melodien, Pausen "
"für Rhythmen, und du wirst aus ihnen Akkordfolgen, Klangvariatonen und "
"ähnliches generieren."

#: 09.4-Ticking.md:9
msgid "Ticking Rings"
msgstr "Ticks und Ringe"

#: 09.4-Ticking.md:11
msgid ""
"Sonic Pi provides a *very* handy tool for working with rings within `live_loop"
"`s. It's called the tick system. In the section about the rings we were talkin"
"g about the counter that is constantly increasing, like a current beat number."
" Tick just implements this idea. It provides you with the ability to *tick thr"
"ough rings*. Let's look at an example:"
msgstr ""
"Sonic Pi bietet ein *sehr* praktisches Werkzeug, um in einem `live_loop` mit "
"Ringen zu arbeiten. Es nennt sich Tick-System. In dem Abschnitt über Ringe "
"haben wir über den Counter gesprochen, der etwas fortwährend hochzählt, wie "
"z. B. eine Schlagzahl. Tick hat diese Idee eingebaut. Du kannst damit *durch "
"einen Ring ticken*. Lass uns ein Beispiel ansehen:"

#: 09.4-Ticking.md:17
#, no-wrap
msgid ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"counter = 0\n"
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic)[counter], release: 0.1\n"
"  counter += 1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:26
msgid "This is equivalent to:"
msgstr "Das ist gleichbedeutend mit:"

#: 09.4-Ticking.md:28
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:35
msgid ""
"Here, we're just grabbing the scale E3 minor pentatonic and ticking through ea"
"ch element. This is done by adding `.tick` to the end of the scale declaration"
". This tick is local to the live loop, so each live loop can have its own inde"
"pendent tick:"
msgstr ""
"Hier nehmen wir einfach die pentatonische E3-Moll-Skala (Tonleiter) und "
"ticken durch jedes einzelne Element. Dafür wird `.tick` an das Ende der "
"Tonleiter-Deklaration angefügt. Dieser Tick gilt nur lokal für diesen Live-"
"Loop, so dass jeder Live-Loop seinen eigenen unabhängigen Tick haben kann:"

#: 09.4-Ticking.md:40
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick, release: 0.1\n"
"  sleep 0.125\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play (scale :e2, :minor_pentatonic, num_octaves: 3).tick, release: 0.25\n"
"  sleep 0.25\n"
"end"

#: 09.4-Ticking.md:53
msgid "Tick"
msgstr "Tick"

#: 09.4-Ticking.md:55
msgid "You can also call `tick` as a standard fn and use the value as an index:"
msgstr ""
"Du kannst `tick` als eine Standard-Funktion abfragen und den Wert als Index "
"verwenden:"

#: 09.4-Ticking.md:57
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  idx = tick\n"
"  play (scale :e3, :minor_pentatonic)[idx], release: 0.1\n"
"  sleep 0.125\n"
"end"

#: 09.4-Ticking.md:65
msgid ""
"However, it is much nicer to call `.tick` at the end. The `tick` fn is for whe"
"n you want to do fancy things with the tick value and for when you want to use"
" ticks for other things than indexing into rings."
msgstr ""
"Aber eigentlich ist es viel einfacher, wenn du `.tick` am Ende anfügst. Die "
"`tick`-Funktion ist dafür gedacht aufwendigere damit Dinge zu machen, oder "
"wenn du Ticks für andere Dinge verwenden möchtest, als Werte aus einem Ring "
"zu erhalten."

#: 09.4-Ticking.md:70
msgid "Look"
msgstr "Look"

#: 09.4-Ticking.md:72
msgid ""
"The magical thing about tick is that not only does it return a new index (or t"
"he value of the ring at that index) it also makes sure that next time you call"
" tick, it's the next value. Take a look at the examples in the docs for `tick`"
" for many ways of working with this. However, for now, it's important to point"
" out that sometimes you'll want to just look at the current tick value and *no"
"t increase* it. This is available via the `look` fn. You can call `look` as a "
"standard fn or by adding `.look` to the end of a ring."
msgstr ""
"Das Magische an Tick ist, dass er nicht nur nach jedem Aufruf einen neuen "
"Index zurück gibt (oder den Wert aus dem Ring an diesem Indexpunkt), er "
"stellt auch sicher, dass du beim nächsten Aufruf von Tick auch den nächsten "
"Wert bekommst. Schau dir im Hilfe-Fenster die Beispiele für`.tick` an, um "
"die vielen Möglichkeiten seiner Verwendung zu entdecken. Für den Moment "
"jedoch ist es wichtig zu betonen, dass du manchmal nur den aktuellen Tick-"
"Wert sehen willst, ohne den Tick *hochzuzählen*. Dafür gibt es die `look`-"
"Funktion. Du kannst `look` als Standard-Funktion aufrufen oder indem du `."
"look` an einen Ring anfügst."

#: 09.4-Ticking.md:81
msgid "Naming Ticks"
msgstr "Namen für Ticks"

#: 09.4-Ticking.md:83
msgid ""
"Finally, sometimes you'll need more than one tick per live loop. This is achie"
"ved by giving your tick a name:"
msgstr ""
"Schließlich wirst du gelegentlich auch mal mehr als einen Tick pro Live-Loop "
"brauchen. das erreichst du, indem du deinem Tick einen Namen gibst:"

#: 09.4-Ticking.md:86
#, no-wrap
msgid ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"
msgstr ""
"live_loop :arp do\n"
"  play (scale :e3, :minor_pentatonic).tick(:foo), release: 0.1\n"
"  sleep (ring 0.125, 0.25).tick(:bar)\n"
"end"

#: 09.4-Ticking.md:93
msgid ""
"Here we're using two ticks one for the note to play and another for the sleep "
"time. As they're both in the same live loop, to keep them separate we need to "
"give them unique names. This is exactly the same kind of thing as naming `live"
"_loop`s - we just pass a symbol prefixed with a `:`. In the example above we c"
"alled one tick `:foo` and the other `:bar`. If we want to `look` at these we a"
"lso need to pass the name of the tick to `look`."
msgstr ""
"In diesem Beispiel verwenden wir zwei Ticks, einen für die Note und einen "
"zweiten Tick für die Pausenwerte. Da beide sich im gleichen Live-Loop "
"befinden, müssen wir ihnen zur Unterscheidung eindeutige Namen geben. Das "
"ist exakt das gleiche Prinzip wie bei der Benennung von Live-Loops - wir "
"übergeben einfach ein `:` gefolgt vom Namen. Im obigen Beispiel haben wir "
"einen Tick `:foo` genannt und den anderen `:bar`. Auch wenn wir den Tick-"
"Wert mit `look` nur abfragen wollen, müssen wir den Namen übergeben."

#: 09.4-Ticking.md:101
msgid "Don't make it too complicated"
msgstr "Mache es nicht zu kompliziert"

#: 09.4-Ticking.md:103
msgid ""
"Most of the power in the tick system isn't useful when you get started. Don't "
"try and learn everything in this section. Just focus on ticking through a sing"
"le ring. That'll give you most of the joy and simplicity of ticking through ri"
"ngs in your `live_loop`s."
msgstr ""
"Die meisten machtvollen Dinge im Tick-System sind wenig sinnvoll, wenn du "
"gerade erst anfängst. Versuche nicht alles in diesem Abschnitt gleich zu "
"lernen. Konzentriere darauf durch einen einzelnen Ring zu ticken. Das wird "
"dir schon sehr viel von der Freude und der Einfachheit des Tickens in deinen "
"`live_loop`s bringen."

#: 09.4-Ticking.md:108
msgid ""
"Take a look at the documentation for `tick` where there are many useful exampl"
"es and happy ticking!"
msgstr ""
"Schau dir die Dokumentation für `tick`an - es gibt dort viele nützliche "
"Beispiele. Viel Spaß beim Ticken!"

#: 10-State.md:1
msgid "10 Time State"
msgstr "10 Time-State (Stand der Zeit)"

#: 10-State.md:3
msgid "Time State"
msgstr "Time-State (Stand der Zeit)"

#: 10-State.md:5
msgid ""
"Often it is useful to have information that is *shared across multiple threads"
" or live loops*. For example, you might want to share a notion of the current "
"key, BPM or even more abstract concepts such as the current 'complexity' (whic"
"h you'd potentially interpret in different ways across different threads). We "
"also don't want to lose any of our existing determinism guarantees when doing "
"this. In other words, we'd still like to be able to share code with others and"
" know exactly what they'll hear when they run it. At the end of Section 5.6 of"
" this tutorial we briefly discussed why we *should not use variables to share "
"information across threads* due to a loss of determinism (in turn due to race "
"conditions)."
msgstr ""
"Oftmals ist es sinnvoll, Informationen zu haben, die *über verschiedenen "
"Threads or Live-Loops geteilt werden kann*. Beispielsweise möchtest du "
"vielleicht die aktuelle Tonart, BPM oder auch abstraktere Konzepte wie z. B. "
"die aktuelle 'Komplexität' (die wiederum in den verschiedenen Threads "
"unterschiedlich interpretiert werden könnte) teilen. Wenn wir dies tun, "
"möchten wir aber auch nicht auf die garantierte Bestimmbarkeit von Sonic Pi "
"verzichten. In anderen Worten: Wir möchten immer noch Programm-Code mit "
"anderen teilen und sicherstellen können, dass wir genau wissen, was sie "
"hören, wenn sie ihn ausführen. Am Ende des Abschnitts 5.6. dieses Tutorials "
"haben wir kurz darüber gesprochen, warum wir *Variablen nicht nutzen "
"sollten, um Informationen zwischen Threads zu teilen*, da wir dadurch diese "
"Vorhersagbarkeit verlieren (aufgrund von Race Conditions)."

#: 10-State.md:16
msgid ""
"Sonic Pi's solution to the problem of easily working with global variables in "
"a deterministic way is through a novel system it calls Time State. This might "
"sound complex and difficult (in fact, in the UK, programming with multiple thr"
"eads and shared memory is typically a university level subject). However, as y"
"ou'll see, just like playing your first note, *Sonic Pi makes it incredibly si"
"mple to share state across threads* whilst still keeping your programs *thread"
"-safe and deterministic.*."
msgstr ""
"Sonic Pi's Lösung für das Problem auf einfache Art mit globalen Variablen in "
"einer vorhersagbaren Weise zu arbeiten, ist ein neuartiges System, das es "
"Time-State (Stand der Zeit) nennt. Es mag erstmal komplex und schwierig "
"klingen (Programmieren mit mehrfachen Threads und geteiltem Speicher werden "
"normalerweise erst in der Universität behandelt). Allerdings wie du sehen "
"wirst, genau wie beim Spielen deiner ersten Note, *macht es dir Sonic Pi "
"unglaublich einfach, einen Zustand über mehrere Threads zu teilen* und dabei "
"dennoch deine Programme *thread-safe und vorhersagbar\" bleiben zu lassen."

#: 10-State.md:24
msgid "Meet `get` and `set`..."
msgstr "Sag Hallo zu`get` und `set`..."

#: 10.1-Set-and-Get.md:1
msgid "10.1 Set and Get"
msgstr "10.1 Set und Get"

#: 10.1-Set-and-Get.md:3
msgid "Set and Get"
msgstr "Set und Get"

#: 10.1-Set-and-Get.md:5
msgid ""
"Sonic Pi has a global memory store called Time State. The two main things you "
"do with it are to `set` information and `get` information. Let's dive deeper.."
"."
msgstr ""
"Sonic Pi verfügt über einen globalen Speicherbereich, der Time-State genannt "
"wird. Die beiden wesentliche damit möglichen Dinge sind das Setzen von "
"Informationen (Set) und das Holen von Information (Get). Lass uns das "
"genauer ansehen ..."

#: 10.1-Set-and-Get.md:9
msgid "Set"
msgstr "Set"

#: 10.1-Set-and-Get.md:11
msgid "To store information into the Time State we need two things:"
msgstr ""
"Um Informationen in den Time-State zu speichern benötigen wir zwei Dinge:"

#: 10.1-Set-and-Get.md:13
msgid "the information we want to store,"
msgstr "die Information, die wir speichern wollen,"

#: 10.1-Set-and-Get.md:14
msgid "a unique name (key) for the information."
msgstr "einen eindeutigen Namen (Schlüssel) für die Information."

#: 10.1-Set-and-Get.md:16
msgid ""
"For example, we might want to store the number `3000` with the key `:intensity"
"`. This is possible using the `set` function:"
msgstr ""
"Zum Beispiel wollen wir vielleicht die Zahl `3000` unter dem Schlüsselnamen "
"`:intensity` speichern. Das ist möglich mit der `set`-Funktion:"

#: 10.1-Set-and-Get.md:19
#, no-wrap
msgid "set :intensity, 3000"
msgstr "set :intensity, 3000"

#: 10.1-Set-and-Get.md:23
msgid ""
"We can use any name for our key. If information has already been stored with t"
"hat key, our new `set` will override it:"
msgstr ""
"Wir können für den Schlüssel einen beliebigen Namen verwenden. Wurde unter "
"diesem Schlüsselnamen bereits Information gespeichert, wird unser neuer `set`"
" -Befehl diese überschreiben:"

#: 10.1-Set-and-Get.md:26
#, no-wrap
msgid ""
"set :intensity, 1000\n"
"set :intensity, 3000"
msgstr ""
"set :intensity, 1000\n"
"set :intensity, 3000"

#: 10.1-Set-and-Get.md:31
msgid ""
"In the above example, as we stored both numbers under the same key, the last c"
"all to `set` 'wins', so the number associated with `:intensity` will be `3000`"
" as the first call to `set` is effectively overridden."
msgstr ""
"In dem obigen Beispiel haben wir beide Werte unter dem gleichen "
"Schlüsselnamen abgespeichert, und der letzte `set`-Befehl 'gewinnt', so dass "
"die Zahl 3000 mit `:intensity` assoziiert wird, also unser erster `set`-"
"Befehl damit überschrieben wurde."

#: 10.1-Set-and-Get.md:35
msgid "Get"
msgstr "Get"

#: 10.1-Set-and-Get.md:37
msgid ""
"To fetch information from the Time State we just need the key we used to `set`"
" it, which in our case is `:intensity`. We then just need to call `get[:intens"
"ity]` which we can see by printing out the result to the log:"
msgstr ""
"Um Informationen aus dem Time-State wiederzuholen, benötigen wir nur den "
"Schlüssel, den wir bei `set` verwendet haben, also in unserem Fall "
"`:intensity`. Wir müssen jetzt nur `get[:intensity]` aufrufen, und das "
"Ergebnis wird uns im Protokoll angezeigt:"

#: 10.1-Set-and-Get.md:42
#, no-wrap
msgid "print get[:intensity] #=> prints 3000"
msgstr "print get[:intensity] #=> prints 3000"

#: 10.1-Set-and-Get.md:46
msgid ""
"Notice that calls to `get` can return information that was `set` in a previous"
" run. Once a piece of information has been `set` it is available until either "
"the information is overridden (just like we clobbered the `:intensity` value o"
"f `1000` to `3000` above) or Sonic Pi is closed."
msgstr ""
"Beachte, dass Aufrufe von `get` Informationen zurückgeben können, die bei "
"einem vorherigem Programm-Lauf gesetzt wurden. Wurde eine Information einmal "
"mit Hilfe von `set` gesetzt, bleibt sie solange verfügbar, bis sie entweder "
"überschrieben wird (so wie wir den Wert `1000` von `intensity` mit `3000` "
"vertauscht haben) oder Sonic Pi beendet wird."

#: 10.1-Set-and-Get.md:52
msgid "Multiple Threads"
msgstr "Mehrere Threads"

#: 10.1-Set-and-Get.md:54
msgid ""
"The main benefit of the Time State system is that it can be safely used across"
" threads or live loops. For example, you could have one live loop setting info"
"rmation and another one getting it:"
msgstr ""
"Der wesentliche Vorteil des Time-State-Systems ist, dass es auf sichere Art "
"und Weise zwischen Threads und zwischen Live-Loops verwendet werden kann. "
"Beispielsweise könnte ein Live-Loop Informationen setzen und ein anderer "
"diese auslesen:"

#: 10.1-Set-and-Get.md:58
#, no-wrap
msgid ""
"live_loop :setter do\n"
"  set :foo, rrand(70, 130)\n"
"  sleep 1\n"
"end\n"
"live_loop :getter do\n"
"  puts get[:foo]\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :setter do\n"
"  set :foo, rrand(70, 130)\n"
"  sleep 1\n"
"end\n"
"live_loop :getter do\n"
"  puts get[:foo]\n"
"  sleep 0.5\n"
"end"

#: 10.1-Set-and-Get.md:70
msgid ""
"The nice thing about using `get` and `set` across threads like this is that it"
" will always produce the same result every time you hit run. Go on, try it. Se"
"e if you get the following in your log:"
msgstr ""
"Das Schöne an der Verwendung von `get` und `set` über Threads hinweg ist, "
"dass immer das gleiche Ergebnis ausgegeben wird, wenn der Programm-Code "
"gestartet wird. Los, probiere es selbst. Sieh nach, ob dir das Folgende im "
"Protokoll ausgegeben wird:"

#: 10.1-Set-and-Get.md:74
#, no-wrap
msgid ""
"{run: 0, time: 0.0}\n"
" └─ 125.72265625\n"
"{run: 0, time: 0.5}\n"
" └─ 125.72265625\n"
"{run: 0, time: 1.0}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 1.5}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 2.0}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 2.5}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 3.0}\n"
" └─ 75.6048583984375\n"
"{run: 0, time: 3.5}\n"
" └─ 75.6048583984375"
msgstr ""
"{run: 0, time: 0.0} \n"
" └─ 125.72265625\n"
"{run: 0, time: 0.5}\n"
" └─ 125.72265625\n"
"{run: 0, time: 1.0}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 1.5}\n"
" └─ 76.26220703125\n"
"{run: 0, time: 2.0}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 2.5}\n"
" └─ 114.93408203125\n"
"{run: 0, time: 3.0}\n"
" └─ 75.6048583984375\n"
"{run: 0, time: 3.5}\n"
" └─ 75.6048583984375"

#: 10.1-Set-and-Get.md:100
msgid ""
"Try running it a few times - see, it's the same every time. This is what we ca"
"ll deterministic behaviour and it's really very important when we want to shar"
"e our music as code and know that the person playing the code is hearing exact"
"ly what we wanted them to hear (just like playing an MP3 or internet stream so"
"unds the same for all listeners)."
msgstr ""
"Starte das Programm einfach mehrmals hintereinander - du siehst, dass das "
"Ergebnis jedes Mal das Gleiche ist. Wir bezeichnen dies als "
"deterministisches (vorhersagbares) Verhalten, und es ist sehr wichtig, wenn "
"wir unsere Musik als Programm-Code weitergeben, zu wissen, dass die Person, "
"die den Code ausführt, genau das hören wird, was wir sie hören lassen "
"wollten (ähnlich wie beim Abspiel einer MP3 oder beim Streamen für alle "
"Hörer dasselbe zu hören ist)."

#: 10.1-Set-and-Get.md:107
msgid "A Simple Deterministic State System"
msgstr "Ein einfaches deterministisches State-System"

#: 10.1-Set-and-Get.md:109
msgid ""
"Back in Section 5.6 we discussed why using variables across threads can lead t"
"o random behaviour. This stops us from being able to reliably reproduce code s"
"uch as this:"
msgstr ""
"In Abschnitt 5.6 haben wir darüber gesprochen, wie die Nutzung von Variablen "
"über verschiedenen Threads hinweg zu zufälligen Resultaten führen kann. Das "
"hindert uns daran Programm-Code wie diesen zuverlässig zu reproduzieren:"

#: 10.1-Set-and-Get.md:113
#, no-wrap
msgid ""
"## An Example of Non-Deterministic Behaviour\n"
"## (due to race conditions caused by multiple\n"
"## live loops manipulating the same variable\n"
"## at the same time).\n"
"##  \n"
"## If you run this code you'll notice\n"
"## that the list that's printed is\n"
"## not always sorted!\n"
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"
msgstr ""
"## Ein Beispiel für ein nicht-deterministisches Verhalten\n"
"## (aufgrund von Race Conditions, die durch\n"
"## mehrfache Live-Loops ausgelöst werden, die den Wert\n"
"## der selben Variable verändern).\n"
"##  \n"
"## Wenn du den Code startest, siehst du,\n"
"## dass die Liste, die ausgegeben wird,\n"
"## nicht immer sortiert ist!\n"
"a = (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  a = a.shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  a = a.sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", a\n"
"end"

#: 10.1-Set-and-Get.md:136
msgid "Let's take a look at how this might look using `get` and `set`:"
msgstr "Lass uns sehen, wie wir hier `get` und `set` einsetzen könnten:"

#: 10.1-Set-and-Get.md:138
#, no-wrap
msgid ""
"## An Example of Deterministic Behaviour\n"
"## (despite concurrent access of shared state)\n"
"## using Sonic Pi's new Time State system.\n"
"##\n"
"## When this code is executed, the list that's\n"
"## printed is always sorted!\n"
"set :a, (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  set :a, get[:a].shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  set :a, get[:a].sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", get[:a]\n"
"end"
msgstr ""
"## Ein Beispiel für deterministisches Verhalten\n"
"## (trotz gleichzeitigem Zugriff auf einen geteilten Zustand)\n"
"## mit Hilfe des Sonic Pi Time State Systems.\n"
"##\n"
"## Bei Ausführung dieses Codes,\n"
"## wird die Liste immer sortiert ausgegeben!\n"
"set :a, (ring 6, 5, 4, 3, 2, 1)\n"
"live_loop :shuffled do\n"
"  set :a, get[:a].shuffle\n"
"  sleep 0.5\n"
"end\n"
"live_loop :sorted do\n"
"  set :a, get[:a].sort\n"
"  sleep 0.5\n"
"  puts \"sorted: \", get[:a]\n"
"end"

#: 10.1-Set-and-Get.md:159
msgid ""
"Notice how this code is pretty much identical to the version using a variable "
"before it. However when you run the code, it behaves as you would expect with "
"any typical Sonic Pi code - *it does the same thing every time* in this case t"
"hanks to the Time State system."
msgstr ""
"Beachte, dass dieser Code fast identisch ist mit dem Code, der eine Variable "
"zum Teilen der Information verwendet hat. Wenn du ihn ausführst verhält er "
"sich allerdings so, wie du es bei jedem typischen Sonic Pi Code erwarten "
"würdest - *er verhält sich immer gleich*, in diesem Fall dank des Time-State-"
"Systems."

#: 10.1-Set-and-Get.md:164
msgid ""
"Therefore, when sharing information across live loops and threads, use `get` a"
"nd `set` instead of variables for deterministic, reproducible behaviour."
msgstr ""
"Deshalb verwende für ein vorhersagbares und reproduzierbares Verhalten "
"anstelle von Variablen immer `get` und `set`, wenn du Daten zwischen Live-"
"Loops und zwischen Threads teilst."

#: 10.2-Sync.md:1
msgid "10.2 Sync"
msgstr "10.2 Synchronisation"

#: 10.2-Sync.md:3
msgid "Sync"
msgstr "Synchronisation"

#: 10.2-Sync.md:5
msgid ""
"Section 5.7 introduced the functions `cue` and `sync` when dealing with the is"
"sue of synchronising threads. What it didn't explain was that it is the Time S"
"tate system which provides this functionality. It just so happens that `set` i"
"s actually a variation of `cue` and is built on top of the same core functiona"
"lity which is to insert information into the Time State system. Additionally, "
"`sync` is also designed in such a way that it works seamlessly with Time State"
" - any information that we plan to store in Time State we can sync on. In othe"
"r words - *we `sync` on events yet to be inserted into Time State*."
msgstr ""
"In Abschnitt 5.7 haben wir die Funktionen `cue` und `sync` vorgestellt, für "
"die Synchronisierung von Threads. Was wir dort nicht erklärt haben ist, dass "
"es das Time-State-System ist, das diese Funktionalität bereitstellt. "
"Tatsächlich ist `set` eine Variation von `cue` und baut auf er selben "
"Kernfunktion auf, Informationen im Time-State-System zu hinterlegen. Darüber "
"hinaus ist `sync`so gestaltet, dass es unmittelbar mit Time-State arbeitet - "
"jegliche Information, die wir zukünftig im Time State ablegen wollen, kann "
"auch zur Synchronisierung verwendet werden. Mit anderen Worten - *wir "
"synchronisieren auf Ereignisse, die erst noch im Time-State gespeichert "
"werden*."

#: 10.2-Sync.md:15
msgid "Waiting for Events"
msgstr "Warten auf Ereignisse"

#: 10.2-Sync.md:17
msgid ""
"Let's take a quick look at how to use `sync` to wait for new events to be adde"
"d to Time State:"
msgstr ""
"Lass uns mal ansehen, wie `sync` verwendet wird, um auf neue Ereignisse zu "
"warten, die dem Time-State hinzugefügt werden:"

#: 10.2-Sync.md:20
#, no-wrap
msgid ""
"in_thread do\n"
"  sync :foo\n"
"  sample :ambi_lunar_land\n"
"end\n"
"sleep 2\n"
"set :foo, 1"
msgstr ""
"in_thread do\n"
"  sync :foo\n"
"  sample :ambi_lunar_land\n"
"end\n"
"sleep 2\n"
"set :foo, 1"

#: 10.2-Sync.md:31
msgid ""
"In this example first we create a thread which waits for a `:foo` event to be "
"added to the Time State. After this thread declaration we sleep for 2 beats an"
"d then `set` `:foo` to be `1`. This then releases the `sync` which then moves "
"to the next line which is to trigger the `:ambi_lunar_land` sample."
msgstr ""
"In diesem Beispiel erstellen wir zuerst einen Thread, der darauf wartet, "
"dass ein Ereignis ':foo' dem Time-State hinzugefügt wird. Nach dieser Thread-"
"Deklaration schlafen wir für 2 Schläge, und dann setzen wir mit 'set' den "
"Wert für ':foo' auf '1'. Dies entfernt `sync`, was dann auf die nächste "
"Zeile übergeht, in der das ':ambi_lunar_land'-Sample getriggert wird."

#: 10.2-Sync.md:37
msgid ""
"Note that `sync` always waits for *future events* and that it will block the c"
"urrent thread waiting for a new event. Also, it will inherit the logical time "
"of the thread which triggered it via `set` or `cue` so it may also be used to "
"sync time."
msgstr ""
"Beachte, dass `sync` immer auf *zukünftige Ereignisse* wartet, und dass es "
"den gegenwärtigen Thread blockieren wird, während es auf ein neues Ereignis "
"wartet. Zusätzlich erbt es die logische Zeit des Threads, der es via `set` "
"oder `cue` getriggert hat, sodass sich hierdurch auch die Zeit von zwei "
"Threads synchronisieren lässt."

#: 10.2-Sync.md:42
msgid "Passing values into the Future"
msgstr "Übergabe von Werten an die Zukunft"

#: 10.2-Sync.md:44
msgid ""
"In the example above we set `:foo` to `1` which we did nothing with. We can ac"
"tually get this value from the thread calling `sync`:"
msgstr ""
"In diesem Beispiel setzen wir ':foo' auf '1', darüber hinaus haben wir damit "
"nichts angefangen. Diesen Wert können wir im Thread tatsächlich abfragen "
"('get'), indem wir `sync` aufrufen:"

#: 10.2-Sync.md:47
#, no-wrap
msgid ""
"in_thread do\n"
"  amp = sync :foo\n"
"  sample :ambi_lunar_land, amp: amp\n"
"end\n"
"sleep 2\n"
"set :foo, 0.5"
msgstr ""
"in_thread do\n"
"  amp = sync :foo\n"
"  sample :ambi_lunar_land, amp: amp\n"
"end\n"
"sleep 2\n"
"set :foo, 0.5"

#: 10.2-Sync.md:58
msgid ""
"Note that values that are passed through `set` and `cue` must be thread safe -"
" i.e. immutable rings, numbers, symbols or frozen strings. Sonic Pi will throw"
" an error if the value you are attempting to store in the Time State is not va"
"lid."
msgstr ""
"Beachte, dass Werte die mit Hilfe von `set` und `cue übergeben werden, "
"thread-safe sein müssen - dies sind unveränderliche Ringe (immutable rings), "
"Zahlen, Symbole oder eingefrorene Zeichenketten (frozen strings). Sonic Pi "
"gibt einen Fehler aus, falls du einen Wert im Time-Store ablegen willst, der "
"nicht gütig ist."

#: 10.3-Pattern-Matching.md:1
msgid "10.3 Pattern Matching"
msgstr "10.3 Muster-Abgleich"

#: 10.3-Pattern-Matching.md:3
msgid "Pattern Matching"
msgstr "Muster-Abgleich"

#: 10.3-Pattern-Matching.md:5
msgid ""
"When getting and setting information into the Time State, it's possible to use"
" more complex keys than basic symbols such as `:foo` and `:bar`. You can also "
"use URL style strings called paths such as `\"/foo/bar/baz\"`. Once we start wor"
"king with paths, we can then start taking advantage of Sonic Pi's sophisticate"
"d pattern matching system to `get` and `sync` with 'similar' rather than 'iden"
"tical' paths. Let's take a look."
msgstr ""
"Beim Holen und Setzen von Informationen unter Verwendung von Time-State "
"lassen sich komplexere Schlüssel verwenden als einfache Symbole wie `:foo` "
"und `:bar`. Du kannst auch Zeichenketten in der Art von URLs verwenden, wie "
"z.B. `\"/foo/bar/baz\"`. Sobald wir anfangen mit Pfaden zu arbeiten, können "
"wir auch die Vorteile des ausgeklügelten Muster-Abgleich-Systems von Sonic "
"Pi nutzen, um `get` und `sync` mit 'ähnlichen' und nicht mit 'identischen' "
"Pfaden zu synchronisieren. Lass uns einen Blick darauf werfen."

#: 10.3-Pattern-Matching.md:13
msgid "Match any path segment"
msgstr "Abgleich mit allen Pfad-Segmenten"

#: 10.3-Pattern-Matching.md:15
msgid "Let's assume we want to wait for the next event that has three path segments:"
msgstr ""
"Lass uns annehmen wir möchten auf das nächste Ereignis warten, das die "
"folgenden drei Pfad-Segmente enthält:"

#: 10.3-Pattern-Matching.md:17
#, no-wrap
msgid "sync \"/*/*/*\""
msgstr "sync \"/*/*/*\""

#: 10.3-Pattern-Matching.md:21
msgid ""
"This will match any Time State event with exactly three path segments, regardl"
"ess of their names. For example:"
msgstr ""
"Dieses Muster wird zu jedem Time-State-Ereignis passen, das aus exakt drei "
"Pfadsegmenten besteht, unabhängig von deren Namen. Zum Beispiel:"

#: 10.3-Pattern-Matching.md:24 10.3-Pattern-Matching.md:46
#: 10.3-Pattern-Matching.md:68 10.3-Pattern-Matching.md:78
msgid "`cue \"/foo/bar/baz\"`"
msgstr "`cue \"/foo/bar/baz\"`"

#: 10.3-Pattern-Matching.md:25
msgid "`cue \"/foo/baz/quux\"`"
msgstr "`cue \"/foo/baz/quux\"`"

#: 10.3-Pattern-Matching.md:26
msgid "`cue \"/eggs/beans/toast\"`"
msgstr "`cue \"/eggs/beans/toast\"`"

#: 10.3-Pattern-Matching.md:27
msgid "`cue \"/moog/synths/rule\"`"
msgstr "`cue \"/moog/synths/rule\"`"

#: 10.3-Pattern-Matching.md:29
msgid ""
"However, it will *not* match paths with fewer or more path segments. The follo"
"wing will not match:"
msgstr ""
"Allerdings wird es *nicht* zu Ereignissen mit wenigeren oder mehr Pfad-"
"Segmente passen. Die folgenden würden nicht passen:"

#: 10.3-Pattern-Matching.md:32
msgid "`cue \"/foo/bar\"`"
msgstr "`cue \"/foo/bar\"`"

#: 10.3-Pattern-Matching.md:33
msgid "`cue \"/foo/baz/quux/quaax\"`"
msgstr "`cue \"/foo/baz/quux/quaax\"`"

#: 10.3-Pattern-Matching.md:34
msgid "`cue \"/eggs\"`"
msgstr "`cue \"/eggs\"`"

#: 10.3-Pattern-Matching.md:36
msgid ""
"Each `*` means *any content*. So we could match paths with just one segment wi"
"th `/*` or paths with five segments with `/*/*/*/*/*`"
msgstr ""
"Jeder `*` bedeutet *jeder Inhalt*. Das bedeutet, wir können Pfade mit nur "
"einem Segment mit `/*` oder Pfade aus fünf Segmenten mit `/*/*/*/*/*` "
"abgleichen"

#: 10.3-Pattern-Matching.md:38
msgid "Matching partial segments"
msgstr "Abgleich mit Teilsegmenten"

#: 10.3-Pattern-Matching.md:40
msgid ""
"If we know what the segment is going to start or finish with, we can use a `*`"
" in addition to a partial segment name. For example: `\"/foo/b*/baz\"` will matc"
"h any path that has three segments, the first of which is `foo`, the last `baz"
"` and the middle segment can be anything that starts with `b`. So, it would ma"
"tch:"
msgstr ""
"Wenn wir wissen, womit das Segment beginnen oder enden wird, können wir ein "
"`*` zusätzlich zum Namen eines Teilsegments verwenden. Zum Beispiel: `\"/foo/"
"b*/baz\"`passt zu jedem Pfad, der drei Segmente hat, von denen das erste "
"`foo`, das letzte `baz` und das mittlere Segment alles sein kann, was mit `b`"
" beginnt. Also, es würde passen zu:"

#: 10.3-Pattern-Matching.md:47
msgid "`cue \"/foo/baz/baz\"`"
msgstr "`cue \"/foo/baz/baz\"`"

#: 10.3-Pattern-Matching.md:48
msgid "`cue \"/foo/beans/baz\"`"
msgstr "`cue \"/foo/beans/baz\"`"

#: 10.3-Pattern-Matching.md:50
msgid "However, it wouldn't match the following:"
msgstr "Allerdings würde es nicht zu Folgendem passen:"

#: 10.3-Pattern-Matching.md:52
msgid "`cue \"/foo/flibble/baz\"`"
msgstr "`cue \"/foo/flibble/baz\"`"

#: 10.3-Pattern-Matching.md:53
msgid "`cue \"/foo/abaz/baz\"`"
msgstr "`cue \"/foo/abaz/baz\"`"

#: 10.3-Pattern-Matching.md:54
msgid "`cue \"/foo/beans/baz/eggs\"`"
msgstr "`cue \"/foo/beans/baz/eggs\"`"

#: 10.3-Pattern-Matching.md:56
msgid ""
"You can also place the `*` at the start of the segment to specify the last cha"
"racters of a segment: `\"/foo/*zz/baz\"` which will match any 3 segment `cue` or"
" `set` where the first segment is `foo`, the last is `baz` and the middle segm"
"ent ends with `zz` such as `\"cue \"/foo/whizz/baz\"`."
msgstr ""
"Du kannst das `*` auch an den Anfang des Segments setzen, um die letzten "
"Zeichen eines Segments anzugeben: `\"/foo/*zz/baz\"`, wird zu jedem `cue` or "
"`set` bestehend aus 3 Segmenten passen, wo das erste Segment `foo`, das "
"letzte `baz` ist und das mittlere Segment auf `zz` endet, so wie `\"cue \"/"
"foo/whizz/baz\"`."

#: 10.3-Pattern-Matching.md:62
msgid "Matching Nested Path Segments"
msgstr "Abgleich mit verschachtelten Pfadsegmenten"

#: 10.3-Pattern-Matching.md:64
msgid ""
"Sometimes you don't know how many path segments you want to match. In these ca"
"ses you can use the powerful double star: `**` such as `\"/foo/**/baz\"` which w"
"ill match:"
msgstr ""
"Manchmal weißt du nicht, wie viele Pfadsegmente du abgleichen möchtest. In "
"diesen Fällen kannst du den mächtigen Doppelstern `**` verwenden, wie in `\"/"
"foo/**/**/baz\"`, das übereinstimmt mit:"

#: 10.3-Pattern-Matching.md:69
msgid "`cue \"/foo/bar/beans/baz\"`"
msgstr "`cue \"/foo/bar/beans/baz\"`"

#: 10.3-Pattern-Matching.md:70
msgid "`cue \"/foo/baz\"`"
msgstr "`cue \"/foo/baz\"`"

#: 10.3-Pattern-Matching.md:71
msgid "`cue \"/foo/a/b/c/d/e/f/baz\"`"
msgstr "`cue \"/foo/a/b/c/d/e/f/baz\"`"

#: 10.3-Pattern-Matching.md:73
msgid "Matching Single Letters"
msgstr "Abgleich mit einzelnen Buchstaben"

#: 10.3-Pattern-Matching.md:75
msgid ""
"You can use the `?` character to match against a single char such as `\"/?oo/ba"
"r/baz\"` which will match:"
msgstr ""
"Du kannst das `?` verwenden, um mit einem beliebigen einzelnen Zeichen "
"abzugleichen. `\"/?oo/bar/baz\"` passt zu:"

#: 10.3-Pattern-Matching.md:79
msgid "`cue \"/goo/bar/baz\"`"
msgstr "`cue \"/goo/bar/baz\"`"

#: 10.3-Pattern-Matching.md:80
msgid "`cue \"/too/bar/baz\"`"
msgstr "`cue \"/too/bar/baz\"`"

#: 10.3-Pattern-Matching.md:81
msgid "`cue \"/woo/bar/baz\"`"
msgstr "`cue \"/woo/bar/baz\"`"

#: 10.3-Pattern-Matching.md:83
msgid "Matching Multiple Words"
msgstr "Abgleich mit mehreren Wörtern"

#: 10.3-Pattern-Matching.md:85
msgid ""
"If you know that a segment may be one of a select number of words, you can use"
" the `{` and `}` matchers to specify a list of choices such as `\"/foo/{bar,bea"
"ns,eggs}/quux\"` which will only match the following:"
msgstr ""
"Wenn du weißt, das ein Segment eines aus einer bestimmten Reihe von Wörtern "
"ist, kannst du eine Auswahlliste zwischen `{` und `}` setzen, so wie `\"/foo/"
"{bar,beans,eggs}/quux\"`, was nur auf das Folgende passt:"

#: 10.3-Pattern-Matching.md:89
msgid "`cue \"/foo/bar/quux\"`"
msgstr "`cue \"/foo/bar/quux\"`"

#: 10.3-Pattern-Matching.md:90
msgid "`cue \"/foo/beans/quux\"`"
msgstr "`cue \"/foo/beans/quux\"`"

#: 10.3-Pattern-Matching.md:91
msgid "`cue \"/foo/eggs/quux\"`"
msgstr "`cue \"/foo/eggs/quux\"`"

#: 10.3-Pattern-Matching.md:93
msgid "Matching Multiple Letters"
msgstr "Abgleich mit mehreren Zeichen"

#: 10.3-Pattern-Matching.md:95
msgid ""
"Finally, you can match against a selection of letters if you use the `[` and `"
"]` matchers to specify a list of choices such as `\"/foo/[abc]ux/baz\"` which wi"
"ll match only:"
msgstr ""
"Schließlich kannst du auch noch gegen eine Auswahl von Buchstaben "
"abgleichen, indem du eine Auswahlliste zwischen `{` und `}` setzt, so wie `\""
"/foo/[abc]ux/baz\"`, was nur passen wird zu:"

#: 10.3-Pattern-Matching.md:99 10.3-Pattern-Matching.md:106
msgid "`cue \"/foo/aux/baz\"`"
msgstr "`cue \"/foo/aux/baz\"`"

#: 10.3-Pattern-Matching.md:100 10.3-Pattern-Matching.md:107
msgid "`cue \"/foo/bux/baz\"`"
msgstr "`cue \"/foo/bux/baz\"`"

#: 10.3-Pattern-Matching.md:101 10.3-Pattern-Matching.md:108
msgid "`cue \"/foo/cux/baz\"`"
msgstr "`cue \"/foo/cux/baz\"`"

#: 10.3-Pattern-Matching.md:104
msgid ""
"You can also use the `-` character to specify ranges of letters. For example `"
"\"/foo/[a-e]ux/baz\"` which will match only:"
msgstr ""
"Du kannst mit `-`auch Buchstabenbereiche angeben. Zum Beispiel `\"/foo/[a-e]"
"ux/baz\"`, was nur passt zu:"

#: 10.3-Pattern-Matching.md:109
msgid "`cue \"/foo/dux/baz\"`"
msgstr "`cue \"/foo/dux/baz\"`"

#: 10.3-Pattern-Matching.md:110
msgid "`cue \"/foo/eux/baz\"`"
msgstr "`cue \"/foo/eux/baz\"`"

#: 10.3-Pattern-Matching.md:112
msgid "Combining Matchers"
msgstr "Kombination von Abgleichen"

#: 10.3-Pattern-Matching.md:114
msgid ""
"When calling `sync` or `get` you are free to combine matchers in any order you"
" see fit to powerfully match any Time State event created by `cue` or `set`. L"
"et's look at a crazy example:"
msgstr ""
"Wenn du `sync` oder `get` aufrufst, kannst du Abgleiche mit Mustern in "
"beliebiger Reihenfolge miteinander kombinieren, um sehr effektiv jedes "
"beliebige Time-State-Ereignis, das durch `cue` oder `set` erzeugt wurde, zu "
"erkennen. Lass uns ein verrücktes Beispiel anschauen:"

#: 10.3-Pattern-Matching.md:118
#, no-wrap
msgid ""
"in_thread do\n"
"  sync \"/?oo/[a-z]*/**/ba*/{quux,quaax}/\"\n"
"  sample :loop_amen\n"
"end\n"
"sleep 1\n"
"cue \"/foo/beans/a/b/c/d/e/bark/quux/\""
msgstr ""
"in_thread do\n"
"  sync \"/?oo/[a-z]*/**/ba*/{quux,quaax}/\"\n"
"  sample :loop_amen\n"
"end\n"
"sleep 1\n"
"cue \"/foo/beans/a/b/c/d/e/bark/quux/\""

#: 10.3-Pattern-Matching.md:129
msgid "OSC Pattern Matching"
msgstr "OSC Musterabgleich"

#: 10.3-Pattern-Matching.md:131
msgid ""
"For those curious, these matching rules are based on the Open Sound Control pa"
"ttern matching specification which is explained in detail here: http://opensou"
"ndcontrol.org/spec-1_0"
msgstr ""
"Für die Neugierigen, diese Abgleichregeln basieren auf der Open-Sound-"
"Control-Spezifikation zum Musterabgleich, welche hier im Detail erklärt ist: "
"http://opensoundcontrol.org/spec-1_0"

#: 11-MIDI.md:1
msgid "11 MIDI"
msgstr "11 MIDI"

#: 11-MIDI.md:3
msgid "MIDI"
msgstr "MIDI"

#: 11-MIDI.md:5
msgid ""
"Once you've mastered converting code to music, you might wonder - what's next?"
" Sometimes the constraints of working purely within Sonic Pi's syntax and soun"
"d system can be exciting and put you into a new creative position. However, so"
"metimes it is essential to break out of the code into the real world. We want "
"two extra things:"
msgstr ""
"Wenn du es geschafft hast Programm-Code in Musik zu verwandeln, fragst du "
"dich vielleicht - was kommt als nächstes? Manchmal sind die Beschränkungen, "
"die darin bestehen nur mit Sonic Pis Syntax und Soundsystem zu arbeiten, "
"aufregend und versetzen dich in eine neue kreative Lage. Manchmal jedoch ist "
"es nochmal etwas grundlegend anderes, aus dem Programm-Code auszubrechen - "
"in die reale Welt. Wir brauchen zwei zusätzliche Dinge:"

#: 11-MIDI.md:11
msgid ""
"To be able to convert actions in the real world into Sonic Pi events to code w"
"ith"
msgstr ""
"Die Möglichkeit Ereignisse in der realen Welt in Sonic-Pi-Ereignisse "
"umzuwandeln, um damit zu programmieren"

#: 11-MIDI.md:12
msgid ""
"To be able to use Sonic Pi's strong timing model and semantics to control and "
"manipulate objects in the real world"
msgstr ""
"Die Möglichkeit Sonic Pis starkes Takt-Modell und Semantik zu nutzen, um "
"Objekte in der realen Welt zu steuern und zu verändern"

#: 11-MIDI.md:14
msgid ""
"Luckily there's a protocol that's been around since the 80s that enables exact"
"ly this kind of interaction - MIDI. There's an incredible number of external d"
"evices including keyboards, controllers, sequencers, and pro audio software th"
"at all support MIDI. We can use MIDI to receive data and also use it to send d"
"ata."
msgstr ""
"Glücklicherweise gibt es ein Protokoll, das schon seit den 80ern existiert, "
"das genau diese Art von Interaktion möglich macht - MIDI. Es gibt eine "
"unglaubliche Anzahl an externen Geräten, unter anderem Keyboards, "
"Controller, Sequencer, und professionelle Audio Software, die alle MIDI "
"unterstützen. Wir können MIDI nutzen, um Daten zu empfangen und auch um "
"Daten zu senden."

#: 11-MIDI.md:20
msgid ""
"Sonic Pi provides full support for the MIDI protocol enabling you to connect y"
"our live code to the real world. Let's explore it further..."
msgstr ""
"Sonic Pi bietet vollständige Unterstützung für das MIDI Protokoll, was es "
"dir erlaubt deinen Live-Code mit der realen Welt zu verbinden. Lass uns das "
"genauer untersuchen ..."

#: 11.1-MIDI-In.md:1
msgid "11.1 MIDI In"
msgstr "11.1 MIDI In"

#: 11.1-MIDI-In.md:3
msgid "MIDI In"
msgstr "MIDI In"

#: 11.1-MIDI-In.md:5
msgid ""
"In this section we will learn how to connect a MIDI controller to send events "
"into Sonic Pi to control our synths and sounds. Go and grab a MIDI controller "
"such as a keyboard or control surface and let's get physical!"
msgstr ""
"In diesem Abschnitt werden wir lernen einen MIDI-Controller anzuschließen, "
"um Ereignisse an Sonic Pi zu senden, mit denen unsere Synths und Klänge "
"steuern. Besorge dir einen MIDI-Controller, wie z. B. ein Keyboard oder eine "
"Controller-Oberfläche und lass uns handgreiflich werden!"

#: 11.1-MIDI-In.md:11
msgid "Connecting a MIDI Controller"
msgstr "MIDI-Controller verbinden"

#: 11.1-MIDI-In.md:13
msgid ""
"In order to get information from an external MIDI device into Sonic Pi we firs"
"t need to connect it to our computer. Typically this will be via a USB connect"
"ion, although older equipment will have a 5-pin DIN connector for which you'll"
" need hardware support for your computer (for example, some sound cards have M"
"IDI DIN connectors). Once you've connected your device, launch Sonic Pi and ta"
"ke a look at the IO section of the Preferences panel. You should see your devi"
"ce listed there. If not, try hitting the 'Reset MIDI' button and see if it app"
"ears. If you're still not seeing anything, the next thing to try is to consult"
" your operating system's MIDI config to see if it sees your device. Failing al"
"l that, feel free to ask questions in our friendly forums: https://in-thread.s"
"onic-pi.net"
msgstr ""
"Um Informationen von einem externen MIDI-Gerät in Sonic Pi zu bekommen "
"müssen wir es zunächst an unseren Computer anschließen. Normalerweise wird "
"das mittels einer USB-Verbindung sein, ältere Geräte hingegen haben einen 5"
"-Pol-DIN-Stecker für den du Hardwareunterstützung in deinem Computer "
"brauchst (manche Audio-Interfaces bzw. Soundkarten haben MIDI-DIN-Stecker). "
"Nachdem du dein Gerät angeschlossen hast, starte Sonic Pi und wirf einen "
"Blick auf den I/O-Bereich in den Einstellungen. Du solltest dein Gerät dort "
"aufgelistet finden. Falls nicht, klicke auf 'MIDI zurücksetzen' und sieh "
"nach, ob es auftaucht. Wenn du immer noch keinen Eintrag in der Liste "
"findest, ist der nächste Schritt zu versuchen in der MIDI-Konfiguration "
"deines Betriebssystems nachzusehen, um zu sehen ob dein Gerät erkannt wird. "
"Wenn das alles fehlschlägt, kannst du gerne in unserem freundlichen "
"öffentlichen Forum Fragen dazu stellen: https://in-thread.sonic-pi.net"

#: 11.1-MIDI-In.md:26
msgid "Receiving MIDI Events"
msgstr "MIDI-Ereignisse empfangen"

#: 11.1-MIDI-In.md:28
msgid ""
"Once your device is connected, Sonic Pi will automatically receive events. You"
" can see for yourself by manipulating your MIDI device and looking at the cue "
"logger in the bottom right of the application window below the log (if this is"
"n't visible go to Preferences->Editor->Show & Hide and enable the 'Show cue lo"
"g' tickbox). You'll see a stream of events such as:"
msgstr ""
"Sobald dein Gerät verbunden ist, wird Sonic Pi automatisch Ereignisse "
"empfangen. Du kannst das selbst nachprüfen indem du dein MIDI-Gerät bedienst "
"und auf das Cue-Protokoll unten rechts im Anwendungsfenster unterhalb des "
"Protokolls schaust (falls es nicht sichtbar ist, gehe zu "
"Einstellungen->Editor->Ein-/Ausblenden und aktiviere 'Zeige Cue-Protokoll'). "
"Du wirst einen Datenstrom von Ereignissen sehen wie:"

#: 11.1-MIDI-In.md:35
#, no-wrap
msgid ""
"/midi:nanokey2_keyboard:0:1/note_off  [55, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [53, 102]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [57, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [53, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [57, 87]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [55, 81]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [53, 96]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [55, 64]"
msgstr ""
"/midi:nanokey2_keyboard:0:1/note_off  [55, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [53, 102]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [57, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [53, 64]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [57, 87]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [55, 81]\n"
"/midi:nanokey2_keyboard:0:1/note_on   [53, 96]\n"
"/midi:nanokey2_keyboard:0:1/note_off  [55, 64]"

#: 11.1-MIDI-In.md:46
msgid ""
"Once you can see a stream of messages like this, you've successfully connected"
" your MIDI device. Congratulations, let's see what we can do with it!"
msgstr ""
"Wenn du einen Strom von Signalen wie diesen siehst, hast du dein MIDI-Gerät "
"erfolgreich verbunden. Glückwunsch, lass uns schauen, was wir damit machen "
"können!"

#: 11.1-MIDI-In.md:50
msgid "MIDI Time State"
msgstr "MIDI-Time-State"

#: 11.1-MIDI-In.md:52
msgid ""
"These events are broken into two sections. Firstly there's the name of the eve"
"nt such as `/midi:nanokey2_keyboard:0:1/note_on` and secondly there's the valu"
"es of the event such as `[18, 62]`. Interestingly, these are the two things we"
" need to store information in Time State. *Sonic Pi automatically inserts inco"
"ming MIDI events into Time State*. This means you can `get` the latest MIDI va"
"lue and also `sync` waiting for the next MIDI value using everything we learne"
"d in section 10 of this tutorial."
msgstr ""
"Diese Ereignisse sind in zwei Abschnitte unterteilt. Als Erstes steht da der "
"Name des Ereignisses, wie z. B. `/midi:nanokey2_keyboard:0:1/note_on` und "
"zum Zweiten gibt es die Werte des Ereignisses wie z. B. `[18, 62]`. "
"Interessanterweise sind das die zwei Dinge, die wir brauchen, um Ereignisse "
"in Time-State zu speichern. *Sonic Pi fügt eingehende MIDI-Ereignisse "
"automatisch in Time-State ein*. Das bedeutet du kannst auf den letzten MIDI -"
"Wert mit `get` zugreifen, und auch mit `sync` auf den nächsten MIDI-Wert "
"warten - dabei kannst du alles anwenden, was wir in Abschnitt 10 dieses "
"Tutorials gelernt haben."

#: 11.1-MIDI-In.md:60
msgid "Controlling Code"
msgstr "Programm-Code steuern"

#: 11.1-MIDI-In.md:62
msgid ""
"Now we've connected a MIDI device, seen its events in the cue log and discover"
"ed that our knowledge of Time State is all we need to work with the events, we"
" can now start having fun. Let's build a simple MIDI piano:"
msgstr ""
"Nachdem wir jetzt ein MIDI-Gerät verbunden haben, dessen Ereignisse im Cue-"
"Protokoll sehen konnten und wissen, dass unsere Kenntnisse über Time-State "
"alles sind, was wir zum Arbeiten mit Ereignissen brauchen - können wir jetzt "
"anfangen Spaß zu haben. Lass uns ein einfaches MIDI-Piano bauen:"

#: 11.1-MIDI-In.md:67
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note\n"
"end"
msgstr ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note\n"
"end"

#: 11.1-MIDI-In.md:74
msgid ""
"There's a few things going on in the code above including some issues. Firstly"
", we have a simple `live_loop` which will repeat forever running the code betw"
"een the `do`/`end` block. This was introduced in Section 9.2. Secondly, we're "
"calling `sync` to wait for the next matching Time State event. We use a string"
" representing the MIDI message we're looking for (which is the same as was dis"
"played in the cue logger). Notice that this long string is provided to you by "
"Sonic Pi's autocompletion system, so you don't have to type it all out by hand"
". In the log we saw that there were two values for each MIDI note on event, so"
" we assign the result to two separate variables `note` and `velocity`. Finally"
" we trigger the `:piano` synth passing our note."
msgstr ""
"Es passieren einige Dinge im obigen Code, einschließlich einiger Probleme. "
"Zunächst haben wir da einen einfachen `live_loop`, der den Code zwischen dem "
"`do`/`end` Block unendlich wiederholt. Das wurde im Abschnitt 9.2 behandelt. "
"Danach rufen wir `sync` auf, um auf das nächste Time-State-Ereignis zu "
"warten. Wir benutzen eine Zeichenkette, die das MIDI-Signal repräsentiert, "
"nach dem wir suchen (es ist dasselbe, das uns im Cue-Protokoll angezeigt "
"wurde). Achte darauf, wie dir Sonic Pi die vollständige Zeichenkette mit "
"seinem Autovervollständigungssystem erstellt, sodass du sie nicht komplett "
"von Hand eintippen musst. Im Protokoll haben wir gesehen, dass es zwei Werte "
"für jedes MIDI-Note-on-Ereignis gab, also weisen wir das Ergebnis zwei "
"separaten Variablen `note` und `velocity` zu. Schließlich triggern wir den "
"`:piano`-Synth und übergeben unsere Note."

#: 11.1-MIDI-In.md:86
msgid ""
"Now, you try it. Type in the code above, replace the sync key with a string ma"
"tching your specific MIDI device and hit Run. Hey presto, you have a working p"
"iano! However, you'll probably notice a couple of problems: firstly all the no"
"tes are the same volume regardless of how hard you hit the keyboard. This can "
"be easily fixed by using the velocity MIDI value and converting it to an ampli"
"tude. Given that MIDI has a range of 0->127, to convert this number to a value"
" between 0->1 we just need to divide it by 127:"
msgstr ""
"Jetzt probiere du es. Gib den obigen Programm-Code ein, ersetzte in sync den "
"Schlüssel mit einer Zeichenkette, die zu deinem spezifischen MIDI-Gerät "
"passt und klicke auf Ausführen. Hey, und schon hast du ein funktionierendes "
"Klavier! Wahrscheinlich fallen dir jedoch ein paar Probleme auf: Unabhängig "
"davon wie stark du die Tasten anschlägst, klingen die Noten immer gleich "
"laut. Das lässt sich leicht dadurch beheben, dass wir den MIDI-Wert für "
"Velocity (Anschlagstärke) nutzen und zu Lautstärke wandeln. Da MIDI einen "
"Wertebereich von 0-127 hat, müssen wir diese Zahl in einen Wert zwischen 0-"
">1 zu konvertieren, indem wir sie einfach durch 127 teilen:"

#: 11.1-MIDI-In.md:95
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"
msgstr ""
"live_loop :midi_piano do\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"

#: 11.1-MIDI-In.md:102
msgid ""
"Update the code and hit Run again. Now the velocity of the keyboard is honoure"
"d. Next, let's get rid of that pesky pause."
msgstr ""
"Aktualisiere deinen Code und klicke nochmals auf Ausführen. Jetzt wird der "
"Anschlagstärke des Keyboards berücksichtigt. Als nächstes lass uns diese "
"nervige Pause loswerden."

#: 11.1-MIDI-In.md:105
msgid "Removing Latency"
msgstr "Latenz entfernen"

#: 11.1-MIDI-In.md:107
msgid ""
"Before we can remove the pause, we need to know why it's there. In order to ke"
"ep all the synths and FX well-timed across a variety of differently capable CP"
"Us, Sonic Pi schedules the audio *in advance* by 0.5s by default. (Note that t"
"his added latency can be configured via the fns `set_sched_ahead_time!` and `u"
"se_sched_ahead_time`). This 0.5s latency is being added to our `:piano` synth "
"triggers as it is added to all synths triggered by Sonic Pi. Typically we real"
"ly want this added latency as it means all synths will be well timed. However,"
" this only makes sense for synths triggered by code using `play` and `sleep`. "
"In this case, we're actually triggering the `:piano` synth with our external M"
"IDI device and therefore don't want Sonic Pi to control the timing for us. We "
"can turn off this latency with the command `use_real_time` which disables the "
"latency for the current thread. This means you can use real time mode for live"
" loops that have their timing controlled by `sync`ing with external devices, a"
"nd keep the default latency for all other live loops. Let's see:"
msgstr ""
"Bevor wir die Pause entfernen können, müssen wir herausfinden, warum sie da "
"ist. Um alle Synths und Effekte auf einer Vielzahl von unterschiedlich "
"starken CPUs gut getaktet zu halten, setzt Sonic Pi Audio-Ereignisse "
"standardmäßig 0,5 Sekunden *im Voraus* an. (Beachte, dass diese zusätzliche "
"Latenz über die Funktionen `set_sched_ahead_time!` und `use_sched_ahead_time`"
" konfiguriert werden kann). Diese 0,5 Sekunden Latenz werden zu unseren "
"`:piano` Synth-Triggern hinzugefügt, so wie bei allen Synths, die von Sonic "
"Pi getriggert werden. Typischerweise wollen wir diese hinzugefügte Latenz, "
"weil sie bedeutet, dass alle Synths gut getaktet laufen werden. Das ergibt "
"jedoch nur Sinn bei Synths, die von Programm-Code durch `play` und `sleep` "
"getriggert werden. In diesem Fall triggern wir den `:piano`-Synth jedoch "
"tatsächlich mit unserem externen MIDI-Gerät und möchten daher nicht, dass "
"Sonic Pi das Timing für uns steuert. Wir können diese Latenz mit dem Befehl "
"`use_real_time` ausschalten, der für den aktuellen Thread die Latenz "
"ausschaltet. Das bedeutet, dass du den Echtzeitmodus `use_real_time` für "
"Live-Loops verwenden kannst, die ihr Timing mittels `sync` mit externen "
"Geräten synchronisieren, und für alle anderen Live-Loops die normale Latenz "
"behalten kannst. Lass mal sehen:"

#: 11.1-MIDI-In.md:124
#, no-wrap
msgid ""
"live_loop :midi_piano do\n"
"  use_real_time\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"
msgstr ""
"live_loop :midi_piano do\n"
"  use_real_time\n"
"  note, velocity = sync \"/midi:nanokey2_keyboard:0:1/note_on\"\n"
"  synth :piano, note: note, amp: velocity / 127.0\n"
"end"

#: 11.1-MIDI-In.md:132
msgid ""
"Update your code to match the code above and hit Run again. Now we have a low "
"latency piano with variable velocity coded in just 5 lines. Wasn't that easy!"
msgstr ""
"Passe deinen Code entsprechend dem obigen Code an und klicke nochmals auf "
"Ausführen. Jetzt haben wir ein Piano mit niedriger Latenz und variabler "
"Anschlagstärke mit nur 5 Zeilen programmiert. Wenn das nicht einfach war!"

#: 11.1-MIDI-In.md:136
msgid "Getting Values"
msgstr "Werte erhalten"

#: 11.1-MIDI-In.md:138
msgid ""
"Finally, as our MIDI events are going straight into the Time State, we can als"
"o use the `get` fn to retrieve the last seen value. This doesn't block the cur"
"rent thread and returns `nil` if there's no value to be found (which you can o"
"verride by passing a default value - see the docs for `get`). Remember that yo"
"u can call `get` in any thread at any time to see the latest matching Time Sta"
"te value. You can even use `time_warp` to jump back in time and call `get` to "
"see past events..."
msgstr ""
"Schließlich, da unsere MIDI-Ereignisse direkt in den Time-State gehen, "
"können wir die `get`-Funktion benutzen, um den letzten gesehenen Wert zu "
"erhalten. Dies blockiert nicht den aktuellen Thread und gibt `nil` zurück, "
"wenn es keinen Wert gibt (was du überschreiben kannst, indem du einen "
"Standardwert übergibst - sieh dir dafür die Dokumentation für `get` an). "
"Erinnere dich, dass du `get` in jedem Thread und zu jeder Zeit aufrufen "
"kannst, um den letzten passenden Time-State-Wert zu erhalten. Du kannst "
"sogar `time_warp` benutzen, um in der Zeit zurück zu springen und mit `get` "
"vergangene Events angezeigt zu bekommen ..."

#: 11.1-MIDI-In.md:147
msgid "Now You are in Control"
msgstr "Jetzt hast du die Kontrolle"

#: 11.1-MIDI-In.md:149
msgid ""
"The exciting thing now is that you can now use the same code structures to `sy"
"nc` and `get` MIDI information from any MIDI device and do whatever you want w"
"ith the values. You can now choose what your MIDI device will do!"
msgstr ""
"Das eigentlich Aufregende ist, dass du dieselben Code-Strukturen verwenden "
"kannst, um mittels `sync` und `get` MIDI-Informationen mit jedem beliebigen "
"MIDI-Gerät zu synchronisieren und du mit diesen Werten tun kannst, was du "
"willst. Jetzt kannst du entscheiden, was dein MIDI-Gerät tun wird!"

#: 11.2-MIDI-Out.md:1
msgid "11.2 MIDI Out"
msgstr "11.2 MIDI-Ausgabe"

#: 11.2-MIDI-Out.md:3
msgid "MIDI Out"
msgstr "MIDI-Ausgabe"

#: 11.2-MIDI-Out.md:5
msgid ""
"In addition to receiving MIDI events we can also send out MIDI events to trigg"
"er and control external hardware synths, keyboards and other devices. Sonic Pi"
" provides a full set of fns for sending various MIDI messages such as:"
msgstr ""
"Zusätzlich zum Empfangen von MIDI-Ereignissen können wir auch MIDI-"
"Ereignisse aussenden, um externe Hardware-Synths, Keyboards und andere "
"Geräte zu triggern und zu steuern. Sonic Pi bietet einen vollständigen Satz "
"von Funktionen zum Senden verschiedener MIDI-Signale wie z. B:"

#: 11.2-MIDI-Out.md:9
msgid "Note on - `midi_note_on`"
msgstr "Note an - `midi_note_on`"

#: 11.2-MIDI-Out.md:10
msgid "Note off - `midi_note_off`"
msgstr "Note aus - `midi_note_off`"

#: 11.2-MIDI-Out.md:11
msgid "Control change - `midi_cc`"
msgstr "Steuerungsänderung - `midi_cc`"

#: 11.2-MIDI-Out.md:12
msgid "Pitch bend - `midi_pitch_bend`"
msgstr "Tonhöhenänderung - `midi_pitch_bend`"

#: 11.2-MIDI-Out.md:13
msgid "Clock ticks - `midi_clock_tick`"
msgstr "Taktgeber - `midi_clock_tick`"

#: 11.2-MIDI-Out.md:15
msgid ""
"There are many other supported MIDI messages too - check out the API documenta"
"tion for all the other fns that start with `midi_`."
msgstr ""
"Es gibt noch eine Menge weiterer MIDI-Signale, die unterstützt werden – sieh "
"dir in der API-Dokumentation alle weiteren Funktionen an, die mit `midi_` "
"beginnen."

#: 11.2-MIDI-Out.md:18
msgid "Connecting to a MIDI Device"
msgstr "Mit einem MIDI-Gerät verbinden"

#: 11.2-MIDI-Out.md:20
msgid ""
"In order to send a MIDI message to an external device, we must first have conn"
"ected it. Check out the subsection 'Connecting a MIDI Controller' in section 1"
"1.1 for further details. Note that if you're using USB, connecting to a device"
" which you're sending to (rather than receiving from) is the same procedure. H"
"owever, if you're using the classic DIN connectors, make sure you connect to t"
"he MIDI out port of your computer. You should see your MIDI device listed in t"
"he preferences pane."
msgstr ""
"Um ein MIDI-Signal an ein externes Gerät zu senden, muss es zunächst "
"angeschlossen sein. Für weitere Details sieh dir den Unterabschnitt "
"'Anschließen eines MIDI-Controllers' in Abschnitt 11.1 an. Beachte, dass, "
"wenn du dich über USB mit einem Gerät verbindest, an das du sendest (anstatt "
"zu empfangen) die Prozedur jeweils die gleiche ist. Wenn du jedoch die "
"klassischen DIN-Anschlüsse verwendest, stelle sicher, dass du es mit dem "
"MIDI-Ausgang deines Computers verbindest. Du solltest dein MIDI-Gerät in den "
"Einstellungen sehen."

#: 11.2-MIDI-Out.md:29
msgid "Sending MIDI events"
msgstr "MIDI-Ereignisse senden"

#: 11.2-MIDI-Out.md:31
msgid ""
"The many `midi_*` fns work just like `play`, `sample` and `synth` in that they"
" send a message at the current (logical) time. For example, to spread out call"
"s to the `midi_*` fns you need to use `sleep` just like you did with `play`. L"
"et's take a look:"
msgstr ""
"Die vielen `midi_*`-Funktionen arbeiten ebenso wie `play`, `sample` und "
"`synth`, indem sie ein Signal zur aktuellen (logischen) Zeit schicken . Um "
"zum Beispiel Aufrufe an die `midi_*`-Funktionen zu verteilen, musst du "
"`sleep` in der gleichen Weise benutzen wie du es bei `play` getan hast. Lass "
"uns das ansehen:"

#: 11.2-MIDI-Out.md:36
#, no-wrap
msgid "midi_note_on :e3, 50"
msgstr "midi_note_on :e3, 50"

#: 11.2-MIDI-Out.md:40
msgid ""
"This will send a MIDI note on event to the connected MIDI device with velocity"
" 50. (Note that Sonic Pi will automatically convert notes in the form `:e3` to"
" their corresponding MIDI number such as 52 in this case.)"
msgstr ""
"Dies sendet ein MIDI-Note-on-Ereignis an das angeschlossene MIDI-Gerät mit "
"Anschlagstärke 50. (Beachte, dass Sonic Pi Noten in der Form von `:e3` "
"automatisch in ihre entsprechenden MIDI-Nummern konvertiert, wie z. B. 52 in "
"diesem Fall.)"

#: 11.2-MIDI-Out.md:44
msgid ""
"If your connected MIDI device is a synthesiser, you should be able to hear it "
"playing a note. To disable it use `midi_note_off`:"
msgstr ""
"Wenn dein MIDI-Gerät ein Synthesizer ist, solltest du hören können, wie er "
"eine Note spielt. Um dies zu deaktivieren verwende `midi_note_off`:"

#: 11.2-MIDI-Out.md:47
#, no-wrap
msgid "midi_note_off :e3"
msgstr "midi_note_off :e3"

#: 11.2-MIDI-Out.md:51
msgid "Selecting a MIDI device"
msgstr "Auswahl eines MIDI-Gerätes"

#: 11.2-MIDI-Out.md:53
msgid ""
"By default, Sonic Pi will send each MIDI message to all connected devices on a"
"ll MIDI channels. This is to make it easy to work with a single connected devi"
"ce without having to configure anything. However, sometimes a MIDI device will"
" treat MIDI channels in a special way (perhaps each note has a separate channe"
"l) and also you may wish to connect more than one MIDI device at the same time"
". In more complicated setups, you may wish to be more selective about which MI"
"DI device receives which message(s) and on which channel."
msgstr ""
"Standardmäßig wird Sonic Pi jedes MIDI-Signal an alle angeschlossenen Geräte "
"auf allen MIDI-Kanälen senden. Auf diese Art ist es leicht mit einem "
"einzelnen verbundenen Gerät zu arbeiten, ohne zuvor etwas einstellen zu "
"müssen. Allerdings kann es sein, dass ein MIDI-Gerät MIDI-Kanäle auf "
"spezielle Art handhabt (möglicherweise hat jede Note einen eigenen Kanal) - "
"und außerdem möchtest vielleicht mehr als ein MIDI-Gerät zur gleichen Zeit "
"anschließen. Und bei etwas komplizierteren Setups, möchtest du "
"wahrscheinlich genauer bestimmen, welches Gerät welche(s) Signal(e) erhält, "
"und auf welchem Kanal."

#: 11.2-MIDI-Out.md:62
msgid ""
"We can specify which device to send to using the `port:` opt, using the device"
" name as displayed in the preferences:"
msgstr ""
"Wir können festlegen an welches Gerät wir senden, indem wir die `port:`-"
"Option verwenden, in der wir den Gerätenamen verwenden, wie er in den "
"Einstellungen angezeigt wird:"

#: 11.2-MIDI-Out.md:65
#, no-wrap
msgid "midi_note_on :e3, port: \"moog_minitaur\""
msgstr "midi_note_on :e3, port: \"moog_minitaur\""

#: 11.2-MIDI-Out.md:69
msgid ""
"We can also specify which channel to send to using the `channel:` opt (using a"
" value in the range 1-16):"
msgstr ""
"Wir können ebenfalls angeben, an welchen Kanal gesendet werden soll, indem "
"wir die Option `channel:` (mit einem Wert im Bereich 1-16) verwenden:"

#: 11.2-MIDI-Out.md:72
#, no-wrap
msgid "midi_note_on :e3, channel: 3"
msgstr "midi_note_on :e3, channel: 3"

#: 11.2-MIDI-Out.md:76
msgid ""
"Of course we can also specify both at the same time to send to a specific devi"
"ce on a specific channel:"
msgstr ""
"Natürlich können wir auch beides zugleich festlegen, um an ein bestimmtes "
"Gerät auf einen bestimmten Kanal zu senden:"

#: 11.2-MIDI-Out.md:79
#, no-wrap
msgid "midi_note_on :e3, port: \"moog_minitaur\", channel: 5"
msgstr "midi_note_on :e3, port: \"moog_minitaur\", channel: 5"

#: 11.2-MIDI-Out.md:83
msgid "MIDI Studio"
msgstr "MIDI-Studio"

#: 11.2-MIDI-Out.md:85
msgid ""
"Finally, a really fun thing to do is to connect the audio output of your MIDI "
"synthesiser to one of the audio inputs of your soundcard. You can then control"
" your synth with code using the `midi_*` fns and also manipulate the audio usi"
"ng `live_audio` and FX:"
msgstr ""
"Und schließlich ist es eine wirklich spannende Sache, den Audio-Ausgang "
"deines MIDI-Synthesizers mit einem der Audio-Eingänge deiner Soundkarte zu "
"verbinden. So kannst du deinen Synthesizer mit den `midi_*`Funktionen "
"steuern und gleichzeitig die erzeugten Klänge mit `live_audio` und Effekten "
"verändern:"

#: 11.2-MIDI-Out.md:90
#, no-wrap
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_audio :moog\n"
"end\n"
"live_loop :moog_trigger do\n"
"  midi (octs :e1, 3).tick, sustain: 0.1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"with_fx :reverb, room: 1 do\n"
"  live_audio :moog\n"
"end\n"
"live_loop :moog_trigger do\n"
"  midi (octs :e1, 3).tick, sustain: 0.1\n"
"  sleep 0.125\n"
"end"

#: 11.2-MIDI-Out.md:101
msgid ""
"(The fn `midi` is available as a handy shortcut to sending both note on and no"
"te off events with a single command. Check out its documentation for further i"
"nformation)."
msgstr ""
"(Die `midi`-Funktion ist eine handliche Kurzform, um `note on `- und `note "
"off`-Ereignisse mit einem einzigen Befehl zu senden. Für weitere "
"Informationen wirf einen Blick in ihre Dokumentation)."

#: 12-OSC.md:1
msgid "12 OSC"
msgstr "12 OSC"

#: 12-OSC.md:3
msgid "OSC"
msgstr "OSC"

#: 12-OSC.md:5
msgid ""
"In addition to MIDI, another way to get information in and out of Sonic Pi is "
"via the network using a simple protocol called OSC - Open Sound Control. This "
"will let you send messages to and from external programs (both running on your"
" computer and on external computers) which opens up the potential for control "
"way beyond MIDI which has limitations due to its 1980s design."
msgstr ""
"Es gibt neben MIDI in Sonic Pi noch einen Weg über das Netzwerk ein- und "
"ausgehende Informationen zu übertragen - das ist OSC - Open-Sound-Control, "
"ein einfaches Netzwerkprotokoll. Es lässt dich Signale mit externen "
"Programme austauschen (mit Programmen sowohl auf deinem wie auch auf "
"externen Computern) und erweitert damit die Möglichkeiten zur Steuerung weit "
"über MIDI hinaus, welches durch sein Design aus den 80ern bestimmten "
"Einschränkungen unterliegt."

#: 12-OSC.md:12
msgid ""
"For example, you could write a program in another programming language which s"
"ends and receives OSC (there are OSC libraries for pretty much every common la"
"nguage) and work directly with Sonic Pi. What you can use this for is only lim"
"ited by your imagination."
msgstr ""
"Zum Beispiel könntest du ein Programm in einer anderen Programmiersprache "
"schreiben, welches OSC-Signale sendet und empfängt (es gibt OSC-Bibliotheken "
"für so ziemlich alle gebräuchlichen Programmiersprachen) - und direkt mit "
"Sonic Pi zusammenarbeitet. Wofür du das einsetzen kannst, wird nur durch "
"deine Vorstellungskraft begrenzt."

#: 12.1-Receiving-OSC.md:1
msgid "12.1 Receiving OSC"
msgstr "12.1 OSC empfangen"

#: 12.1-Receiving-OSC.md:3
msgid "Receiving OSC"
msgstr "OSC empfangen"

#: 12.1-Receiving-OSC.md:5
msgid ""
"By default when Sonic Pi is launched it listens to port 4560 for incoming OSC "
"messages from programs on the same computer. This means that without any confi"
"guration, you can send Sonic Pi an OSC message and it will be displayed in the"
" cue log just like incoming MIDI messages. This also means that any incoming O"
"SC message is also automatically added to the Time State which means you can a"
"lso use `get` and `sync` to work with the incoming data - just like with MIDI "
"and synchronising `live_loops` - see sections 5.7 and 10.2 to recap how this w"
"orks."
msgstr ""
"Standardmäßig lauscht Sonic Pi wenn es gestartet wird an Port 4560 auf "
"eingehende OSC-Signale von Programmen auf demselben Computer. Das bedeutet, "
"dass du ohne weitere Konfiguration Sonic Pi ein OSC-Signal senden kannst und "
"dieses im Cue-Protokoll, genauso wie eingehende MIDI-Signale, angezeigt "
"wird. Das heißt auch, jedes eingehende OSC-Signal wird automatisch zum Time-"
"State hinzugefügt, was bedeutet, dass du `get` und `sync` verwenden kannst, "
"um mit den eingehenden Daten zu arbeiten - genauso wie bei MIDI und der "
"Synchronisierung von `live_loops` - sieh in den Abschnitten 5.7 und 10.2 "
"nach, um zu rekapitulieren, wie das funktioniert."

#: 12.1-Receiving-OSC.md:15
msgid "A Basic OSC Listener"
msgstr "Ein einfacher OSC-Empfänger"

#: 12.1-Receiving-OSC.md:17
msgid "Let's build a basic OSC listener:"
msgstr "Lass uns einen einfachen OSC-Empfänger bauen:"

#: 12.1-Receiving-OSC.md:19
#, no-wrap
msgid ""
"live_loop :foo do\n"
"  use_real_time\n"
"  a, b, c = sync \"/osc*/trigger/prophet\"\n"
"  synth :prophet, note: a, cutoff: b, sustain: c\n"
"end"
msgstr ""
"live_loop :foo do \n"
"  use_real_time\n"
"  a, b, c = sync \"/osc*/trigger/prophet\"\n"
"  synth :prophet, note: a, cutoff: b, sustain: c\n"
"end"

#: 12.1-Receiving-OSC.md:27
msgid ""
"In this example we described an OSC path `\"/osc*/trigger/prophet\"` which we're"
" syncing on. This can be any valid OSC path (all letters and numbers are suppo"
"rted and the `/` is used like in a URL to break up the path to multiple words)"
". The `/osc` prefix is added by Sonic Pi to all incoming OSC messages, so we n"
"eed to send an OSC message with the path `/trigger/prophet` for our `sync` to "
"stop blocking and the prophet synth to be triggered."
msgstr ""
"In diesem Beispiel geben wir einen OSC-Pfad an, mit dem wir uns "
"synchronisieren, `\"/osc*/trigger/prophet\"`. Dies kann ein beliebiger "
"gültiger OSC-Pfad sein (alle Buchstaben und Zahlen sind erlaubt, das `/`wird "
"wie in einer URL verwendet um Wörter zu trennen). Das Präfix `/osc` wird von "
"Sonic Pi allen eingehenden OSC-Signalen vorangestellt, also müssen wir eine "
"OSC-Signal mit dem Pfad `/trigger/prophet` senden, damit der `sync`-Befehl "
"beendet und der prophet-Synth getriggert wird."

#: 12.1-Receiving-OSC.md:36
msgid "Sending OSC to Sonic Pi"
msgstr "OSC an Sonic Pi senden"

#: 12.1-Receiving-OSC.md:38
msgid ""
"We can send OSC to Sonic Pi from any programming language that has an OSC libr"
"ary. For example, if we're sending OSC from Python we might do something like "
"this:"
msgstr ""
"Wir können OSC von jeder beliebigen Programmsprache, die eine Bibliothek für "
"OSC bietet, aus an Sonic Pi senden. Wenn wir zum Beispiel OSC von Python aus "
"senden, machen wir vielleicht so etwas:"

#: 12.1-Receiving-OSC.md:42
#, no-wrap
msgid ""
"from pythonosc import osc_message_builder\n"
"from pythonosc import udp_client\n"
"sender = udp_client.SimpleUDPClient('127.0.0.1', 4560)\n"
"sender.send_message('/trigger/prophet', [70, 100, 8])"
msgstr ""
"from pythonosc import osc_message_builder \n"
"from pythonosc import udp_client\n"
"sender = udp_client.SimpleUDPClient('127.0.0.1', 4560)\n"
"sender.send_message('/trigger/prophet', [70, 100, 8])"

#: 12.1-Receiving-OSC.md:50
msgid ""
"Or, if we're sending OSC from Clojure we might do something like this from the"
" REPL:"
msgstr ""
"Oder wenn wir OSC aus Clojure senden, machen wir vielleicht etwas wie dies "
"aus dem REPL:"

#: 12.1-Receiving-OSC.md:52
#, no-wrap
msgid ""
"(use 'overtone.core)\n"
"(def c (osc-client \"127.0.0.1\" 4560))\n"
"(osc-send c \"/trigger/prophet\" 70 100 8)"
msgstr ""
"(use 'overtone.core) \n"
"(def c (osc-client \"127.0.0.1\" 4560))\n"
"(osc-send c \"/trigger/prophet\" 70 100 8)"

#: 12.1-Receiving-OSC.md:58
msgid "Receiving from External Machines"
msgstr "Von externen Computern empfangen"

#: 12.1-Receiving-OSC.md:60
msgid ""
"For security reasons, by default Sonic Pi does not let remote machines send it"
" OSC messages. However, you can enable support for remote machines in Preferen"
"ces->IO->Network->Receive Remote OSC Messages. Once you've enabled this, you c"
"an receive OSC messages from any computer on your network. Typically the sendi"
"ng machine will need to know your IP address (a unique identifier for your com"
"puter on your network - kind of like a phone number or an email address). You "
"can discover the IP address of your computer by looking at the IO section of t"
"he preferences pane. (If your machine happens to have more than one IP address"
", hovering the mouse over the listed address will pop up with a list of all kn"
"own addresses)."
msgstr ""
"Aus Sicherheitsgründen empfängt Sonic Pi standardmäßig keine OSC Nachrichten "
"von externen Computern. Du kannst jedoch Unterstützung für externe Geräte "
"unter Einstellungen->I/O->Netzwerk->Empfange OSC von externen Computern "
"einschalten. Du kannst anschließend OSC-Signale beliebigen Computern in "
"deinem Netzwerk empfangen. Das sendende Gerät muss dafür deine IP-Adresse "
"kennen (eine eindeutige Bezeichnung deines Computers in deinem Netzwerk - "
"ganz so wie eine Telefonnummer oder Email-Adresse). Du kannst die IP-Adresse "
"deines Computers herausfinden, indem du in Einstellungen im Abschnitt I/O "
"nachsiehst. (Falls dein Computer mehrere IP-Adressen haben sollte, kannst du "
"die alle bekannten Adressen anzeigen lassen, indem du den Mauszeiger über "
"der angezeigten Adresse schweben lässt)."

#: 12.1-Receiving-OSC.md:72
msgid ""
"Note, some programs such as TouchOSC for iPhone and Android support sending OS"
"C as a standard feature. So, once you're listening to remote machines and know"
" your IP address you can instantly start sending messages from apps like Touch"
"OSC which enable you to build your own custom touch controls with sliders, but"
"tons, dials etc. This can provide you with an enormous range of input options."
msgstr ""
"Beachte, dass manche Programme, wie z. B. TouchOSC für iPhone und Android, "
"das Senden von OSC-Signalen von Haus aus unterstützen. Also kannst du, "
"sobald du auf OSC-Signale von externen Geräten lauscht und du deine IP-"
"Adresse kennst, anfangen OSC-Signale von Apps wie TouchOSC zu senden und "
"deine eigenen Steuerungen mit Slidern, Schaltflächen, Drehknöpfen usw. zu "
"bauen. Das kann dir eine enorme Bandbreite an Eingabemöglichkeiten "
"erschließen."

#: 12.2-Sending-OSC.md:1
msgid "12.2 Sending OSC"
msgstr "12.2 OSC senden"

#: 12.2-Sending-OSC.md:3
msgid "Sending OSC"
msgstr "OSC senden"

#: 12.2-Sending-OSC.md:5
msgid ""
"In addition to receiving OSC and working with it using Time State, we can also"
" send out OSC messages in time with our music (just like we can send out MIDI "
"messages in time with our music). We just need to know which IP address and po"
"rt we're sending to. Let's give it a try:"
msgstr ""
"So wie wir OSC empfangen und mittels Time-State verarbeiten, können wir auch "
"OSC senden (ganz so wie wir MIDI-Signale im Takt unserer Musik senden können)"
". Wir müssen nur wissen an welche IP-Adresse und welchen Port wir senden. "
"Lass uns das ausprobieren:"

#: 12.2-Sending-OSC.md:10
#, no-wrap
msgid ""
"use_osc \"localhost\", 4560\n"
"osc \"/hello/world\""
msgstr ""
"use_osc \"localhost\", 4560\n"
"osc \"/hello/world\""

#: 12.2-Sending-OSC.md:15
msgid ""
"If you run the code above, you'll notice that Sonic Pi is sending itself an OS"
"C message! This is because we set the IP address to the current machine and th"
"e port to the default OSC in port. This is essentially the same as posting a l"
"etter to yourself - the OSC packet is created, leaves Sonic Pi, gets to the ne"
"twork stack of the operating system which then routes the packed back to Sonic"
" Pi and then it's received as a standard OSC message and is visible in the cue"
" logger as the incoming message `/osc:127.0.0.1:4560/hello/world`. (Notice how"
" Sonic Pi automatically prefixes all incoming OSC messages with `/osc` and the"
"n the hostname and port of the sender.)"
msgstr ""
"Wenn du den Code von oben ausführst, wird dir auffallen, dass Sonic Pi ein "
"OSC-Signal an sich selbst sendet! Das kommt daher, dass wir als IP-Adresse "
"und Port auf den Standard-OSC-Port von Sonic Pi gesetzt haben. Das ist im "
"Grunde so, als würdest du einen Brief an dich selbst schreiben - das OSC-"
"Paket wird erzeugt, verlässt Sonic Pi, landet auf dem Netzwerkstapel deines "
"Betriebssystems, das es dann zurück an Sonic Pi schickt, mit dem im "
"Protokoll sichtbaren Standard-OSC-Signal `/osc:127.0.0.1:4560/hello/world`. ("
"Beachte wie Sonic Pi automatisch das Prefix `/osc` für alle eingehenden "
"Nachrichten setzt.)"

#: 12.2-Sending-OSC.md:25
msgid "Sending OSC to other programs"
msgstr "OSC an andere Programme senden"

#: 12.2-Sending-OSC.md:27
msgid ""
"Of course, sending OSC messages to ourselves may be fun but it's not that usef"
"ul. The real benefit starts when we send messages to other programs:"
msgstr ""
"Natürlich kann es lustig sein OSC-Signale an uns selbst zu senden, hilfreich "
"ist es aber nicht. Den echten Nutzen erkennen wir dann, wenn wir Nachrichten "
"an andere Programme senden:"

#: 12.2-Sending-OSC.md:32
#, no-wrap
msgid ""
"use_osc \"localhost\", 123456\n"
"osc \"/hello/world\""
msgstr ""
"use_osc \"localhost\", 123456\n"
"osc \"/hello/world\""

#: 12.2-Sending-OSC.md:37
msgid ""
"In this case we're assuming there's another program on the same machine listen"
"ing to port 123456. If there is, then it will receive a `\"/hello/world` OSC me"
"ssage with which it can do what it wants."
msgstr ""
"In diesem Beispiel gehen wir davon aus, dass ein Programm auf dem selben "
"Computer an Port 123456 lauscht. Falls dies der Fall ist, wird es ein OSC-"
"Signal mit dem Inhalt `\"/hello/world\"` erhalten, welches es dann "
"verarbeiten kann."

#: 12.2-Sending-OSC.md:41
msgid ""
"If our program is running on another machine, we need to know its IP address w"
"hich we use instead of `\"localhost\"`:"
msgstr ""
"Wenn dein Programm auf einer anderen Maschine läuft, müssen wir deren IP-"
"Adresse kennen, welche wir anstelle von `\"localhost\"`verwenden:"

#: 12.2-Sending-OSC.md:44
#, no-wrap
msgid ""
"use_osc \"192.168.10.23\", 123456\n"
"osc \"/hello/world\""
msgstr ""
"use_osc \"192.168.10.23\", 123456\n"
"osc \"/hello/world\""

#: 12.2-Sending-OSC.md:49
msgid ""
"Now we can send OSC messages to any device reachable to us via our local netwo"
"rks and even the internet!"
msgstr ""
"Nun können wir OSC-Signale zu jedem erreichbaren Gerät senden, über das "
"lokale Netzwerk und sogar auch über das Internet!"

#: 13-Multichannel-Audio.md:1
msgid "13 Multichannel Audio"
msgstr "13 Multikanal-Audio"

#: 13-Multichannel-Audio.md:3
msgid "Multichannel Audio"
msgstr "Multikanal-Audio"

#: 13-Multichannel-Audio.md:5
msgid ""
"So far, in terms of sound production, we've explored triggering synths and rec"
"orded sounds via the fns `play`, `synth` and `sample`. These have then generat"
"ed audio which has played through our stereo speaker system. However, many com"
"puters also have the ability to input sound, perhaps through a microphone, in "
"addition to the ability to send sound out to more than two speakers. Often, th"
"is capability is made possible through the use of an external sound card - the"
"se are available for all platforms. In this section of the tutorial we'll take"
" a look at how we can take advantage of these external sound cards and effortl"
"essly work with multiple channels of audio in and out of Sonic Pi."
msgstr ""
"In Sachen Klangproduktion haben wir bis jetzt das Triggern von Synths und "
"aufgenommenen Klängen über die Funktionen `play`, `synth` und `sample` "
"erkundet. Diese haben dann hörbare Töne erzeugt, die über unser Stereo-"
"Lautsprecher-System abgespielt wurden. Viele Computer verfügen jedoch auch "
"über die Fähigkeit Klänge einzuspielen, über ein Mikrofon zum Beispiel, und "
"zusätzlich auch über mehr als zwei Ausgänge auszuspielen. Oft wird diese "
"Fähigkeit durch die Verwendung eines externen Audio-Interface möglich "
"gemacht - es gibt sie für alle Plattformen. In diesem Abschnitt der "
"Tutorials sehen wir uns an, wie wir ein solches externes Audio-Interface "
"nutzen und damit mühelos mit mehreren Kanälen Audio auf Ein- und -Ausgängen "
"in Sonic Pi arbeiten können."

#: 13.1-Sound-In.md:1
msgid "13.1 Sound In"
msgstr "13.1 Sound-In"

#: 13.1-Sound-In.md:3
msgid "Sound In"
msgstr "Sound-In"

#: 13.1-Sound-In.md:5
msgid ""
"One simple (and perhaps familiar) way of accessing sound inputs is using our f"
"riend `synth` by specifying the `:sound_in` synth:"
msgstr ""
"Ein einfacher (und vielleicht schon bekannter) Weg um in Sonic Pi Audio-"
"Eingänge zu verwenden ist mit Hilfe unseres Freundes `synth` bzw. "
"der`:sound_in`-Funktion:"

#: 13.1-Sound-In.md:7
#, no-wrap
msgid "synth :sound_in"
msgstr "synth :sound_in"

#: 13.1-Sound-In.md:11
msgid ""
"This will operate just like any synth such as `synth :dsaw` with the exception"
" that the audio generated will be read directly from the first input of your s"
"ystem's sound card. On laptops, this is typically the built-in microphone, but"
" if you have an external sound card, you can plug any audio input to the first"
" input."
msgstr ""
"Dieser Synth wird genauso funktionieren wie jeder andere Synth, "
"beispielsweise `synth:dsaw`, mit der Ausnahme dass das eingehende Audio-"
"Signal direkt vom ersten Eingang deiner System-Sound-Karte gelesen wird. Auf "
"Laptops ist dies normalerweise das eingebaute Mikrofon, falls du aber ein "
"externes Audio-Interface verwendest, kannst du auch jedes andere Audio-"
"Signal an den ersten Eingang anschließen."

#: 13.1-Sound-In.md:17
msgid "Increasing the Duration"
msgstr "Erhöhung der Dauer"

#: 13.1-Sound-In.md:19
msgid ""
"One thing you might notice is that just like `synth :dsaw` the `:sound_in` syn"
"th only lasts for 1 beat as it has a standard envelope. If you'd like to keep "
"it open for a little longer, change the ADSR envelope settings. For example th"
"e following will keep the synth open for 8 beats before closing the connection"
":"
msgstr ""
"Eine Sache die dir sicher auffallen wird, ist, dass genauso wie `synth:dsaw` "
"der `:sound_in`-Synth nur für einen Beat lang hörbar ist, da er die Standard-"
"Hüllkurve verwendet. Falls du ihn für etwas länger offen halten möchtest, "
"kannst du die Einstellungen der ADSR-Hüllkurve ändern. Im folgenden Beispiel "
"wird der Synth für 8 Schläge hörbar sein, bevor die Verbindung geschlossen "
"wird:"

#: 13.1-Sound-In.md:22
#, no-wrap
msgid "synth :sound_in, sustain: 8"
msgstr "synth :sound_in, sustain: 8"

#: 13.1-Sound-In.md:28
msgid ""
"Of course, just like any normal synth, you can easily layer on effects with th"
"e FX block:"
msgstr ""
"Natürlich kannst du, genau wie bei jedem normalen Synth auch, mit dem FX "
"block einfach Effekte anwenden:"

#: 13.1-Sound-In.md:30
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :distortion do\n"
"    synth :sound_in, sustain: 8\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  with_fx :distortion do\n"
"    synth :sound_in, sustain: 8\n"
"  end\n"
"end"

#: 13.1-Sound-In.md:38
msgid ""
"If you have plugged in a guitar to your first input, you should be able to hea"
"r it with distortion and reverb until the synth terminates as expected."
msgstr ""
"Falls du nun eine Gitarre an den ersten Eingang angeschlossen hast, solltest "
"du sie jetzt mit einer Verzerrung und Hall hören können, bis der Synth "
"erwartungsgemäß endet."

#: 13.1-Sound-In.md:40
msgid ""
"You are free to use the `:sound_in` synth as many times as you like concurrent"
"ly (just like you would do with any normal synth). For example, the following "
"will play two `:sound_in` synths at the same time - one through distortion and"
" one through reverb:"
msgstr ""
"Du kannst den `:sound_in`-Synth so viele Male gleichzeitig einsetzen, wie du "
"möchtest (genauso wie du es mit jedem anderen Synth machen würdest). Zum "
"Beispiel werden im Folgenden zwei `:sound_in`-Synths gleichzeitig gespielt - "
"einer mit Verzerrung der andere mit Hall:"

#: 13.1-Sound-In.md:42
#, no-wrap
msgid ""
"with_fx :distortion do\n"
"  synth :sound_in, sustain: 8\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8\n"
"end"
msgstr ""
"with_fx :distortion do\n"
"  synth :sound_in, sustain: 8\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8\n"
"end"

#: 13.1-Sound-In.md:52
msgid "Multiple Inputs"
msgstr "Mehrere Eingänge"

#: 13.1-Sound-In.md:54
msgid ""
"You can select which audio input you want to play with the `input:` opt. You c"
"an also specify a stereo input (two consecutive inputs) using the `:sound_in_s"
"tereo` synth. For example, if you have a sound card with at least three inputs"
", you can treat the first two as a stereo stream and add distortion and the th"
"ird as a mono stream and add reverb with the following code:"
msgstr ""
"Du kannst über die `input:`-Option jeweils auswählen über welchem Audio-"
"Eingang du spielen willst. Du kannst außerdem mit `:sound_in_stereo`-Synth "
"auch einen Stereo-Eingang (zwei aufeinander folgende Eingänge) bestimmen. "
"Mit dem folgenden Beispiel könntest du, wenn du über eine Sound-Karte mit "
"mindestens drei Eingängen verfügst, die ersten beiden als Stereo-Signal "
"behandeln und Verzerrung hinzufügen, und den dritten als Mono-Signal "
"behandeln und Hall hinzufügen:"

#: 13.1-Sound-In.md:61
#, no-wrap
msgid ""
"with_fx :distortion do\n"
"  synth :sound_in_stereo, sustain: 8, input: 1\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8, input: 3\n"
"end"
msgstr ""
"with_fx :distortion do\n"
"  synth :sound_in_stereo, sustain: 8, input: 1\n"
"end\n"
"with_fx :reverb do  \n"
"  synth :sound_in, sustain: 8, input: 3\n"
"end"

#: 13.1-Sound-In.md:72
msgid "Potential Issues"
msgstr "Mögliche Probleme"

#: 13.1-Sound-In.md:74
msgid ""
"However, although this is a useful technique, there are a couple of limitation"
"s to this approach. Firstly, it only works for a specific duration (due to it "
"having an ADSR envelope) and secondly, there's no way to switch the FX around "
"once the synth has been triggered. Both of these things are typical requests w"
"hen working with external audio feeds such as microphones, guitars and externa"
"l synthesisers. We'll therefore take a look at Sonic Pi's solution to the prob"
"lem of manipulating a (potentially) infinite stream of live audio input: `live"
"_audio`."
msgstr ""
"Obwohl dies eine nützliche Technik darstellt, gibt es doch einige "
"Beschränkungen bei diesem Ansatz. Zunächst funktioniert sie nur über eine "
"festgelegte Dauer (da sie an eine ADSR-Hüllkurve gebunden ist), und des "
"weiteren gibt es keine Möglichkeit, die Effekte umzuschalten, sobald der "
"Synth getriggert wurde. Beides sind typische Anforderungen, wenn wir mit "
"externen Audio-Signalen wie Mikrophonen, Gitarren und externen Synthesizern "
"arbeiten. Wir werden uns daher mit Sonic Pis Lösung zu dem Problem "
"beschäftigen, mit einem (potentiell) unendlichen Audio-Signal an einem Audio-"
"Eingang zu arbeiten: `live_audio`."

#: 13.2-Live-Audio.md:1
msgid "13.2 Live Audio"
msgstr "13.2 Live-Audio"

#: 13.2-Live-Audio.md:3
msgid "Live Audio"
msgstr "Live-Audio"

#: 13.2-Live-Audio.md:5
msgid ""
"The `:sound_in` synth as described in the previous section provides a very fle"
"xible and familiar method for working with input audio. However, as also discu"
"ssed it has a few issues when working with a single input of audio as a single"
" instrument (such as a voice or guitar). By far the best approach to working w"
"ith a single continuous stream of audio is to use `live_audio`."
msgstr ""
"Der `:sound_in`-Synth wie er im vorherigen Abschnitt beschrieben wurde, "
"stellt eine sehr flexible und gängige Methode dar, um mit Audio-"
"Eingangssignalen zu arbeiten. Allerdings gibt es, wie beschrieben, "
"Beschränkungen bei der Behandlung einzelner Audio-Signalen als ein einzelnes "
"Instrument (wie z. B. Stimme oder Gitarre). Mit Abstand der beste Ansatz für "
"die Arbeit mit einem einzelnen anhaltenden Audio-Signal ist `live_audio` zu "
"nutzen."

#: 13.2-Live-Audio.md:12
msgid "A Named Audio Input"
msgstr "Ein benannter Audio-Eingang"

#: 13.2-Live-Audio.md:14
msgid ""
"`live_audio` shares a couple of core design constraints with `live_loop` (henc"
"e the similar name). Firstly it must have a unique name and secondly only one "
"`live_audio` stream with that name may exist at any one time. Let's take a loo"
"k:"
msgstr ""
"`live_audio` teilt einige der zentralen Design-Beschränkungen mit `live_loop`"
" (daher der ähnliche Name). Erstens muss es einen eindeutigen Namen haben, "
"und zweitens darf es zu jedem Zeitpunkt immer nur einen `live_audio`-Stream "
"mit diesem Namen geben. Lass uns das mal ansehen:"

#: 13.2-Live-Audio.md:19 13.2-Live-Audio.md:92
#, no-wrap
msgid "live_audio :foo"
msgstr "live_audio :foo"

#: 13.2-Live-Audio.md:23
msgid ""
"This code will act in a similar fashion to `synth :sound_in` with some key dif"
"ferences: it runs forever (until you explicitly stop it) and you can *move* it"
" to new FX contexts dynamically."
msgstr ""
"Dieser Code wird sich ähnlich verhalten wie `synth :sound_in`, mit einigen "
"wesentlichen Unterschieden: er läuft ununterbrochen (bis du ihn ausdrücklich "
"stoppst), und du kannst ihn dynamisch in neue Effekt-Blöcke *schieben*."

#: 13.2-Live-Audio.md:28
msgid "Working with FX"
msgstr "Mit Effekten arbeiten"

#: 13.2-Live-Audio.md:30
msgid ""
"On initial triggering `live_audio` works exactly as you might expect it to wor"
"k with FX. For example, to start a live audio stream with added reverb simply "
"use a `:reverb` FX block:"
msgstr ""
"Beim ersten Trigger verhält sich `live_audio` exakt so, wie du es bei der "
"Arbeit mit Effekten erwarten würdest. Zum Beispiel, um einen Live-Audio-"
"Stream mit hinzugefügtem Hall zu starten, verwende einfach einen `:reverb"
"`-Effekt-Block:"

#: 13.2-Live-Audio.md:34
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  live_audio :foo\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  live_audio :foo\n"
"end"

#: 13.2-Live-Audio.md:40
msgid ""
"However, given that `live_audio` runs forever (at least until you stop it) it "
"would be pretty limiting if, like typical synths, the live audio was bound wit"
"hin the `:reverb` FX for its entire existence. Luckily this is not the case an"
"d it was designed to be easy to move between different FX. Let's try it. Run t"
"he code above to hear live audio coming directly from the first input of your "
"sound card. Note, if you're using a laptop, this will typically be out of your"
" built-in microphone, so it's recommended to use headphones to stop feedback."
msgstr ""
"Wie auch immer, angenommen dass `live_audio` für immer läuft (zumindest bis "
"du es stoppst), wäre es doch sehr beschränkend wenn, wie mit den anderen "
"Synths, Live-Audio für seine gesamte Dauer an den Effekt-Block gebunden "
"bliebe. Glücklicherweise ist das nicht der Fall, und Live-Audio wurde so "
"entworfen, dass es einfach zwischen verschiedenen Effekten bewegt werden "
"kann. Lass uns das versuchen. Lass den obigen Code laufen, um über Live-"
"Audio direkt das Signal zu hören, das am ersten Eingang deiner Sound-Karte "
"anliegt. Beachte: Wenn du ein Laptop benutzt, wird dies standardmäßig das "
"eingebaute Mikrophon sein - es ist also empfehlenswert Kopfhörer zu "
"verwenden, um Feedback zu vermeiden."

#: 13.2-Live-Audio.md:49
msgid ""
"Now, whilst you're still hearing the audio live from the sound card with rever"
"b, change the code to the following:"
msgstr ""
"Nun, während du noch den Ton live von deiner Sound-Karte mit Hall hörst, "
"ändere den Code in Folgendes:"

#: 13.2-Live-Audio.md:52
#, no-wrap
msgid ""
"with_fx :echo do\n"
"  live_audio :foo\n"
"end"
msgstr ""
"with_fx :echo do\n"
"  live_audio :foo\n"
"end"

#: 13.2-Live-Audio.md:58
msgid ""
"Now, hit Run, and you'll immediately hear the audio played through the echo FX"
" and no longer through reverb. If you wanted them both, just edit the code aga"
"in and hit Run:"
msgstr ""
"Nun klicke Ausführen, und sofort wirst du den Sound mit dem Echo-Effekt "
"hören und nicht mehr mit Hall. Wenn du beide hören willst, ändere einfach "
"wieder den Code und klicke Ausführen:"

#: 13.2-Live-Audio.md:62
#, no-wrap
msgid ""
"with_fx :reverb do\n"
"  with_fx :echo do\n"
"    live_audio :foo\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do\n"
"  with_fx :echo do\n"
"    live_audio :foo\n"
"  end\n"
"end"

#: 13.2-Live-Audio.md:70
msgid ""
"It's important to point out that you can call `live_audio :foo` from any threa"
"d or live loop and it will move the live audio synth to *that* thread's curren"
"t FX context. You could therefore easily have multiple live loops calling `liv"
"e_audio :foo` at different times resulting in the FX context being automatical"
"ly swapped around for some interesting results."
msgstr ""
"Es ist wichtig darauf hinzuweisen, dass du `live_audio :foo` aus jedem "
"Thread oder Live-Loop heraus aufrufen kannst, und es wird den Live-Audio-"
"Synth in den Effekt-Kontext *dieses* Threads verschieben. Du könntest also "
"leicht mehrere Live-Loops haben, die `live_audio :foo` automatisch zu "
"unterschiedlichen Zeiten in unterschiedlichen Effekt-Kontexten aufrufen, was "
"zu interessanten Ergebnissen führen kann."

#: 13.2-Live-Audio.md:78
msgid "Stopping live audio"
msgstr "Live-Audio stoppen"

#: 13.2-Live-Audio.md:80
msgid ""
"Unlike standard synths, as `live_audio` has no envelope, it will continue runn"
"ing forever (even if you delete the code, just like a function is still define"
"d in memory if you delete the code in the editor). To stop it, you need to use"
" the `:stop` arg:"
msgstr ""
"Da Live-Audio anders als andere Synths keine Hüllkurve hat, wird es für "
"immer weiterlaufen (sogar wenn du den Code löscht, genau wie bei einer "
"Funktion, ist es immer noch im Speicher definiert, wenn du den Code im "
"Editor löscht). Um es anzuhalten, musst du das `:stop`-Argument anwenden:"

#: 13.2-Live-Audio.md:85
#, no-wrap
msgid "live_audio :foo, :stop"
msgstr "live_audio :foo, :stop"

#: 13.2-Live-Audio.md:89
msgid "It can easily be restarted by calling it without the `:stop` arg again:"
msgstr ""
"Es kann einfach neu gestartet werden, indem du es erneut ohne `:stop`-"
"Argument ausführst:"

#: 13.2-Live-Audio.md:96
msgid ""
"Additionally all running live audio synths are stopped when you hit the global"
" Stop button (as with all other running synths and FX)."
msgstr ""
"Außerdem werden alle laufenden Live-Audio-Synths gestoppt, wenn du auf Stopp "
"klickst (genau wie bei allen anderen Synths und Effekten)."

#: 13.2-Live-Audio.md:99
msgid "Stereo input"
msgstr "Stereo-Eingang"

#: 13.2-Live-Audio.md:101
msgid ""
"With respect to audio channels, by default `live_audio` acts similarly to the "
"`:sound_in` synth in that it takes a single mono input stream of audio and con"
"verts it to a stereo stream using the specified panning. However, just like `:"
"sound_in_stereo` it's also possible to tell `live_audio` to read two consecuti"
"ve audio inputs and treat them as the left and right channels directly. This i"
"s achieved via the `:stereo` opt. For example, to treat input 2 as the left si"
"gnal and input 3 as the right signal, you need to configure the `input:` opt t"
"o 2 and enable stereo mode as follows:"
msgstr ""
"In Bezug auf die Audio-Kanäle verhält sich Live-Audio standardmäßig wie der "
"`:sound_in`-Synth, indem er einen einzelnes Mono-Eingangssignal nimmt und in "
"einen Stereo-Stream wandelt, unter Verwendung der eingegebenen Panorama-"
"Einstellung. Allerdings, wie bei `:sound_in_stereo` besteht auch hier die "
"Möglichkeit, Live-Audio zwei aufeinander folgende Audio-Eingänge lesen zu "
"lassen und sie direkt als linken und rechten Kanal zu behandeln. Dies lässt "
"sich durch die `:stereo`-Option erreichen. Um zum Beispiel Eingang 2 als "
"linkes Signal und Eingang 3 als rechtes Signal zu behandeln, musst du die "
"`input:`-Option wie folgt auf 2 konfigurieren:"

#: 13.2-Live-Audio.md:111
#, no-wrap
msgid "live_audio :foo, stereo: true, input: 2"
msgstr "live_audio :foo, stereo: true, input: 2"

#: 13.2-Live-Audio.md:115
msgid ""
"Note that once you have started a live audio stream in stereo mode, you cannot"
" change it to mono without stopping and starting. Similarly, if you start it i"
"n the default mono mode, you can't switch to stereo without starting and stopp"
"ing the stream."
msgstr ""
"Beachte, dass sobald du einen Audio-Stream in Stereo gestartet hast, du "
"nicht zu Mono wechseln kannst, ohne erneut zu stoppen und zu starten. "
"Ebenso, wenn du ihn im standardmäßigen Mono-Modus startest, kannst du nicht "
"zu Stereo wechseln, ohne zu stoppen und zu starten."

#: 13.3-Sound-Out.md:1
msgid "13.3 Sound Out"
msgstr "13.3 Sound-Out"

#: 13.3-Sound-Out.md:3
msgid "Sound Out"
msgstr "Sound-Out"

#: 13.3-Sound-Out.md:5
msgid ""
"So far in this section we've looked at how to get multiple streams of audio in"
"to Sonic Pi - either through the use of the `:sound_in` synth or via the power"
"ful `live_audio` system. In addition to working with multiple streams of input"
" audio, Sonic Pi can also output multiple streams of audio. This is achieved v"
"ia the `:sound_out` FX."
msgstr ""
"Bisher haben wir in diesem Abschnitt behandelt, wie wir mehrere Audio-"
"Streams in Sonic Pi einbinden können - entweder durch den `:sound_in`-Synth "
"oder über das mächtige ` live_audio`-System. Über die Arbeit mit mehreren "
"Audio-Streams aus Eingangssignalen hinaus, kann Sonic Pi ebenso mehrere "
"Audio-Streams als Ausgangssignal ausgeben. Dies wird über den `:sound_out`-"
"Effekt erreicht."

#: 13.3-Sound-Out.md:11
msgid "Output contexts"
msgstr "Ausgabe-Kontexte"

#: 13.3-Sound-Out.md:13
msgid ""
"Let's quickly recap on how Sonic Pi's synths and FX output their audio to thei"
"r current FX context. For example, consider the following:"
msgstr ""
"Lass uns kurz rekapitulieren, wie Sonic Pis Synths und Effekte ihr Audio-"
"Signal an ihren gegenwärtigen Effekt-Kontext übergeben. Stell dir zum "
"Beispiel Folgendes vor:"

#: 13.3-Sound-Out.md:16
#, no-wrap
msgid ""
"with_fx :reverb do    # C\n"
"  with_fx :echo do    # B\n"
"    sample :bd_haus   # A\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do    # C\n"
"  with_fx :echo do    # B\n"
"    sample :bd_haus   # A\n"
"  end\n"
"end"

#: 13.3-Sound-Out.md:24
msgid ""
"The simplest way to understand what's happening with the audio stream is to st"
"art at the innermost audio context and work our way out. In this case, the inn"
"ermost context is labelled `A` and is the `:bd_haus` sample being triggered. T"
"he audio for this goes directly into its context which is `B` - the `:echo` FX"
". This then adds echo to the incoming audio and outputs it to its context whic"
"h is `C` - the `:reverb` FX. This then adds reverb to the incoming audio and o"
"utputs to its context which is the top level - the left and right speakers (ou"
"tputs 1 and 2 in your audio card). The audio flows outwards with a stereo sign"
"al all the way through."
msgstr ""
"Der einfachste Weg, um zu verstehen, was mit dem Audio-Stream passiert, ist "
"beim innersten Audio-Kontext zu starten und uns langsam den Weg nach draußen "
"entlang zu arbeiten. In diesem Fall ist der innerste Kontext mit `A` "
"bezeichnet und ist das `:bd_haus`-Sample, das getriggert wird. Der Audio-"
"Stream hiervon geht direkt in den Kontext `B`, welches der `:echo`-Effekt "
"ist. Dieser fügt Echo dem eingehenden Audio-Stream hinzu und gibt es an "
"seinen Kontext weiter - das ist `C` - der `:reverb`-Effekt. Dieser fügt dann "
"Hall dem eingehenden Audio-Stream hinzu und gibt ihn an seinen Kontext "
"weiter, welcher die oberste Ebene ist - der linke und rechte Lautsprecher ("
"was in deinem Audio-Interface Ausgang 1 und Ausgang 2 entspricht). Der Klang "
"fließt nach draußen den ganzen Weg hindurch als Stereo-Signal."

#: 13.3-Sound-Out.md:35
msgid "Sound Out FX"
msgstr "Sound-Out-Effekte"

#: 13.3-Sound-Out.md:37
msgid ""
"The above behaviour is true for all synths (including `live_audio`) and the ma"
"jority of FX with the exception of `:sound_out`. The `:sound_out` FX does two "
"things. Firstly it outputs its audio to its external context as described abov"
"e. Secondly it *also* outputs its audio directly to an output on your sound ca"
"rd. Let's take a look:"
msgstr ""
"Das oben genannte Verhalten trifft auf alle Synths zu (einschließlich "
"`live_audio`) und auf den Großteil der Effekte, mit Ausnahme von `:sound_out`"
". Der `:sound_out`-Effekt tut zwei Dinge. Erstens gibt er seinen Audio-"
"Stream wie oben beschrieben an seinen äußeren Kontext weiter. Zum Zweiten "
"gibt er ihn *auch* an einen Ausgang deines Audio-Interface oder deiner Sound-"
"Karte aus. Sehen wir uns das an:"

#: 13.3-Sound-Out.md:43
#, no-wrap
msgid ""
"with_fx :reverb do      # C\n"
"  with_fx :sound_out, output: 3 do # B\n"
"    sample :bd_haus     # A\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb do      # C\n"
"  with_fx :sound_out, output: 3 do # B\n"
"    sample :bd_haus     # A\n"
"  end\n"
"end"

#: 13.3-Sound-Out.md:51
msgid ""
"In this example, our `:bd_haus` sample outputs its audio to its external conte"
"xt which is the `:sound_out` FX. This in turn outputs its audio to its externa"
"l context the `:reverb` FX (as expected). However, it *also* outputs a mono mi"
"x to the 3rd output of the system's soundcard. The audio generated within `:so"
"und_out` therefore has two destinations - the `:reverb` FX and audio card outp"
"ut 3."
msgstr ""
"In diesem Besipiel gibt unser `bd_haus`-Sample sein Audio an seinen äußeren "
"Kontext, welches der `:sound_out`-Effekt ist. Dieser seinerseits gibt sein "
"Audio an seinen externen Kontext, den `:reverb`-Effekt weiter (wie erwartet)"
". Allerdings gibt er *auch* einen Mono-Mix an den Ausgang 3 des Audio-"
"Interface oder der Sound-Karte des Systems. Der Audio-Stream, wie er "
"innerhalb von `:sound_out` generiert wird hat also zwei Ziele, den `:reverb`-"
"Effekt und den Audio-Ausgang 3."

#: 13.3-Sound-Out.md:58
msgid "Mono and Stereo out"
msgstr "Mono- und Stereoausgabe"

#: 13.3-Sound-Out.md:60
msgid ""
"As we've seen, by default, the `:sound_out` FX outputs a mono mix of the stere"
"o input to a specific channel in addition to passing the stereo feed to the ou"
"ter context (as expected). If outputting a mono mix isn't precisely what you w"
"ant to do, there are a number of alternative options. Firstly, by using the `m"
"ode:` opt you can choose to output just the left or just the right input signa"
"l to the audio card. Or you can use the `:sound_out_stereo` FX to output to tw"
"o consecutive sound card outputs. See the function documentation for more info"
"rmation and examples."
msgstr ""
"Wie wir gesehen haben, gibt der `:sound_out`-Effekt standardmäßig einen Mono-"
"Mix des Stereo-Streams an einen bestimmten Kanal aus, zusätzlich dazu, dass "
"er ihn (wie erwartet) an seinen äußeren Kontext weiter gibt. Wenn ein Mono-"
"Mix nicht gerade das ist, was du nach draußen geben willst, hast du eine "
"Reihe von Optionen. Zum Ersten, bei Verwendung der `mode:`-Option kannst du "
"wählen nur den linken oder den rechten Kanal des Stereo-Streams an das Audio-"
"Interface auszugeben. Oder du kannst den `:sound_out_stereo`-Effekt "
"verwenden, um zwei aufeinanderfolgende Ausgänge des Audio-Interface zu "
"verwenden. Wirf einen Blick in die Dokumentation der Funktion für weitere "
"Informationen und Beispiele."

#: 13.3-Sound-Out.md:70
msgid "Direct Out"
msgstr "Direct-Out"

#: 13.3-Sound-Out.md:72
msgid ""
"As we have also seen, the default behaviour for `:sound_out` and `:sound_out_s"
"tereo` is to send the audio both to their external context (as is typical of a"
"ll FX) *and* to the specified output on your soundcard. However, occasionally "
"you may wish to *only* send to the output on your soundcard and not to the ext"
"ernal context (and therefore not have any chance of the sound being mixed and "
"sent to the standard output channels 1 and 2). This is possible by using the s"
"tandard FX opt `amp:` which operates on the audio *after* the FX has been able"
" to manipulate the audio:"
msgstr ""
"Wie wir auch gesehen haben, ist es das standardmäßige Verhalten von "
"`:sound_out` und `:sound_out_stereo` Audio sowohl an ihren äußeren Kontext ("
"wie für alle Effekte typisch) *als auch* an den von dir bestimmten Audio-"
"Ausgang deiner Sound-Karte zu schicken. Trotzdem wirst du gelegentlich "
"vielleicht wünschen einen Audio-Stream *ausschließlich* an den Ausgang "
"deiner Sound-Karte zu schicken und nicht an den äußeren Kontext (und daher "
"deinen Audio-Stream auch nicht gemischt durch die Standard-Ausgänge 1 und 2 "
"geschickt zu bekommen). Das ist möglich, indem du die Standard-Effekt-Option "
"`amp:` benutzt, die den Audio-Stream bearbeitet, *nachdem* der Effekt den "
"Audio-Stream bearbeitet hat:"

#: 13.3-Sound-Out.md:82
#, no-wrap
msgid ""
"with_fx :sound_out, output: 3, amp: 0 do # B\n"
"  sample :loop_amen                      # A\n"
"end"
msgstr ""
"with_fx :sound_out, output: 3, amp: 0 do # B\n"
"  sample :loop_amen                      # A\n"
"end"

#: 13.3-Sound-Out.md:88
msgid ""
"In the above example, the `:loop_amen` sample is sent to its outer context, th"
"e `:sound_out` FX. This then sends a mono mix to audio card output 3 and then "
"multiplies the audio by 0 which essentially silences it. It is this silenced s"
"ignal which is then sent out to the `:sound_out`'s outer context which is the "
"standard output. Therefore with this code, the default output channels will no"
"t receive any audio, and channel 3 will receive a mono mix of the amen drum br"
"eak."
msgstr ""
"Im obigen Beispiel, wird das `:loop_amen`-Sample an seinen äußeren Kontext "
"geschickt, den `:sound_out`-Effekt. Dieser sendet einen Mono-Mix and den "
"Sound-Karten-Ausgang 3 und multipliziert danach den Audio-Stream mit 0, was "
"diesen essentiell stumm schaltet. Dieses stummgeschaltete Signal wird "
"anschließend an den äußeren Kontext des `:sound_out`-Effektes geschickt, "
"welches der Standard-Ausgang ist. Daher werden bei diesem Code die Standard-"
"Ausgangskanäle kein hörbares Signal erhalten, und an Ausgang 3 wird ein Mono-"
"Mix des Amen-Drum-Break geschickt."

#: 14-Conclusions.md:1
msgid "14 Conclusions"
msgstr "12 Abschließendes"

#: 14-Conclusions.md:3
msgid "Conclusions"
msgstr "Abschließendes"

#: 14-Conclusions.md:5
msgid ""
"This concludes the Sonic Pi introductory tutorial. Hopefully you've learned so"
"mething along the way. Don't worry if you feel you didn't understand everythin"
"g - just play and have fun and you'll pick things up in your own time. Feel fr"
"ee to dive back in when you have a question that might be covered in one of th"
"e sections."
msgstr ""
"Dieser Abschnitt beschließt das einführende Tutorial zu Sonic Pi. "
"Hoffentlich konntest du auf dem Weg ein paar Dinge lernen. Mach dir keine "
"Sorgen, wenn du das Gefühl hast, nicht alles verstanden zu haben - spiele "
"einfach weiter, hab Spaß dabei, und du wirst alles weitere auf deinem Weg, "
"in deinem eigenen Tempo entdecken. Tauche einfach wieder ein, wenn du das "
"Gefühl hast , dass eine Frage in einem der Abschnitte des Tutorials "
"beantwortet werden könnte."

#: 14-Conclusions.md:11
msgid ""
"If you have any questions that haven't been covered in the tutorial, then plea"
"se jump onto the [Sonic Pi community forums](https://in-thread.sonic-pi.net/) "
"and ask your question there. You'll find someone friendly and willing to lend "
"a hand."
msgstr ""
"Wenn du Fragen hast, die nicht in diesem Tutorial behandelt wurden, dann "
"komme damit bitte im [Sonic Pi Forum](http://groups.google.com/group/"
"sonic-pi/) vorbei und stelle deine Frage dort. Du wirst dort Leute treffen, "
"die freundlich sind und dir gerne weiterhelfen."

#: 14-Conclusions.md:16
msgid ""
"Finally, I also invite you to take a deeper look at the rest of the documentat"
"ion in this help system. There are a number of features that haven't been cove"
"red in this tutorial that are waiting for your discovery."
msgstr ""
"Und abschließend lade ich dich auch dazu ein, dir die übrige Dokumentation "
"im Hilfe-System einmal genauer anzuschauen. Es gibt noch eine ganze Reihe "
"von Merkmalen von Sonic Pi, die in diesem Tutorial nicht behandelt wurden "
"und darauf warten, von dir entdeckt zu werden."

#: 14-Conclusions.md:21
msgid ""
"So play, have fun, share your code, perform for your friends, show your screen"
"s and remember:"
msgstr ""
"Also, spiele, hab Spaß, teile deinen Programm-Code, tritt vor deinen "
"Freunden auf, zeige was du auf dem Monitor hast - und vergiss nicht:"

#: 14-Conclusions.md:24
msgid "*There are no mistakes, only opportunities.*"
msgstr "*Es gibt keine Fehler, nur Möglichkeiten.*"

#: 14-Conclusions.md:26
msgid "[Sam Aaron](https://twitter.com/samaaron)"
msgstr "[Sam Aaron](https://twitter.com/samaaron)"

#: A-Articles.md:1
msgid "A Appendix A - MagPi Articles"
msgstr "A Anhang A - Artikel aus MagPi"

#: A-Articles.md:3
msgid "MagPi Articles"
msgstr "Artikel aus MagPi"

#: A-Articles.md:5
msgid "Appendix A collects all the Sonic Pi articles written for the MagPi magazine."
msgstr ""
"Anhang A bündelt Artikel über Sonic Pi, die für das MagPi-Magazin "
"geschrieben wurden."

#: A-Articles.md:8
msgid "Dive into Topics"
msgstr "Einstieg in den Stoff"

#: A-Articles.md:10
msgid ""
"These articles aren't meant to be read in any strict order and contain a lot o"
"f cross-over material from the tutorial itself. Rather than try and teach you "
"all of Sonic Pi, they instead each focus on a specific aspect of Sonic Pi and "
"cover it in a fun and accessible way."
msgstr ""
"Diese Artikel müssen nicht in einer bestimmten Reihenfolge gelesen werden, "
"und sie überschneiden sich in vielen Punkten mit dem Tutorial. Es geht "
"weniger darum, dir alles über Sonic Pi beizubringen - eher fokussieren sie "
"sich jeweils auf einen bestimmten Aspekt von Sonic Pi und behandeln ihn auf "
"unterhaltsame und leicht zugängliche Weise."

#: A-Articles.md:15
msgid "Read the MagPi"
msgstr "Lese das MagPi"

#: A-Articles.md:17
msgid ""
"You can see them in their glorious professionally typeset form in the free PDF"
" downloads of The MagPi here: https://www.raspberrypi.org/magpi/"
msgstr ""
"Du kannst die Ausgaben von The MagPi in einem großartigen professionellem "
"Layout als PDFs hier herunterladen: https://www.raspberrypi.org/magpi/"

#: A-Articles.md:20
msgid "Suggest a Topic"
msgstr "Schlage ein Thema vor"

#: A-Articles.md:22
msgid ""
"If you don't see a topic that interests you covered in these articles - why no"
"t suggest one? The easiest way to do that is to tweet your suggestion to [@Son"
"ic_Pi](http://twitter.com/sonic_pi). You never know - your suggestion might be"
" the subject of the next article!"
msgstr ""
"Wenn du kein Thema, das dich interessiert, in diesen Artikeln behandelt "
"findest - warum nicht eines vorschlagen? Der einfachste Weg ist ein Tweet "
"mit deinem Vorschlag an [@Sonic_Pi](http://twitter.com/sonic_pi). Du kannst "
"nie wissen - dein Vorschlag könnte das Thema des nächsten Artikels sein!"

#: A.01-tips.md:1
msgid "A.1 Tips for Sonic Pi"
msgstr "A.1 Tipps zu Sonic Pi"

#: A.01-tips.md:3
msgid "Five Top Tips"
msgstr "Fünf Top-Tipps"

#: A.01-tips.md:5
msgid "1. There are no mistakes"
msgstr "1. Es gibt keine Fehler"

#: A.01-tips.md:7
msgid ""
"The most important lesson to learn with Sonic Pi is that there really are no m"
"istakes. The best way to learn is to just try and try and try. Try lots of dif"
"ferent things out, stop worrying whether your code sounds good or not and star"
"t experimenting with as many different synths, notes, FX and opts as possible."
" You'll discover a lot of things that make you laugh because they sound just a"
"wful and some real gems that sound truly amazing. Simply drop the things you d"
"on't like and keep the things you do. The more 'mistakes' you allow yourself t"
"o make the quicker you'll learn and discover your personal coding sound."
msgstr ""
"Die wichtigste Lektion mit Sonic Pi ist, dass es wirklich keine Fehler gibt. "
"Der beste Weg zu lernen, ist einfach es zu versuchen und zu versuchen und zu "
"versuchen. Probiere viele verschiedene Dinge aus, kümmere dich nicht darum, "
"ob dein Programm-Code gut oder schlecht klingt und fange an mit so vielen "
"unterschiedlichen Synths, FXs und Optionen wie möglich zu experimentieren. "
"Du wirst viele Dinge entdecken, die dich zum Lachen bringen, weil sie "
"furchtbar klingen und auch richtige Edelsteine, die einfach toll klingen. "
"Lass die Dinge, die dir nicht gefallen einfach beiseite und behalte, was dir "
"gefällt. Je mehr 'Fehler' du dir zu machen erlaubst, desto schneller wirst "
"du lernen und deinen eigenen Coding-Sound entdecken."

#: A.01-tips.md:18
msgid "2. Use the FX"
msgstr "2. Verwende die Effekte"

#: A.01-tips.md:20
msgid ""
"Say you've already mastered the Sonic Pi basics of making sounds with `sample`"
", `play`? What's next? Did you know that Sonic Pi supports over 27 studio FX t"
"o change the sound of your code? FX are like fancy image filters in drawing pr"
"ograms except that instead of blurring or making something black and white, yo"
"u can add things like reverb, distortion and echo to your sound. Think of it l"
"ike sticking the cable from your guitar to an effects pedal of your choice and"
" then into the amplifier. Luckily, Sonic Pi makes using FX really easy and req"
"uires no cables! All you need to do is to choose which section of your code yo"
"u'd like the FX added to and wrap it with the FX code. Let's look at an exampl"
"e. Say you had the following code:"
msgstr ""
"Sagen wir mal, Du beherrschst die Grundlagen, wie man in Sonic Pi Sounds mit `"
"sample`und `play` macht. Was jetzt? Hast Du gewusst, dass Sonic Pi über 27 Stu"
"dio-FX unterstützt, mit denen Du den Sound deines Codes verändern kannst? FX s"
"ind sowas wie raffinierte Bildeffekte in Bildbearbeitungsprogrammen; nur das s"
"ie nicht unscharf oder schwarz/weiß machen, sondern dem Sound Hall, Verzerrung"
" oder Echo hinzufügen. Stell' Dir vor, wie Du das Kabel von Deiner Gitarre ins"
" Effekt-Pedal steckst und dann in den Verstärker. Glücklicherweise braucht man"
" keine Kabel, und Sonic Pi macht es sehr einfach, FX einzusetzen. Du musst nur"
" auswählen, auf welchen Teil Deines Codes Du einen FX anwenden willst und dies"
"en Teil mit dem FX-Code umschließen. Sehen wir uns ein Beispiel an:"

#: A.01-tips.md:32
#, no-wrap
msgid ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"sample :loop_garzul\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:41
msgid ""
"If you wanted to add FX to the `:loop_garzul` sample, you'd just tuck it insid"
"e a `with_fx` block like this:"
msgstr ""
"Wenn Du einen FX auf das `:loop_gazul`-Sample anwenden möchtest, steckst du es"
" einfach in einen `with_fx`-Block, und zwar so:"

#: A.01-tips.md:44
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"16.times do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.01-tips.md:55
msgid ""
"Now, if you wanted to add FX to the bass drum, go and wrap that with `with_fx`"
" too:"
msgstr ""
"Wenn Du jetzt einen FX zur Bassdrum hinzufügen möchtest, dann packe diese auch"
" in ein `with_fx` ein:"

#: A.01-tips.md:58
#, no-wrap
msgid ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"
msgstr ""
"with_fx :flanger do\n"
"  sample :loop_garzul\n"
"end\n"
"with_fx :echo do\n"
"  16.times do\n"
"    sample :bd_haus\n"
"    sleep 0.5\n"
"  end\n"
"end"

#: A.01-tips.md:71
msgid ""
"Remember, you can wrap *any* code within `with_fx` and any sounds created will"
" pass through that FX."
msgstr ""
"Denk' dran, Du kannst *jeden* Code mit einem `with_fx`umgeben und jeder Sound,"
" der ausgegeben wird, geht durch diesen FX."

#: A.01-tips.md:75
msgid "3. Parameterise your synths"
msgstr "3. Parametrisiere Deine Synths"

#: A.01-tips.md:77
msgid ""
"In order to really discover your coding sound you'll soon want to know how to "
"modify and control synths and FX. For example, you might want to change the du"
"ration of a note, add more reverb, or change the time between echoes. Luckily,"
" Sonic Pi gives you an amazing level of control to do exactly this with specia"
"l things called optional parameters or opts for short. Let's take a quick look"
". Copy this code into a workspace and hit run:"
msgstr ""
"Um Deine codierten Klänge so richtig entdecken zu können, wirst Du sicher bald"
" wissen wollen, wie Du Synths und FX steuern kannst. Vielleicht möchtest Du di"
"e Dauer eines Tons verändern, mehr Hall hinzufügen oder die Zeit zwischen zwei"
" Echos verändern. Mit optionalen Parametern oder kurz Opts bietet Dir Sonic Pi"
" viele Möglichkeiten, genau das zu tun. Schauen wir uns das mal kurz an. Kopie"
"re diesen Code in einen Puffer und klicke auf Ausführen:"

#: A.01-tips.md:85
#, no-wrap
msgid "sample :guit_em9"
msgstr "sample :guit_em9"

#: A.01-tips.md:89
msgid ""
"Ooh, a lovely guitar sound! Now, let's start playing with it. How about changi"
"ng its rate?"
msgstr ""
"Oh, was für ein wunderbarer Gitarren-Sound! Spielen wir ein bisschen damit. Wi"
"e wäre es damit, die Abspielgeschwindigkeit (rate) zu ändern?"

#: A.01-tips.md:92 A.17-sample-stretching.md:25
#, no-wrap
msgid "sample :guit_em9, rate: 0.5"
msgstr "sample :guit_em9, rate: 0.5"

#: A.01-tips.md:96
msgid ""
"Hey, what's that `rate: 0.5` bit I just added at the end? That's called an opt"
". All of Sonic Pi's synths and FX support them and there's loads to play aroun"
"d with. They're also available for FX too. Try this:"
msgstr ""
"Was bedeutet der Schnipsel `rate: 0.5`, den ich hier am Ende hinzugefügt "
"habe? Das ist ein Parameter. Alle Synths und FX in Sonic Pi unterstützen "
"diesen und man kann viel damit anstellen. Versuche mal das hier:"

#: A.01-tips.md:100
#, no-wrap
msgid ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"
msgstr ""
"with_fx :flanger, feedback: 0.6 do\n"
"  sample :guit_em9\n"
"end"

#: A.01-tips.md:106
msgid ""
"Now, try increasing that feedback to 1 to hear some crazy sounds! Read the doc"
"s for full details on all the many opts available to you."
msgstr ""
"Jetzt setze das feedback auf 1 und hör' Dir die verrückten Sounds an! Einzelhe"
"iten zu den vielen Opts, die Dir zur Verfügung stehen, findest Du in der Dokum"
"entation."

#: A.01-tips.md:110
msgid "4. Live Code"
msgstr "4. Live Code"

#: A.01-tips.md:112
msgid ""
"The best way to quickly experiment and explore Sonic Pi is to live code. This "
"allows you to start off some code and continually change and tweak it whilst i"
"t's still playing. For example, if you don't know what the cutoff parameter do"
"es to a sample, just play around. Let's have a try! Copy this code into one of"
" your Sonic Pi workspaces:"
msgstr ""
"Die beste Art Sonic Pi schnell kennenzulernen, ist, live zu coden. Du fängst m"
"it irgendeinem Codeschnipsel an und veränderst und verbesserst, während der Co"
"de abgespielt wird. Wenn Du zum Beispiel nicht weißt, was der Cutoff-Parameter"
" mit einem Sample macht, probiere es einfach aus. Fangen wir mal an! Kopiere d"
"iesen Code in einen Puffer von Sonic Pi:"

#: A.01-tips.md:118
#, no-wrap
msgid ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"
msgstr ""
"live_loop :experiment do\n"
"  sample :loop_amen, cutoff: 70\n"
"  sleep 1.75\n"
"end"

#: A.01-tips.md:125
msgid ""
"Now, hit run and you'll hear a slightly muffled drum break. Now, change the `c"
"utoff:` value to `80` and hit run again. Can you hear the difference? Try `90`"
", `100`, `110`..."
msgstr ""
"Jetzt klicke auf ausführen und Du wirst einen leicht muffigen Drum-Break hören"
". Ändere den `cutoff:`-Wert auf `80` und klicke wieder ausführen. Hörst Du den"
" Unterschied? Versuche es mit `90`, `100`, `110`..."

#: A.01-tips.md:129
msgid ""
"Once you get the hang of using `live_loop`s you'll not turn back. Whenever I d"
"o a live coding gig I rely on `live_loop` as much as a drummer relies on their"
" sticks. For more information about live coding check out Section 9 of the bui"
"lt-in tutorial."
msgstr ""
"Wenn Du die `live_loop`s einmal im Griff hast, willst du nichts mehr anders ve"
"rwenden. Wann immer ich einen Live-Coding-Gig habe, brauche ich die `live_loop"
"` wie ein Schlagzeuger seine Sticks. Um mehr über Live-Coding zu erfahren, sie"
"h Dir den Abschnitt 9 im Tutorial an."

#: A.01-tips.md:134
msgid "5. Surf the random streams"
msgstr "5. Mit dem Zufall spielen"

#: A.01-tips.md:136
msgid ""
"Finally, one thing I love doing is cheating by getting Sonic Pi to compose thi"
"ngs for me. A really great way to do this is using randomisation. It might sou"
"nd complicated but it really isn't. Let's take a look. Copy this into a spare "
"workspace:"
msgstr ""
"Manchmal mogele ich, indem ich Sonic Pi für mich komponieren lasse. Mit Random"
"isierung lässt sich das großartig hinbekommen; das klingt vielleicht ein wenig"
" kompliziert, ist es aber gar nicht. Sehen wir uns das an. Kopiere diesen Code"
" in einen Puffer:"

#: A.01-tips.md:141
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:152
msgid ""
"Now, when you play this, you'll hear a constant stream of random notes from th"
"e scale `:e2 :minor_pentatonic` played with the `:dsaw` synth. \"Wait, wait! Th"
"at's not a melody\", I hear you shout! Well, here's the first part of the magic"
" trick. Every time we go round the `live_loop` we can tell Sonic Pi to reset t"
"he random stream to a known point. This is a bit like going back in time in th"
"e TARDIS with the Doctor to a particular point in time and space. Let's try it"
" - add the line `use_random_seed 1` to the `live_loop`:"
msgstr ""
"Wenn Du das laufen lässt, wirst Du eine regelmäßige Reihenfolge von zufälligen"
" Tönen der Skala `:e2 :minor_pentatonic` gespielt vom `:dsaw`-Synth hören. \"Ha"
"lt mal, das ist doch keine Melodie\", höre ich Dich schon sagen. Okay, dies ist"
" der erste Teil des Zaubertricks. Jedes Mal, wenn die `live_loop` durchgelaufe"
"n ist, können wir Sonic Pi sagen, es soll die Zufallsfolge an einen bestimmten"
" Punkt zurücksetzen. Das ist ein bisschen so, als würden wir wie Dr. Who in se"
"iner Zeitmaschine TARDIS an einen bestimmten Ort und zu einer bestimmten Zeit "
"zurückkehren. Versuche es mal und schreibe die Zeile `use_random_seed 1` in di"
"e `live_loop`:"

#: A.01-tips.md:161
#, no-wrap
msgid ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :rand_surfer do\n"
"  use_random_seed 1\n"
"  use_synth :dsaw\n"
"  notes = (scale :e2, :minor_pentatonic, num_octaves: 2)\n"
"  16.times do\n"
"    play notes.choose, release: 0.1, cutoff: rrand(70, 120)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.01-tips.md:173
msgid ""
"Now, every time the `live_loop` loops around, the random stream is reset. This"
" means it chooses the same 16 notes every time. Hey presto! An instant melody."
" Now, here's the really exciting bit. Change the seed value from `1` to anothe"
"r number. Say `4923`. Wow! Another melody! So, just by changing one number (th"
"e random seed), you can explore as many melodic combinations as you can imagin"
"e! Now, that's the magic of code."
msgstr ""
"Jedes Mal, wenn die `live_loop`sich wiederholt, wird der Zufalls-Generator zur"
"ückgesetzt. Das bedeutet, es werden jedes mal die selben 16 Noten ausgewählt. "
"Hey presto, eine Melodie! Doch jetzt kommt der richtig spannende Teil: Ändere "
"den Wert von `seed` von `1` in irgendeine andere Zahl. Sagen wir z.B. `4923`. "
"Wow! Eine andere Melodie! Also nur durch das Ändern einer Zahl (dem so genannt"
"en `random seed`), kannst Du jegliche nur vorstellbare melodische Kombinatione"
"n erforschen! Na, wenn das nicht die Magie des Codes ist."

#: A.02-live-coding.md:1
msgid "A.2 Live Coding"
msgstr "A.2 Live Coding"

#: A.02-live-coding.md:5
msgid ""
"The laser beams sliced through the wafts of smoke as the subwoofer pumped bass"
" deep into the bodies of the crowd. The atmosphere was ripe with a heady mix o"
"f synths and dancing. However something wasn't quite right in this nightclub. "
"Projected in bright colours above the DJ booth was futuristic text, moving, da"
"ncing, flashing. This wasn't fancy visuals, it was merely a projection of Soni"
"c Pi running on a Raspberry Pi. The occupant of the DJ booth wasn't spinning d"
"isks, he was writing, editing and evaluating code. Live. This is Live Coding."
msgstr ""
"Die Laserstrahlen schnitten durch die Rauschwaden als der Subwoofer den Bass t"
"ief in die Körper der Menge pumpte. Die Atmosphäre war erfüllt von einem berau"
"schenden Mix aus Synthesizern und Tanzen. Aber irgendetwas stimmte nicht in di"
"esem Nachtklub. Über der DJ-Kabine leuchtete in bunten Farben futuristischer T"
"ext; bewegte sich, tanzte, blinkte. Dies war keine abgefahrene Lichtshow, sond"
"ern einfach eine Projektion von Sonic Pi, das auf einem Raspberry Pi lief. Der"
" Insasse der DJ-Kabine drehte keine Platten, nein, er schrieb und bearbeitete "
"Programmcode. Live. Das ist Live-Coding."

#: A.02-live-coding.md:14
#, fuzzy
msgid ""
"![Sam Aaron Live Coding](../../../etc/doc/images/tutorial/articles/A.02-live-c"
"oding/sam-aaron-live-coding.png)"
msgstr ""
"![Sam Aaron Live-Coding](../../../etc/doc/images/tutorial/articles/A.02-live-c"
"oding/sam-aaron-live-coding.png)"

#: A.02-live-coding.md:16
msgid ""
"This may sound like a far fetched story from a futuristic night club but codin"
"g music like this is a growing trend and is often described as Live Coding (ht"
"tp://toplap.org). One of the recent directions this approach to music making h"
"as taken is the Algorave (http://algorave.com) - events where artists like mys"
"elf code music for people to dance to. However, you don't need to be in a nigh"
"tclub to Live Code - with Sonic Pi v2.6+ you can do it anywhere you can take y"
"our Raspberry Pi and a pair of headphones or some speakers. Once you reach the"
" end of this article, you'll be programming your own beats and modifying them "
"live. Where you go afterwards will only be constrained by your imagination."
msgstr ""
"Es mag sich wie eine weit hergeholte Geschichte aus einem futuristischen Nacht"
"klub anhört, aber Musik auf diese Weise zu programmieren, ist ein wachsender T"
"rend, bekannt als Live-Coding (http://toplap.org). Eine aktuelle Richtung, die"
" diese Art des Musikmachens eingeschlagen hat, ist der Algorave (http://algora"
"ve.com) - Veranstaltungen, auf denen Künstler wie ich Musik zum Tanzen program"
"mieren. Du musst aber zum Live-Coden nicht in einem Nachtklub sein. Mit Sonic "
"Pi v2.6+ kannst du überall loslegen, wohin du deinen Raspberry Pi und ein Paar"
" Kopfhörer oder Lautsprecher mitnimmst. Wenn du das Ende dieses Artikels errei"
"cht hast, wirst du bereits deine eigenen Beats programmieren und live bearbeit"
"est. Wohin do von dort weiter gehst, wird einzig von deiner Vorstellungskraft "
"beschränkt."

#: A.02-live-coding.md:27
msgid "Live Loop"
msgstr "Live-Loop"

#: A.02-live-coding.md:29
msgid ""
"The key to live coding with Sonic Pi is mastering the `live_loop`. Let's look "
"at one:"
msgstr ""
"Der Schlüssel zum 'live-coding' mit Sonic Pi ist das Beherrschen des 'live_loo"
"ps'. Schauen wir uns einen an:"

#: A.02-live-coding.md:32
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_haus\n"
"  sleep 0.5\n"
"end"

#: A.02-live-coding.md:39
msgid ""
"There are 4 core ingredients to a `live_loop`. The first is its name. Our `liv"
"e_loop` above is called `:beats`. You're free to call your `live_loop` anythin"
"g you want. Go crazy. Be creative. I often use names that communicate somethin"
"g about the music they're making to the audience. The second ingredient is the"
" `do` word which marks where the `live_loop` starts. The third is the `end` wo"
"rd which marks where the `live_loop` finishes, and finally there is the body o"
"f the `live_loop` which describes what the loop is going to repeat - that's th"
"e bit between the `do` and `end`. In this case we're repeatedly playing a bass"
" drum sample and waiting for half a beat. This produces a nice regular bass be"
"at. Go ahead, copy it into an empty Sonic Pi buffer and hit run. Boom, Boom, B"
"oom!."
msgstr ""
"Ein Live-Loop hat 4 Hauptbestandteile. Der erste ist sein Name. Unser `live_lo"
"op` oben heißt `live_loop`. Du kannst frei entscheiden, wie Du Deinen `live_lo"
"op` nennen möchtest. Sei kreativ. Ich benutze oft Namen, die dem Publikum etwa"
"s über die Musik mitteilen, die ich mache. Der zweite Bestandteil ist das Wort"
" `do`, welches anzeigt, wo der `live_loop` beginnt. Der dritte ist das Wort `e"
"nd`, das markiert, wo der `live_loop` endet. Schließlich gibt es noch den Bloc"
"k innerhalb des `live_loop`, der beschreibt, was die Schleife wiederholen soll"
" – das ist der Teil zwischen `do` und `end`. In unsrem Fall spielen wir ein Ba"
"ss-Drum-Sample und warten einen halben Takt. Dies führt zu einem schönen regel"
"mäßigen Bass Beat. Auf gehts, kopiere den `live_loop` in einem leeren Sonic Pi"
"-Puffer und drücke auf Ausführen. Boom, Boom, Boom!."

#: A.02-live-coding.md:52
msgid "Redefining On-the-fly"
msgstr "Zur Laufzeit neu definieren"

#: A.02-live-coding.md:54
msgid ""
"Ok, so what's so special about the `live_loop`? So far it just seems like a gl"
"orified `loop`! Well, the beauty of `live_loop`s is that you can redefine them"
" on-the-fly. This means that whilst they're still running, you can change what"
" they do. This is the secret to live coding with Sonic Pi. Let's have a play:"
msgstr ""
"OK, aber was ist nun das besondere an einem `live_loop`? Bisher scheint er nur"
" eine überbewertete \"Schleife\" zu sein! Nun, das Schöne am `live_loop` ist, da"
"ss du ihn im laufenden Programm neu definieren kannst. Das bedeutet, du kannst"
" ändern was er machen soll, während er läuft. Das ist das Geheimnis hinter Liv"
"e-Coding mit Sonic Pi. Lass uns das ausprobieren:"

#: A.02-live-coding.md:60
#, no-wrap
msgid ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"
msgstr ""
"live_loop :choral_drone do\n"
"  sample :ambi_choir, rate: 0.4\n"
"  sleep 1\n"
"end"

#: A.02-live-coding.md:67
msgid ""
"Now press the Run button or hit `Meta-r`. You're now listening to some gorgeou"
"s choir sounds. Now, whilst it's still playing, change the rate from `0.4` to "
"`0.38`. Hit run again. Woah! Did you hear the choir change note? Change it bac"
"k up to `0.4` to return back to how it was. Now, drop it to `0.2`, down to `0."
"19` and then back up to `0.4`. See how changing just one parameter on the fly "
"can give you real control of the music? Now play around with the rate yourself"
" - choose your own values. Try negative numbers, really small numbers and larg"
"e numbers. Have fun!"
msgstr ""
"Klicke auf die `Ausführen`-Schaltfläche oder drücke `Alt-R`. Du hörst jetzt "
"einen wunderschönen Chor-Klang. Nun, während dieser noch läuft, ändere deie "
"Rate von `0.4` auf `0.38`. Klicke erneut `Ausführen`. Wow! Hast du gehört, "
"wie der Chor die Note gewechselt hat? Setze sie wieder auf `0.4`, zurück auf "
"den alten Wert. Nun setze ihn runter auf `0.2`, runter bis `0.19` und dann "
"wieder hoch auf `0.4`. Sieh wie du durch das Ändern nur eines Parameters, im "
"laufenden Programm, die volle Kontrolle über die Musik erlangen kannst? "
"Spiele ein bisschen mit den Werten für `rate` - wähle deine eigenen Werte. "
"Probiere negative Zahlen, wirklich kleine Zahlen und große Zahlen. Viel Spaß!"

#: A.02-live-coding.md:77
msgid "Sleeping is important"
msgstr "Schlafen ist wichtig"

#: A.02-live-coding.md:79
msgid ""
"One of the most important lessons about `live_loop`s is that they need rest. C"
"onsider the following `live_loop`:"
msgstr ""
"Eine der wichtigsten Lektionen über 'live_loop's ist, dass sie Pausen brauchen"
". Betrachte einmal folgenden 'live_loop':"

#: A.02-live-coding.md:82
#, no-wrap
msgid ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"
msgstr ""
"live_loop :infinite_impossibilities do\n"
"  sample :ambi_choir\n"
"end"

#: A.02-live-coding.md:88
msgid ""
"If you try running this code, you'll immediately see Sonic Pi complaining that"
" the `live_loop` did not sleep. This is a safety system kicking in! Take a mom"
"ent to think about what this code is asking the computer to do. That's right, "
"it's asking the computer to play an infinite amount of choir samples in zero t"
"ime. Without the safety system the poor computer will try and do this and cras"
"h and burn in the process. So remember, your `live_loop`s must contain a `slee"
"p`."
msgstr ""
"Wenn du versuchst, diese Code auszuführen, wirst du bemerken, dass Sonic Pi si"
"ch beschwert, dass der `live_loop` nicht geschlafen hat. Das ist ein Sicherhei"
"tssystem! Nimm dir etwas Zeit und denk darüber nach, was dieser Code vom Compu"
"ter verlangt. Genau, der Computer wird gefragt eine unendliche Anzahl an Sampl"
"es zum Nullzeitpunkt zu spielen. Ohne das Sicherheitssystem wird der arme Comp"
"uter das probieren und währenddessen abstürzen. Also immer daran denken: Deine"
" `live_loop`s müssen ein `sleep` beinhalten."

#: A.02-live-coding.md:97
msgid "Combining Sounds"
msgstr "Töne kombinieren"

#: A.02-live-coding.md:99
msgid ""
"Music is full of things happening at the same time. Drums at the same time as "
"bass at the same time as vocals at the same time as guitars... In computing we"
" call this concurrency and Sonic Pi provides us with an amazingly simple way o"
"f playing things at the same time. Simply use more than one `live_loop`!"
msgstr ""
"Musik ist voll von Dingen, die zur selben Zeit geschehen. Das Schlagzeug spiel"
"t zur selben Zeit wie der Bass, Gesang und die Gitarre… In der Informatik nenn"
"en wir das Nebenläufigkeit (concurrency). Sonic Pi bietet uns eine einfache Mö"
"glichkeit verschiedenste Dinge zur selben Zeit abspielen zu lassen. Benutze ei"
"nfach mehr als einen `live_loop`!"

#: A.02-live-coding.md:105
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :bd_tek\n"
"  with_fx :echo, phase: 0.125, mix: 0.4 do\n"
"    sample  :drum_cymbal_soft, sustain: 0, release: 0.1\n"
"    sleep 0.5\n"
"  end\n"
"end\n"
"live_loop :bass do\n"
"  use_synth :tb303\n"
"  synth :tb303, note: :e1, release: 4, cutoff: 120, cutoff_attack: 1\n"
"  sleep 4\n"
"end"

#: A.02-live-coding.md:121
msgid ""
"Here, we have two `live_loop`s, one looping quickly making beats and another l"
"ooping slowly making a crazy bass sound."
msgstr ""
"Hier haben wir zwei `live_loop`s. Der eine wiederholt schnell Beats, während d"
"er andere durch langsames Wiederholen einen verrückten Bass Sound kreiert."

#: A.02-live-coding.md:124
msgid ""
"One of the interesting things about using multiple `live_loop`s is that they e"
"ach manage their own time. This means it's really easy to create interesting p"
"olyrhythmical structures and even play with phasing Steve Reich style. Check t"
"his out:"
msgstr ""
"Eines der interessanten Dinge bei der Verwendung von `live_loop`in mehreren "
"Instanzen ist, dass sie alle jeweils ihre eigene Zeit verwalten. Das "
"bedeutet, dass es wirklich einfach ist, interessante polyrhythmische "
"Strukturen zu erzeugen und sogar mit Phasenverschiebungen á la Steve Reich "
"zu spielen. Schau dir das an:"

#: A.02-live-coding.md:129
#, no-wrap
msgid ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"
msgstr ""
"# Steve Reich's Piano Phase\n"
"notes = (ring :E4, :Fs4, :B4, :Cs5, :D5, :Fs4, :E4, :Cs5, :B4, :Fs4, :D5, :Cs5"
")\n"
"live_loop :slow do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.3\n"
"end\n"
"live_loop :faster do\n"
"  play notes.tick, release: 0.1\n"
"  sleep 0.295\n"
"end"

#: A.02-live-coding.md:145 A.03-coded-beats.md:155 A.04-synth-riffs.md:166
#: A.05-acid-bass.md:147 A.06-minecraft.md:156 A.07-bizet.md:138
#: A.09-randomisation.md:145 A.10-controlling-your-sound.md:149
#: A.11-beat-tracking.md:176 A.12-sample-slicing.md:137
#: A.13-probabilistic-sequencer.md:137 A.14-amplitude-modulation.md:192
#: A.15-performance.md:152 A.16-practice.md:166 A.17-sample-stretching.md:153
#: A.18-additive-synthesis.md:115 A.19-subtractive-synthesis.md:138
msgid "Bringing it all together"
msgstr "Alles zusammenführen"

#: A.02-live-coding.md:147
msgid ""
"In each of these tutorials, we'll end with a final example in the form of a ne"
"w piece of music which draws from all of the ideas introduced. Read this code "
"and see if you can imagine what it's doing. Then, copy it into a fresh Sonic P"
"i buffer and hit Run and actually hear what it sounds like. Finally, change on"
"e of the numbers or comment and uncomment things out. See if you can use this "
"as a starting point for a new performance, and most of all have fun! See you n"
"ext time..."
msgstr ""
"Jedes dieser Tutorials werden wir mit einem abschließenden Code-Beispiel beend"
"en, das sich aller zuvor behandelter Ideen bedient. Schau Dir diesen Code gena"
"u an und überlege Dir, was er tut. Kopiere ihn anschließend in einen neuen Son"
"ic Pi-Puffer, drücke auf Start und hör Dir an, wie er klingt. Ändere zum Schlu"
"ss etwas am Code, indem Du Parameter veränderst oder Dinge auskommentierst. Vi"
"elleicht kannst Du das als Ausgangspunkt für eine eigene Performance nutzen. D"
"as Wichtigste ist auf jeden Fall der Spaß dabei. Bis zum nächsten Mal …"

#: A.02-live-coding.md:156
#, no-wrap
msgid ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"with_fx :reverb, room: 1 do\n"
"  live_loop :time do\n"
"    synth :prophet, release: 8, note: :e1, cutoff: 90, amp: 3\n"
"    sleep 8\n"
"  end\n"
"end\n"
"live_loop :machine do\n"
"  sample :loop_garzul, rate: 0.5, finish: 0.25\n"
"  sample :loop_industrial, beat_stretch: 4, amp: 1\n"
"  sleep 4\n"
"end\n"
"live_loop :kik do\n"
"  sample :bd_haus, amp: 2\n"
"  sleep 0.5\n"
"end\n"
"with_fx :echo do\n"
"  live_loop :vortex do\n"
"    # use_random_seed 800\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 3)\n"
"    16.times do\n"
"      play notes.choose, release: 0.1, amp: 1.5\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.03-coded-beats.md:1
msgid "A.3 Coded Beats"
msgstr "A.3 Kodierte Beats"

#: A.03-coded-beats.md:3
msgid "Coded Beats"
msgstr "Kodierte Beats"

#: A.03-coded-beats.md:5
msgid ""
"One of the most exciting and disrupting technical developments in modern music"
" was the invention of samplers. These were boxes that allowed you to record an"
"y sound into them and then manipulate and play back those sounds in many inter"
"esting ways. For example, you could take an old record, find a drum solo (or b"
"reak), record it into your sampler and then play it back on repeat at half-spe"
"ed to provide the foundation for your latest beats. This is how early hip-hop "
"music was born and today it's almost impossible to find electronic music that "
"doesn't incorporate samples of some kind. Using samples is a really great way "
"of easily introducing new and interesting elements into your live coded perfor"
"mances."
msgstr ""
"Eine der spannendsten und einflussreichsten technischen Entwicklungen der mode"
"rnen Musik ist die Erfindung von Samplern. Sampler sind Musikinstrumente, die "
"es einem erlauben Töne aufzunehmen, sie zu verändern und auf verschiedene Arte"
"n und Weisen wiederzugeben. Zum Beispiel ist es mit einem Sampler möglich ein "
"Schlagzeug Solo (oder Break) von einer alten Schalplatte einzuspielen und es a"
"nschließend als Grundlage für einen neuen Beat zu verwenden, indem man es mit "
"halber Geschwindigkeit wiedergibt. So ist früher Hip-Hop entstanden und heute "
"gibt es kaum noch Elektronische Musik, die ohne irgendeine Art von Samples aus"
"kommt. Samples bieten dir eine großartige Möglichkeit auf einfache Art und Wei"
"se neue und interessante Elemente in Deine live gecodete Performance einfließe"
"n zu lassen."

#: A.03-coded-beats.md:17
msgid ""
"So where can you get a sampler? Well you already have one - it's your Raspberr"
"y Pi! The built-in live coding app Sonic Pi has an extremely powerful sampler "
"built into its core. Let's play with it!"
msgstr ""
"Aber wo kriegen wir einen Sampler her? Wir haben bereits einen - es ist unser "
"Raspberry Pi! Die mitgelieferte Live-Coding App Sonic Pi stellt uns einen mäch"
"tigen Sampler bereit. Lasst ihn uns ausprobieren!"

#: A.03-coded-beats.md:21
msgid "The Amen Break"
msgstr "Der Amen Break"

#: A.03-coded-beats.md:23
msgid ""
"One of the most classic and recognisable drum break samples is called the Amen"
" Break. It was first performed in 1969 in the song \"Amen Brother\" by the Winst"
"ons as part of a drum break. However, it was when it was discovered by early h"
"ip-hop musicians in the 80s and used in samplers that it started being heavily"
" used in a wide variety of other styles such as drum and bass, breakbeat, hard"
"core techno and breakcore."
msgstr ""
"Eines der klassischen Schlagzeug-Break-Samples mit dem größten "
"Wiedererkennungswert ist der Amen-Break. Er wurde erstmals 1969 von den "
"Winstons in ihrem Song \"Amen Brother\" als Teil eines Drum-Break "
"aufgenommen. Doch erst seine Wiederentdeckung durch frühe Hip-Hop-Musiker in "
"den 80ern und sein Einsatz in Samplern führte zu einer Verwendung des "
"Samples in einer großen Bandbreite von Musikstilen, wie Drum and Bass, "
"Breakbeat, Hardcore Techno und Breakcore."

#: A.03-coded-beats.md:30
msgid ""
"I'm sure you're excited to hear that it's also built right into Sonic Pi. Clea"
"r up a buffer and throw in the following code:"
msgstr ""
"Ich bin mir sicher, Du freust Dich zu hören, dass das Sample direkt in Sonic P"
"i eingebaut ist. Bereite einfach einen Puffer vor und kopiere den folgenden Co"
"de hinein:"

#: A.03-coded-beats.md:37
msgid ""
"Hit *Run* and boom! You're listening to one of the most influential drum break"
"s in the history of dance music. However, this sample wasn't famous for being "
"played as a one-shot, it was built for being looped."
msgstr ""
"Drücke auf *Start* und boom! Du hörst dir gerade eines der einflussreichsten D"
"rum Breaks in der Geschichte der Tanzmusik an. Dieses Sample ist allerdings ni"
"cht damit berühmt geworden, einmal abgespielt zu werden. Vielmehr ist es wie g"
"emacht dafür wiederholt zu werden."

#: A.03-coded-beats.md:42
msgid "Beat Stretching"
msgstr "Beat Stretching"

#: A.03-coded-beats.md:44
msgid ""
"Let's loop the Amen Break by using our old friend the `live_loop` introduced i"
"n this tutorial last month:"
msgstr ""
"Lass uns den Amen Break in Schleife schalten, indem wir unseren alten Bekannte"
"n, den`live_loop` aus dem Tutorial vom letzten Monat, einsetzen:"

#: A.03-coded-beats.md:47
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:54
msgid ""
"OK, so it is looping, but there's an annoying pause every time round. That is "
"because we asked it to sleep for `2` beats and with the default BPM of 60 the "
"`:loop_amen` sample only lasts for `1.753` beats. We therefore have a silence "
"of `2 - 1.753 = 0.247` beats. Even though it's short, it's still noticeable."
msgstr ""
"OK, es wiederholt sich. Allerdings kommt es am Ende eines Durchlaufs zu einer "
"lästige Pause. Diese entsteht durch unserer Anweisung `2` Takte zu pausieren. "
"Das `:loop_amen` Sample dauert bei einem voreingestellten BPM Wert von 60 nur "
"`1.753` Takte. Das bedeutet kommt es am Sample Ende zu einer Pause von `2 - 1."
"753 = 0.247` Takten, was kurz, aber durchaus wahrnehmbar ist."

#: A.03-coded-beats.md:60
msgid ""
"To fix this issue we can use the `beat_stretch:` opt to ask Sonic Pi to stretc"
"h (or shrink) the sample to match the specified number of beats."
msgstr ""
"Um dieses Problem zu beheben, können wir die `beat_stretch:` Option verwenden."
" Sie sagt Sonic Pi, dass das Sample auf die angegebene Anzahl von Takten ausge"
"dehnt (bzw. gestaucht) werden soll."

#: A.03-coded-beats.md:63
msgid ""
"Sonic Pi's `sample` and `synth` fns give you a lot of control via optional par"
"ameters such as `amp:`, `cutoff:` and `release:`. However, the term optional p"
"arameter is a real mouthful so we just call them *opts* to keep things nice an"
"d simple."
msgstr ""
"Sonic Pis Funktionen `sample` und `synth` geben uns über optionale Parameter "
"wie `amp:`, `cutoff:` und `release:` viele zusätzliche "
"Steuerungsmöglichkeiten. Da die Bezeichnung optionale Parameter allerdings "
"recht lang ist, werden wir sie ab jetzt einfach *opts* nennen."

#: A.03-coded-beats.md:68
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:75
msgid ""
"Now we're dancing! Although, perhaps we want to speed it up or slow it down to"
" suit the mood."
msgstr ""
"Jetzt schwingen wir das Tanzbein! Vielleicht wollen wir es noch etwas schnelle"
"r, oder doch einen Ton gemächlicher - je nach Stimmung."

#: A.03-coded-beats.md:78
msgid "Playing with Time"
msgstr "Mit der Zeit spielen"

#: A.03-coded-beats.md:80
msgid ""
"OK, so what if we want to change styles to old school hip hop or breakcore? On"
"e simple way of doing this is to play with time - or in other words mess with "
"the tempo. This is super easy in Sonic Pi - just throw in a `use_bpm` into you"
"r live loop:"
msgstr ""
"OK, wie sieht es aus, wenn wir den Stiel unserer Musik zu Hip Hop oder Breakco"
"re ändern wollen? Eine einfache Möglichkeit das zu tun ist mit der Zeit zu spi"
"elen - oder in anderen Worten am Tempo herumbasteln. In Sonic Pi ist das super"
" leicht - füge einfach `use_bpm` in deinen Live-Loop ein:"

#: A.03-coded-beats.md:85
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 30\n"
"  sample :loop_amen, beat_stretch: 2\n"
"  sleep 2\n"
"end "

#: A.03-coded-beats.md:93
msgid ""
"Whilst you're rapping over those slow beats, notice that we're still sleeping "
"for 2 and our BPM is 30, yet everything is in time. The `beat_stretch` opt wor"
"ks with the current BPM to make sure everything just works."
msgstr ""
"Während du gerade zu diesen langsamen Beats rappst, beobachte, dass obwohl wir"
" immer noch eine Pause von 2 machen und unsere BPM bei 30 liegen nichts verzög"
"ert klingt. Die `beat_stretch` Option berücksichtigt den aktuellen BPM Wert un"
"d bringt alles in Einklang."

#: A.03-coded-beats.md:97
msgid ""
"Now, here's the fun part. Whilst the loop is still live, change the `30` in th"
"e `use_bpm 30` line to `50`. Woah, everything just got faster yet *kept in tim"
"e*! Try going faster - up to 80, to 120, now go crazy and punch in 200!"
msgstr ""
"Jetzt kommen wir zum spannenden Teil. Während der Loop läuft, verändere den We"
"rt `30` in der `use_bpm 30` Zeile zu `50`. Wuhuu, auf einmal ist alles *ohne a"
"us dem Einklang zu geraten* schneller geworden! Versuch das Tempo noch etwas m"
"ehr zu erhöhen - 80, 120 und um es wirklich verrückt klingen zu lassen, trage "
"200 ein!"

#: A.03-coded-beats.md:103
msgid "Filtering"
msgstr "Filtern"

#: A.03-coded-beats.md:105
msgid ""
"Now we can live loop samples, let's look at some of the most fun opts provided"
" by the `sample` synth. First up is `cutoff:` which controls the cutoff filter"
" of the sampler. By default this is disabled but you can easily turn it on:"
msgstr ""
"Nun können wir Samples in unseren Live-Loop integrieren. Schauen wir uns "
"einige der interessanten Optionen des `sample` Synths an. Zunächst `cutoff:`"
", das den Cut-Off-Filter des Samplers steuert. Standardmäßig ist dieser "
"ausgeschaltet. Aber du kannst ihn ganz einfach einschalten:"

#: A.03-coded-beats.md:110
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  sample :loop_amen, beat_stretch: 2, cutoff: 70\n"
"  sleep 2\n"
"end  "

#: A.03-coded-beats.md:118
msgid ""
"Go ahead and change the `cutoff:` opt. For example, increase it to 100, hit *R"
"un* and wait for the loop to cycle round to hear the change in the sound. Noti"
"ce that low values like 50 sound mellow and bassy and high values like 100 and"
" 120 are more full-sounding and raspy. This is because the `cutoff:` opt will "
"chop out the high frequency parts of the sound just like a lawn-mower chops of"
"f the top of the grass. The `cutoff:` opt is like the length setting - determi"
"ning how much grass is left over."
msgstr ""
"Nun, ändere den Wert der `cutoff:` Option. Erhöhe ihn zum Beispiel auf 100, dr"
"ücke auf *Start* und warte bis der Loop einmal durchgelaufen ist, um die Änder"
"ung zu hören. Du kannst beobachten, dass niedrige Werte wie 50 den Klang voll "
"und basslastig machen, hohe Werte wie 100 und 200 aber voll und kratzend kling"
"en. Das liegt daran, dass die `cutoff:` Option die Höhen wegschneidet - genau "
"so wie ein Rasenmäher die Enden von Grashalmen abschneidet. Die `cutoff:` fung"
"iert als eine Längeneinstellung. Sie legt fest, wie viel Grass nach dem Mähen "
"übrig bleibt."

#: A.03-coded-beats.md:128
msgid "Slicing"
msgstr "Slicing"

#: A.03-coded-beats.md:130
msgid ""
"Another great tool to play with is the slicer FX. This will chop (slice) the s"
"ound up. Wrap the `sample` line with the FX code like this:"
msgstr ""
"Ein anderes tolles Tool, das wir ausprobieren können, ist der FX Slicer. Er st"
"ückelt unseren Sound in Einzelsequenzen. Verpacke die `sample` Zeile dafür ein"
"fach mit dem folgenden FX Code:"

#: A.03-coded-beats.md:133
#, no-wrap
msgid ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"
msgstr ""
"live_loop :amen_break do\n"
"  use_bpm 50\n"
"  with_fx :slicer, phase: 0.25, wave: 0, mix: 1 do\n"
"    sample :loop_amen, beat_stretch: 2, cutoff: 100\n"
"  end\n"
"  sleep 2\n"
"end"

#: A.03-coded-beats.md:143
msgid ""
"Notice how the sound bounces up and down a little more. (You can hear the orig"
"inal sound without the FX by changing the `mix:` opt to `0`.) Now, try playing"
" around with the `phase:` opt. This is the rate (in beats) of the slicing effe"
"ct. A smaller value like `0.125` will slice faster and larger values like `0.5"
"` will slice more slowly. Notice that successively halving or doubling the `ph"
"ase:` opts val tends to always sound good. Finally, change the `wave:` opt to "
"one of 0, 1, or 2 and hear how it changes the sound. These are the various wav"
"e shapes. 0 is a saw wave, (hard in, fade out) 1 is a square wave (hard in, ha"
"rd out) and 2 is a triangle wave (fade in, fade out)."
msgstr ""
"Beobachte, wie der Klang dadurch etwas mehr auf und ab federt. (Du kannst dir "
"den ursprünglichen Klang ohne FX anhören, indem du die Option `mix:` auf `0` s"
"etzt.) Als nächstes, versuche dich an der `phase:` Option. Das ist die Rate (i"
"n Beats) in der gestückelt wird. Ein kleiner Wert wie `0.125` stückelt häufig,"
" hohe Werte wie `0.5` stückeln hingegen langsamer. Beobachte, dass eine stufen"
"weises Halbieren oder Vierteln der `phase:` tendenziell immer gut klingt. Setz"
"te zuletzt die `wave:` Option auf 0, 1, oder 2 und höre dir an, wie die Änderu"
"ng klingt. Die Werte stehen für unterschiedliche Schwingungsformen. 0 repräsen"
"tiert eine Sägezahnschwindung (hard in, fade out), 1 eine Rechteckschwingung ("
"hard in, hard out) und 2 eine Dreieckschwingung (hard in, hard out)."

#: A.03-coded-beats.md:157
msgid ""
"Finally, let's go back in time and revisit the early Bristol drum and bass sce"
"ne with this month's example. Don't worry too much about what all this means, "
"just type it in, hit Run, then start live coding it by changing opt numbers an"
"d see where you can take it. Please do share what you create! See you next tim"
"e..."
msgstr ""
"Lass uns für unser letztes Beispiel einem Blick auf die frühe Drum and Bass Sz"
"ene in Bristol werfen. Mach dir keinen Sorgen, wenn du nicht genau verstehst, "
"wie das Beispiel funktioniert. Füge den Code einfach in Sonic Pi ein, klicke a"
"uf Ausführen und versuche dich am Live-Coden, indem du die Werte der verschied"
"enen Optionen veränderst. Vergesse nicht deine Kreationen mit anderen zu teile"
"n! Bis zum nächsten Mal…"

#: A.03-coded-beats.md:163
#, no-wrap
msgid ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"
msgstr ""
"use_bpm 100\n"
"live_loop :amen_break do\n"
"  p = [0.125, 0.25, 0.5].choose\n"
"  with_fx :slicer, phase: p, wave: 0, mix: rrand(0.7, 1) do\n"
"    r = [1, 1, 1, -1].choose\n"
"    sample :loop_amen, beat_stretch: 2, rate: r, amp: 2\n"
"  end\n"
"  sleep 2\n"
"end\n"
"live_loop :bass_drum do\n"
"  sample :bd_haus, cutoff: 70, amp: 1.5\n"
"  sleep 0.5\n"
"end\n"
"live_loop :landing do\n"
"  bass_line = (knit :e1, 3, [:c1, :c2].choose, 1)\n"
"  with_fx :slicer, phase: [0.25, 0.5].choose, invert_wave: 1, wave: 0 do\n"
"    s = synth :square, note: bass_line.tick, sustain: 4, cutoff: 60\n"
"    control s, cutoff_slide: 4, cutoff: 120\n"
"  end\n"
"  sleep 4\n"
"end"

#: A.04-synth-riffs.md:1
msgid "A.4 Synth Riffs"
msgstr "A.4 Synth Riffs"

#: A.04-synth-riffs.md:3
msgid "Synth Riffs"
msgstr "Synth Riffs"

#: A.04-synth-riffs.md:5
msgid ""
"Whether it's the haunting drift of rumbling oscillators or the detuned punch o"
"f saw waves piercing through the mix, the lead synth plays an essential role o"
"n any electronic track. In last month's edition of this tutorial series we cov"
"ered how to code our beats. In this tutorial we'll cover how to code up the th"
"ree core components of a synth riff - the timbre, melody and rhythm."
msgstr ""
"Ob polterndere Oszillatoren oder die verstimmten Klänge von Sägezahnschwingung"
"en, die sich durch ein Stück ziehen, der Lead Synth - der melodische Hauptpart"
" eines Stücks - spielt in jeder elektronischen Komposition eine wichtige Rolle"
". Im der letzten Einheit dieses Tutorials haben wir gelernt, wie man Klänge er"
"zeugt. Jetzt werden wir uns damit beschäftigen, wie wir die drei Hauptkomponen"
"ten eines Synth Riffs - Klangfarbe, Melodie und Rhythmus - coden können."

#: A.04-synth-riffs.md:12
msgid ""
"OK, so power up your Raspberry Pi, crack open Sonic Pi v2.6+ and let's make so"
"me noise!"
msgstr ""
"OK, fahre deinen Raspberry Pi hoch, öffne Sonic Pi v2.6+ und auf gehts, lass u"
"nd Musik machen!"

#: A.04-synth-riffs.md:16
msgid "Timbral Possibilities"
msgstr "Die Welt der Klangfarben"

#: A.04-synth-riffs.md:18
msgid ""
"An essential part of any synth riff is changing and playing with the timbre of"
" the sounds. We can control the timbre in Sonic Pi in two ways - choosing diff"
"erent synths for a dramatic change and setting the various synth opts for more"
" subtle modifications. We can also use FX, but that's for another tutorial..."
msgstr ""
"Ein essentieller Teil jeder Synth-Figur ist das Verändern und Spielen mit "
"der Färbung der Klänge. Wir können die Klangfarbe in Sonic Pi Sonic Pi auf "
"zwei Arten steuern - indem wir für dramatische Änderungen verschiedene "
"Synths verwenden, und für dezente Modifizierungen die verschiedenen Synth-"
"Optionen einsetzen. Wir können dafür auch Effekte einsetzen, aber das ist "
"ein Tutorial für sich …"

#: A.04-synth-riffs.md:24
msgid "Let's create a simple live loop where we continually change the current synth:"
msgstr ""
"Lass uns einen einfachen Live-Loop schreiben, in dem wir laufend den Synth änd"
"ern:"

#: A.04-synth-riffs.md:27
#, no-wrap
msgid ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :timbre do\n"
"  use_synth (ring :tb303, :blade, :prophet, :saw, :beep, :tri).tick\n"
"  play :e2, attack: 0, release: 0.5, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.04-synth-riffs.md:35
msgid ""
"Take a look at the code. We're simply ticking through a ring of synth names (t"
"his will cycle through each of these in turn repeating the list over and over)"
". We pass this synth name to the `use_synth` fn (function) which will change t"
"he `live_loop`'s current synth. We also play note `:e2` (E at the second octav"
"e), with a release time of 0.5 beats (half a second at the default BPM of 60) "
"and with the `cutoff:` opt set to 100."
msgstr ""
"Schau dir den Code genauer an. Mit dem `tick` Befehl gehen wir Eintrag für Ein"
"trag durch einen Ring von Synth Namen (wobei wir die Liste immer wieder wieder"
"holen). Anschließend übergeben wir diesen Synth an die `use_synth` Funktion, d"
"ie den aktuellen Synth unseres Live-Loops ändert. Außerdem spielen wir die Not"
"e `:e2` (e der zweiten Oktave) mit einer Abklingzeit von 0.5 Takten (0.5 Sekun"
"den bei unser Standard-BPM von 60) und einem `cutoff:` Wert von 100."

#: A.04-synth-riffs.md:42
msgid ""
"Hear how the different synths have very different sounds even though they're a"
"ll playing the same note. Now experiment and have a play. Change the release t"
"ime to bigger and smaller values. For example, change the `attack:` and `relea"
"se:` opts to see how different fade in/out times have a huge impact on the sou"
"nd. Finally change the `cutoff:` opt to see how different cutoff values also m"
"assively influence the timbre (values between 60 and 130 are good). See how ma"
"ny different sounds you can create by just changing a few values. Once you've "
"mastered that, just head to the Synths tab in the Help system for a full list "
"of all the synths and all the available opts each individual synth supports to"
" see just how much power you have under your coding fingertips."
msgstr ""
"Hörst du, wie die unterschiedlichen Synths vollkommen verschiedene Klänge erze"
"ugen, obwohl sie alle die selbe Note spielen? Lass uns damit experimentieren. "
"Erhöhe oder verkleinere den Wert der Abklingzeit. Ändere zum Beispiel die Wert"
"e der Optionen `attack:` und `release:`, um zu sehen, wie sich unterschiedlich"
"e Fade-In und Fade-Out Zeiten auf den Klang auswirken. Zuletzt kannst du den W"
"ert der `cutoff:` Option ändern, um zu beobachten, wie unterschiedliche Cut-Of"
"f-Wert die Klangfarbe beeinflussen (Werte zwischen 60 und 130 sind gut). Probi"
"ert mal aus, wie viele verschiedene Klänge du erzeugen kannst, indem du an die"
"sen wenigen Parametern rumschraubst. Wenn dir das gelingt, kannst du im dir im"
" Help System den Eintrag zu Synth anschauen. Hier findest du eine Auflistung a"
"ller Synths und der Optionen, die sie bereitstellen. Ein Reich an Möglichkeite"
"n liegt dir zu Füßen."

#: A.04-synth-riffs.md:55
msgid "Timbre"
msgstr "Klangfarbe"

#: A.04-synth-riffs.md:57
msgid ""
"Timbre is just a fancy word describing the sound of a sound. If you play the s"
"ame note with different instruments such as a violin, guitar, or piano, the pi"
"tch (how high or low it sounds) would be the same, but the sound quality would"
" be different. That sound quality - the thing which allows you to tell the dif"
"ference between a piano and a guitar is the timbre."
msgstr ""
"Klangfarbe (engl. timbre) ist nur ein ausgefallenes Wort für den Klang eines G"
"eräusches. Wenn man die selbe Note auf verschiedenen Instrumenten, wie zum Bei"
"spiel einer Geige, einer Gitarre oder einem Klavier spielt, so bleibt die Tonh"
"öhe (wie hoch oder niedrig ein Ton ist) immer die selbe. Die Tonqualität hinge"
"gen unterscheidet sich. Dieser Unterschied, der einem erlaubt festzustellen, o"
"b es sich um ein Klavier oder eine Gitarre handelt, ist die Klangfarbe."

#: A.04-synth-riffs.md:65
msgid "Melodic Composition"
msgstr "Melodische Komposition"

#: A.04-synth-riffs.md:67
msgid ""
"Another important aspect to our lead synth is the choice of notes we want to p"
"lay. If you already have a good idea, then you can simply create a ring with y"
"our notes in and tick through them:"
msgstr ""
"Ein anderer wichtiger Aspekt in der Zusammenstellung unseres Leas Synths ist d"
"ie Wahl der Noten, die gespielt werden sollen. Wenn du bereits eine Idee dafür"
" hast, kannst du einfach einen Ring erstellen, der über die gewünschte Notenfo"
"lge iteriert:"

#: A.04-synth-riffs.md:71
#, no-wrap
msgid ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :riff do\n"
"  use_synth :prophet\n"
"  riff = (ring :e3, :e3, :r, :g3, :r, :r, :r, :a3)\n"
"  play riff.tick, release: 0.5, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:80
msgid ""
"Here, we've defined our melody with a ring which includes both notes such as `"
":e3` and rests represented by `:r`. We're then using `.tick` to cycle through "
"each note to give us a repeating riff."
msgstr ""
"Hier haben wir unsere Melodie mit Hilfe eines Rings definiert, der sich aus No"
"ten wie `:e3` und Pausen - dargestellt durch `:r`- zusammensetzt. Wir nutzen `"
".tick` um über die Notenfolge zu iterieren und so einen sich wiederholenden Ri"
"ff zu erzeugen."

#: A.04-synth-riffs.md:84
msgid "Auto Melody"
msgstr "Automatische Melodie"

#: A.04-synth-riffs.md:86
msgid ""
"It's not always easy to come up with a nice riff from scratch. Instead it's of"
"ten easier to ask Sonic Pi for a selection of random riffs and to choose the o"
"ne you like the best. To do that we need to combine three things: rings, rando"
"misation and random seeds. Let's look at an example:"
msgstr ""
"Es ist nicht leicht einen gut klingenden Riff aus dem Nichts zu zaubern. Statt"
" dessen ist es oft hilfreich sich von Sonic Pi eine Auswahl von zufälligen Rif"
"fs ausgeben zu lassen und einen von diesen auszuwählen. Um das zu tun, verbind"
"en wir drei bekannte Konzepte miteinander: Ringe, Randomisierung und Zufallsza"
"hlen. Schauen wir uns ein Beispiel an:"

#: A.04-synth-riffs.md:91
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 3\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  play notes.tick, release: 0.25, cutoff: 80\n"
"  sleep 0.25\n"
"end"

#: A.04-synth-riffs.md:101
msgid ""
"There's a few things going on - let's look at them in turn. First, we specify "
"that we're using random seed 3. What does this mean? Well, the useful thing is"
" that when we set the seed, we can predict what the next random value is going"
" to be - it's the same as it was last time we set the seed to 3! Another usefu"
"l thing to know is that shuffling a ring of notes works in the same way. In th"
"e example above we're essentially asking for the 'third shuffle' in the standa"
"rd list of shuffles - which is also the same every time as we're always settin"
"g the random seed to the same value right before the shuffle. Finally we're ju"
"st ticking through our shuffled notes to play the riff."
msgstr ""
"Es gibt ein paar Dinge, die wir uns der Reihe nach ansehen wollen. Zunächst "
"legen wir fest, dass wir den Zufallswert 3 verwenden. Was bedeutet das? Nun, "
"das Nützliche daran ist, dass wir, wenn wir den Seed setzen, vorhersagen "
"können, was der nächste Zufallswert sein wird - es ist derselbe wie beim "
"letzten Mal, als wir den Seed auf 3 gesetzt haben! Eine weitere nützliche "
"Information ist, dass das Mischen eines Notenrings auf dieselbe Weise "
"funktioniert. Im obigen Beispiel fragen wir im Wesentlichen nach dem "
"\"dritten Shuffle\" in der Standardliste der Shuffles - was auch jedes Mal "
"dasselbe ist, da wir den Zufallswert immer auf denselben Wert setzen, kurz "
"bevor wir den Shuffle starten. Schließlich gehen wir einfach durch unsere "
"gemischten Noten, um das Riff zu spielen."

#: A.04-synth-riffs.md:112
msgid ""
"Now, here's where the fun starts. If we change the random seed value to anothe"
"r number, say 3000, we get an entirely different shuffling of the notes. So no"
"w it's extremely easy to explore new melodies. Simply choose the list of notes"
" we want to shuffle (scales are a great starting point) and then choose the se"
"ed we want to shuffle with. If we don't like the melody, just change one of th"
"ose two things and try again. Repeat until you like what you hear!"
msgstr ""
"Jetzt fängt der Spaß erst so richtig an. Wenn wir den Startwert(Seed) für "
"den Zufallsgenerator auf eine andere Zahl, z. B. 3000, ändern, erhalten wir "
"eine völlig andere Mischung der Noten. So ist es jetzt extrem einfach, neue "
"Melodien zu erforschen. Wähle einfach die Liste der Noten aus, die du "
"mischen möchten (Tonleitern sind ein guter Ausgangspunkt), und wählen Sie "
"dann den Startwert(Seed), mit dem du mischen möchten. Wenn uns die Melodie "
"nicht gefällt, ändern wir einfach einen dieser beiden Punkte und versuchen "
"es erneut. Wiederhole den Vorgang, bis dir gefällt was du hörst!"

#: A.04-synth-riffs.md:121
msgid "Pseudo Randomisation"
msgstr "Pseudo-Randomisierung"

#: A.04-synth-riffs.md:123
msgid ""
"Sonic Pi's randomisation is not actually random it's what's called pseudo rand"
"om. Imagine if you were to roll a dice 100 times and write down the result of "
"each roll onto a piece of paper. Sonic Pi has the equivalent of this list of r"
"esults which it uses when you ask for a random value. Instead of rolling an ac"
"tual dice, it just picks the next value from the list. Setting the random seed"
" is just jumping to a specific point in that list."
msgstr ""
"Die Zufallsgenerierung von Sonic Pi ist nicht wirklich zufällig, sondern "
"wird als Pseudozufall bezeichnet. Stell Dir vor, Du würdest 100 Mal würfeln "
"und das Ergebnis jedes Wurfs auf ein Blatt Papier schreiben. Sonic Pi "
"verfügt über das Äquivalent dieser Ergebnisliste, die verwendet wird, wenn "
"man nach einem Zufallswert fragt. Anstatt zu würfeln, wird einfach der "
"nächste Wert auf der Liste ausgewählt. Wenn Du einen Startwert(Seed) setzt, "
"dann springst Du einfach zu einem bestimmten Punkt in dieser Liste."

#: A.04-synth-riffs.md:131
msgid "Finding your Rhythm"
msgstr "Finde deinen Rythmus"

#: A.04-synth-riffs.md:133
msgid ""
"Another important aspect to our riff is the rhythm - when to play a note and w"
"hen not to. As we saw above we can use `:r` in our rings to insert rests. Anot"
"her very powerful way is to use spreads which we'll cover in a future tutorial"
". Today we'll use randomisation to help us find our rhythm. Instead of playing"
" every note we can use a conditional to play a note with a given probability. "
"Let's take a look:"
msgstr ""
"Ein weiteres wichtiges Merkmal unseres Riffs ist der Rhythmus, d.h. wann wir e"
"ine Note spielen und wann nicht. Wir haben bereits gesehen, dass wir `:r` nutz"
"en können, um Pausen in einen Ring einzufügen. Eine weiter Möglichkeit auf den"
" Rhythmus Einfluss zu nehmen sind sog. Spreads, über die wir in einem kommende"
"n Tutorial mehr lernen werden. Heute nutzen wir Randomisierung, um unseren Rhy"
"thmus zu finden. Anstatt immer jede Note in einem Ring zu spielen, können wir "
"über eine Bedingung festlegen, mit welcher Wahrscheinlichkeit sie abgespielt w"
"erden. Lass uns einen Blick darauf werfen:"

#: A.04-synth-riffs.md:140
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_synth :dsaw\n"
"  use_random_seed 30\n"
"  notes = (scale :e3, :minor_pentatonic).shuffle\n"
"  16.times do\n"
"    play notes.tick, release: 0.2, cutoff: 90 if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.04-synth-riffs.md:152
msgid ""
"A really useful fn to know is `one_in` which will give us a `true` or `false` "
"value with the specified probability. Here, we're using a value of 2 so on ave"
"rage one time every two calls to `one_in` it will return `true`. In other word"
"s, 50% of the time it will return `true`. Using higher values will make it ret"
"urn `false` more often introducing more space into the riff."
msgstr ""
"Eine nützliche Funktion in diesem Zusammenhang ist die Funktion `one_in`, "
"die `true` bzw. `false` mit einer bestimmten Wahrscheinlichkeit zurückgibt. "
"Hier verwenden wir den Wert 2, d.h. `one_in` gibt durchschnittlich ein Mal "
"alle zwei Aufrufe `true` zurück. Mit anderen Worten, `true` wird in 50% der "
"Fälle zurückgegeben. Höhere Werte bewirken, dass statt `true` häufiger "
"`false` zurückgegeben wird. Das führt zu mehr Lücken in unserem Riff."

#: A.04-synth-riffs.md:159
msgid ""
"Notice that we've added some iteration in here with `16.times`. This is becaus"
"e we only want to reset our random seed value every 16 notes so our rhythm rep"
"eats every 16 times. This doesn't affect the shuffling as that is still done i"
"mmediately after the seed is set. We can use the iteration size to alter the l"
"ength of the riff. Try changing the 16 to 8 or even 4 or 3 and see how it affe"
"cts the rhythm of the riff."
msgstr ""
"Beobachte, dass wir mit dem Befehl `16.times` Wiederholung eingebaut haben. Da"
"s haben wir gemacht, damit sich unser Zufallsgenerator (der Rückgabewert der `"
"one_in` Funktion) nur alle 16 Noten zurücksetzt und unser Rhythmus sich so all"
"e 16 Schlägen wiederholt. Wir nehmen damit keinen Einfluss auf das durcheinand"
"er Mischen, weil letzteres direkt nach dem Initiieren des Zufallsgenerators pa"
"ssiert. Wir können über die Größe der Wiederholungen die Länge unseres Riffs v"
"erändern. Versuche mal die Zahl 16 auf 8 oder sogar 4 oder 3 zu ändern und sch"
"aue dir an, wie sich das auf den Rhythmus des Riffs auswirkt."

#: A.04-synth-riffs.md:168
msgid ""
"OK, so let's combine everything we've learned together into one final example."
" See you next time!"
msgstr ""
"OK, lass uns zum Schluss alles, das wir gelernt haben, in einem abschließenden"
" Beispiel nutzen. Bis zum nächsten Mal!"

#: A.04-synth-riffs.md:171
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  #  uncomment to bring in:\n"
"  #  synth :blade, note: :e4, release: 4, cutoff: 100, amp: 1.5\n"
"  use_synth :dsaw\n"
"  use_random_seed 43\n"
"  notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle.take(8)\n"
"  8.times do\n"
"    play notes.tick, release: rand(0.5), cutoff: rrand(60, 130) if one_in(2)\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  use_random_seed 500\n"
"  16.times do\n"
"    sample :bd_haus, rate: 2, cutoff: 110 if rand < 0.35\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
" \n"
"live_loop :bd do\n"
"  sample :bd_haus, cutoff: 100, amp: 3\n"
"  sleep 0.5\n"
"end"

#: A.05-acid-bass.md:1
msgid "A.5 Acid Bass"
msgstr "A.5 Acid Bass"

#: A.05-acid-bass.md:3
msgid "Acid Bass"
msgstr "Acid Bass"

#: A.05-acid-bass.md:5
msgid ""
"It's impossible to look through the history of electronic dance music without "
"seeing the enormous impact of the tiny Roland TB-303 synthesiser. It's the sec"
"ret sauce behind the original acid bass sound. Those classic squealing and squ"
"elching TB-303 bass riffs can be heard from the early Chicago House scene thro"
"ugh to more recent electronic artists such as Plastikman, Squarepusher and Aph"
"ex Twin."
msgstr ""
"Wenn man sich die Geschichte der Elektronischen Tanzmusik anschaut, ist es sch"
"ier unmöglich den enormen Einfluss, den der winzige Synthesizer Roland TB-303 "
"hatte, zu übersehen. Er ist das Geheimnis hinter dem Klang des originalen Acid"
" Bass. Diese klassisch quietschenden und quieksenden Bass Riffe des TB-303 kan"
"n man sowohl in der frühen Chicago House Szene als auch bei Interpreten modern"
"er Elektronischen Musik wie Plastikman, Squarepusher und Aphex Twin hören."

#: A.05-acid-bass.md:12
msgid ""
"Interestingly, Roland never intended for the TB-303 to be used in dance music."
" It was originally created as a practice aid for guitarists. They imagined tha"
"t people would program them to play bass lines to jam along to. Unfortunately "
"there were a number of problems: they were a little fiddly to program, didn't "
"sound particularly good as a bass-guitar replacement and were pretty expensive"
" to buy. Deciding to cut their losses, Roland stopped making them after 10,000"
" units were sold and after a number of years sitting on guitarist's shelves, t"
"hey soon could be found in the windows of second hand shops. These lonely disc"
"arded TB-303s were waiting to be discovered by a new generation of experimente"
"rs who started using them in ways that Roland didn't imagine to create new cra"
"zy sounds. Acid House was born."
msgstr ""
"Interessanterweise hatte Roland nie vorgesehen, dass der TB-303 für "
"Tanzmusik zum Einsatz kommt. Er wurde ursprünglich als eine Übungshilfe für "
"Gitarristen entwickelt. Die Firma hatte sich überlegt, dass Leute mit Hilfe "
"des Synthesizers Basslinien programmieren würden zu denen sie jammen "
"könnten. Leider gab es damit mehrere Probleme: die Programmierung war etwas "
"zu kompliziert, der Klang glich nicht wirklich einer Bassgitarre, und sie "
"waren teuer in der Anschaffung. Um ihre Verluste zu minimieren, beendete "
"Roland die Produktion nach dem Verkauf von 10.000 Exemplaren. Nach ein paar "
"Jahren des Daseins als Staubfänger in den Regalen der Gitarristen wanderten "
"die meisten TB-303s in die Schaufenster von Second-Hand-Läden. Dort warteten "
"sie auf ihre Wiederentdeckung durch eine neue Generation von "
"Experimentierfreudigen, die anfingen sie auf eine Art und Weise zu nutzten, "
"die Roland nie vorgesehen hatte, um abgefahrene Klänge zu erzeugen. Das war "
"die Geburtsstunde des Acid House."

#: A.05-acid-bass.md:25
msgid ""
"Although getting your hands on an original TB-303 is not so easy you will be p"
"leased to know that you can turn your Raspberry Pi into one using the power of"
" Sonic Pi. Behold, fire up Sonic Pi and throw this code into an empty buffer a"
"nd hit Run:"
msgstr ""
"Obwohl es nicht leicht ist sich einen originalen TB-303 zu beschaffen, wirst D"
"u Dich sicher freuen zu hören, dass Du Deinen Raspberry Pi mit Hilfe von Sonic"
" Pi in einen TB-303 verwandeln kannst. Los gehts, wirf Sonic Pi an, kopiere de"
"n folgenden Code in einen leeren Puffer und klicke auf Ausführen:"

#: A.05-acid-bass.md:30
#, no-wrap
msgid ""
"use_synth :tb303\n"
"play :e1"
msgstr ""
"use_synth :tb303\n"
"play :e1"

#: A.05-acid-bass.md:35
msgid "Instant acid bass! Let's play around..."
msgstr "Siehe da! Wir haben einen Acid Bass! Lass uns weiter experimentieren…"

#: A.05-acid-bass.md:37
msgid "Squelch that Bass"
msgstr "Bringe den Bass zum Glucksen"

#: A.05-acid-bass.md:39
msgid ""
"First, let's build a live arpeggiator to make things fun. In the last tutorial"
" we looked at how riffs can just be a ring of notes that we tick through one a"
"fter another, repeating when we get to the end. Let's create a live loop that "
"does exactly that:"
msgstr ""
"Lass uns zunächst einen live Arpeggiator bauen. In unserer letzten Tutorialein"
"heit haben wir gelernt, dass Riffs durch Ringe von Noten, die wir nach einande"
"r in einer sich wiederholenden Schleife wiedergeben, repräsentiert werden könn"
"en. Lass uns einen Live-Loop schreiben, der das gleiche macht:"

#: A.05-acid-bass.md:44
#, no-wrap
msgid ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_synth :tb303\n"
"live_loop :squelch do\n"
"  n = (ring :e1, :e2, :e3).tick\n"
"  play n, release: 0.125, cutoff: 100, res: 0.8, wave: 0\n"
"  sleep 0.125\n"
"end"

#: A.05-acid-bass.md:53
msgid "Take a look at each line."
msgstr "Schaue dir jede Codeziele genau an."

#: A.05-acid-bass.md:55
msgid ""
"On the first line we set the default synth to be `tb303` with the `use_synth` "
"fn."
msgstr ""
"In der ersten Zeile setzen wir den Defaultwert der`use_synth` Funktion auf `tb"
"303`."

#: A.05-acid-bass.md:58
msgid ""
"On line two we create a live loop called `:squelch` which will just loop round"
" and round."
msgstr ""
"In der zweiten Zeile erstellen wir einen Live-Loop vom Typen `:squelch`, der s"
"ich die ganze Zeit wiederholt."

#: A.05-acid-bass.md:61
msgid ""
"Line three is where we create our riff - a ring of notes (E in octaves 1, 2, a"
"nd 3) which we simply tick through with `.tick`. We define `n` to represent th"
"e current note in the riff. The equals sign just means to assign the value on "
"the right to the name on the left. This will be different every time round the"
" loop. The first time round, `n` will be set to `:e1`. The second time round i"
"t will be `:e2`, followed by `:e3`, and then back to `:e1`, cycling round fore"
"ver."
msgstr ""
"In der dritten Zeile erstellen wir unseren Riff - einen Ring aus Noten (E in d"
"en Oktaven 1, 2, und 3), der diese mit Hilfe eines `.tick`s in Schleife durchl"
"äuft. Wir definieren `n` als die aktuelle Note in unserem Riff. Das Gleichheit"
"szeichen hier bedeutet, dass wir den Wert auf der rechten Seite der Bezeichnun"
"g auf der linken Seite zuzuweisen. In jedem Durchlauf unseres Loops hat `n`als"
"o ein anderer Wert. Im ersten Durchlauf wird `n` auf `:e1` gesetzt. Im zweiten"
" Durchlauf wird es auf `:e2`, gefolgt von `:e3` und dann wieder auf `:e1` usw."
" gesetzt."

#: A.05-acid-bass.md:70
msgid ""
"Line four is where we actually trigger our `:tb303` synth. We're passing a few"
" interesting opts here: `release:`, `cutoff:`, `res:` and `wave:` which we'll "
"discuss below."
msgstr ""
"Mit Zeile viert wird der eigentliche `:tb303` Synth eingeleitet. Dabei werden "
"einige interessante Optionen mitgegeben: `release:`, `cutoff:`, `res:` and `wa"
"ve:` über die wir etwas später genauer sprechen werden."

#: A.05-acid-bass.md:74
msgid ""
"Line five is our `sleep` - we're asking the live loop to loop round every `0.1"
"25`s or 8 times a second at the default BPM of 60."
msgstr ""
"In Zeile fünf machen wir eine Pause - wir geben unserem Live-Loop vor sich all"
"e `0.125`s (oder 8 mal pro Sekunde bei einem BPM von 60) zu wiederholen."

#: A.05-acid-bass.md:77
msgid ""
"Line six is the `end` to the live loop. This just tells Sonic Pi where the end"
" of the live loop is."
msgstr ""
"Zeile sechs markiert das Ende (`end`) des Live-Loops. Sie teilt Sonic Pi nur m"
"it, wo die zu wiederholende Sequenz zu Ende ist."

#: A.05-acid-bass.md:80
msgid ""
"Whilst you're still figuring out what's going on, type in the code above and h"
"it the Run button. You should hear the `:tb303` kick into action. Now, this is"
" where the action is: let's start live coding."
msgstr ""
"Während du dir noch überlegst, wie das alles genau funktioniert, tippe den obe"
"n stehenden Code ab und klicke auf Ausführen. Du solltest den `:tb303` lostret"
"en hören. Jetzt legen wir richtig los: lass uns mit dem Live-Coding beginnen."

#: A.05-acid-bass.md:84
msgid ""
"Whilst the loop is still live, change the `cutoff:` opt to `110`. Now hit the "
"Run button again. You should hear the sound become a little harsher and more s"
"quelchy. Dial in `120` and hit run. Now `130`. Listen how higher cutoff values"
" make it sound more piercing and intense. Finally, drop it down to `80` when y"
"ou feel like a rest. Then repeat as many times as you want. Don't worry, I'll "
"still be here..."
msgstr ""

#: A.05-acid-bass.md:91
msgid ""
"Another opt worth playing with is `res:`. This controls the level of resonance"
" of the filter. A high resonance is characteristic of acid bass sounds. We cur"
"rently have our `res:` set to `0.8`. Try cranking it up to `0.85`, then `0.9`,"
" and finally `0.95`. You might find that a cutoff such as `110` or higher will"
" make the differences easier to hear. Finally go crazy and dial in `0.999` for"
" some insane sounds. At a `res` this high, you're hearing the cutoff filter re"
"sonate so much it starts to make sounds of its own!"
msgstr ""

#: A.05-acid-bass.md:100
msgid ""
"Finally, for a big impact on the timbre try changing the `wave:` opt to `1`. T"
"his is the choice of source oscillator. The default is `0` which is a sawtooth"
" wave. `1` is a pulse wave and `2` is a triangle wave."
msgstr ""
"Ändere zum Schluss die `wave:` Option auf `1`, um einen großen Einfluss auf di"
"e Klangfarbe zu nehmen. Dies legt die Art der Schwingungserzeugung fest. Der S"
"tandard ist mit `0` eine Sägezahnschwingung. `1` steht für eine Pulswelle und "
"`2`für eine Dreiecksschwingung."

#: A.05-acid-bass.md:104
msgid ""
"Of course, try different riffs by changing the notes in the ring or even picki"
"ng notes from scales or chords. Have fun with your first acid bass synth."
msgstr ""
"Versuche natürlich auch verschiedene Riffs zu erzeugen, indem du die Noten im "
"Ring änderst oder sogar Noten aus Skalen oder Akkorden auswählst. Viel Spaß mi"
"t deinem ersten Acid Bass Synth."

#: A.05-acid-bass.md:108
msgid "Deconstructing the TB-303"
msgstr "Den TB-303 zerlegen"

#: A.05-acid-bass.md:110
msgid ""
"The design of the original TB-303 is actually pretty simple. As you can see fr"
"om the following diagram there's only 4 core parts."
msgstr ""
"Der Aufbau des originalen TB-303 ist eigentlich ganz einfach. Wie man dem folg"
"enden Diagramm entnehmen kann, gibt es nur vier Hauptbestandteile."

#: A.05-acid-bass.md:113
msgid ""
"![TB-303 Design](../../../etc/doc/images/tutorial/articles/A.05-acid-bass/tb30"
"3-design.png)"
msgstr ""
"![TB-303 Design](../../../etc/doc/images/tutorial/articles/A.05-acid-bass/"
"tb303-design.png)"

#: A.05-acid-bass.md:115
msgid ""
"First is the oscillator wave - the raw ingredients of the sound. In this case "
"we have a square wave. Next there's the oscillator's amplitude envelope which "
"controls the amp of the square wave through time. These are accessed in Sonic "
"Pi by the `attack:`, `decay:`, `sustain:` and `release:` opts along with their"
" level counterparts. For more information read Section 2.4 'Duration with Enve"
"lopes' in the built-in tutorial. We then pass our enveloped square wave throug"
"h a resonant low pass filter. This chops off the higher frequencies as well as"
" having that nice resonance effect. Now this is where the fun starts. The cuto"
"ff value of this filter is also controlled by its own envelope! This means we "
"have amazing control over the timbre of the sound by playing with both of thes"
"e envelopes. Let's take a look:"
msgstr ""

#: A.05-acid-bass.md:128
#, no-wrap
msgid ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"with_fx :reverb, room: 1 do\n"
"  live_loop :space_scanner do\n"
"    play :e1, cutoff: 100, release: 7, attack: 1, cutoff_attack: 4, cutoff_rel"
"ease: 4\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.05-acid-bass.md:138
msgid ""
"For each standard envelope opt, there's a `cutoff_` equivalent opt in the `:tb"
"303` synth. So, to change the cutoff attack time we can use the `cutoff_attack"
":` opt. Copy the code above into an empty buffer and hit Run. You'll hear a cr"
"azy sound warble in and out. Now start to play. Try changing the `cutoff_attac"
"k:` time to `1` and then `0.5`. Now try `8`."
msgstr ""
"Für jede Standard-Hüllkurvenoption gibt es eine entsprechende `cutoff_`-Option"
" im `:tb303`-Synthesizer. Um die cutoff-Anschlagszeit zu ändern, können wir di"
"e Option `cutoff_attack:` verwenden. Kopiere den Code unten in einen leeren Pu"
"ffer und drücke *Run*. Du wirst einen verrrückten Sound hören, der ein- und au"
"swobbelt. Nun spiel ein bisschen herum. Versuche, die `cutoff_attack:`-Zeit au"
"f `1` zu ändern, dann auf `0.5`. Und jetzt probiere `8`."

#: A.05-acid-bass.md:144
msgid ""
"Notice that I've passed everything through a `:reverb` FX for extra atmosphere"
" - try other FX to see what works!"
msgstr ""
"Beobachte, dass wir, um etwas mehr Stimmung zu erzeugen, alles durch einen `:r"
"everb` FX schicken - probiere ein paar andere Effekte aus und schaue welche hi"
"er gut passen!"

#: A.05-acid-bass.md:149
msgid ""
"Finally, here's a piece I composed using the ideas in this tutorial. Copy it i"
"nto an empty buffer, listen for a while and then start live coding your own ch"
"anges. See what crazy sounds you can make with it! See you next time..."
msgstr ""
"Zum Schluss gibt es ein Beispiel, das ich mit Hilfe der Konzepte aus diesem Tu"
"torial komponiert habe. Kopiere den Code in einen leeren Puffer, höre es Dir e"
"in Weile lang an und dann versuche Deine eigenen Änderungen live zu coden. Übe"
"rzeuge Dich davon, was für verrückte Klänge Du erzeugen kannst! Bis zum nächst"
"e Mal …"

#: A.05-acid-bass.md:154
#, no-wrap
msgid ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"use_synth :tb303\n"
"use_debug false\n"
" \n"
"with_fx :reverb, room: 0.8 do\n"
"  live_loop :space_scanner do\n"
"    with_fx :slicer, phase: 0.25, amp: 1.5 do\n"
"      co = (line 70, 130, steps: 8).tick\n"
"      play :e1, cutoff: co, release: 7, attack: 1, cutoff_attack: 4, cutoff_re"
"lease: 4\n"
"      sleep 8\n"
"    end\n"
"  end\n"
" \n"
"  live_loop :squelch do\n"
"    use_random_seed 3000\n"
"    16.times do\n"
"      n = (ring :e1, :e2, :e3).tick\n"
"      play n, release: 0.125, cutoff: rrand(70, 130), res: 0.9, wave: 1, amp: "
"0.8\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.06-minecraft.md:1
msgid "A.6 Musical Minecraft"
msgstr "A.6 Musisches Minecraft"

#: A.06-minecraft.md:3
msgid "Musical Minecraft"
msgstr "Musisches Minecraft"

#: A.06-minecraft.md:7
msgid ""
"Hello and welcome back! In the previous tutorials we've focussed purely on the"
" music possibilities of Sonic Pi - (turning your Raspberry Pi into a performan"
"ce ready musical instrument). So far we've learned how to:"
msgstr ""
"Hallo und willkommen zurück! In den zurückliegenden Tutorialeinheiten haben wi"
"r uns ausschließlich auf die musikalischen Möglichkeiten von Sonic Pi konzentr"
"iert (um unseren Raspberry Pi in ein konzertfähiges Musikinstrument zu verwand"
"eln). Bisher haben wir gelernt wie man:"

#: A.06-minecraft.md:11
msgid "Live Code - changing the sounds on-the-fly,"
msgstr "Live-Coded - Klänge live improvisieren,"

#: A.06-minecraft.md:12
msgid "Code some huge beats,"
msgstr "gigantische Beats komponiert,"

#: A.06-minecraft.md:13
msgid "Generate powerful synth leads,"
msgstr "mächtige Lead Synths generiert,"

#: A.06-minecraft.md:14
msgid "Re-create the famous TB-303 acid-bass sound."
msgstr "und den bekannten TB-303 Acid Bass nachbaut."

#: A.06-minecraft.md:16
msgid ""
"There's so much more to show you (which we will explore in future editions). H"
"owever, this month, let's look at something Sonic Pi can do that you probably "
"didn't realise: control Minecraft."
msgstr ""
"Es gibt noch so viel Dinge zu entdecken (was wir in zukünftigen Ausgaben des "
"Tutorials auch machen werden). Diesen Monat lass uns einen Blick auf etwas "
"werfen, was Sonic Pi kann, das du wahrscheinlich nicht erwartet hast: "
"Minecraft steuern."

#: A.06-minecraft.md:20
msgid "Hello Minecraft World"
msgstr "Hello Minecraft World"

#: A.06-minecraft.md:22
msgid ""
"OK, let's get started. Boot up your Raspberry Pi, fire up Minecraft Pi and cre"
"ate a new world. Now start up Sonic Pi and re-size and move your windows so yo"
"u can see both Sonic Pi and Minecraft Pi at the same time."
msgstr ""
"OK, lass uns loslegen. Fahre deinen Raspberry Pi hoch, werfe Minecraft Pi an u"
"nd erstelle eine neue Welt. Starte nun Sonic Pi und verändere die Größe deiner"
" Fenster so, dass du sowohl Sonic Pi als auch Minecraft Pi auf deinem Bildschi"
"rm sehen kannst."

#: A.06-minecraft.md:26
msgid "In a fresh buffer type the following:"
msgstr "Gib Folgendes in einen leeren Puffer ein:"

#: A.06-minecraft.md:28
#, no-wrap
msgid "mc_message \"Hello Minecraft from Sonic Pi!\""
msgstr "mc_message \"Hello Minecraft from Sonic Pi!\""

#: A.06-minecraft.md:32
msgid ""
"Now, hit Run. Boom! Your message appeared in Minecraft! How easy was that? Now"
", stop reading this for a moment and play about with your own messages. Have f"
"un!"
msgstr ""
"Drücke jetzt auf Ausführen. Boom! Deine Nachricht erscheint in Minecraft! Wie "
"einfach war das denn? Lege nun dieses Tutorial kurz beiseite und spiele mit de"
"inen eigenen Nachrichten herum. Viel Spaß!"

#: A.06-minecraft.md:36
msgid ""
"![Screen 0](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-0-small.png)"
msgstr ""
"![Bildschirm 0](../../../etc/doc/images/tutorial/articles/A.06-minecraft/"
"Musical-Minecraft-0-small.png)"

#: A.06-minecraft.md:38
msgid "Sonic Teleporter"
msgstr "Schall-Teleporter"

#: A.06-minecraft.md:40
msgid ""
"Now let's do some exploring. The standard option is to reach for the mouse and"
" keyboard and start walking around. That works, but it's pretty slow and borin"
"g. It would be far better if we had some sort of teleport machine. Well, thank"
"s to Sonic Pi, we have one. Try this:"
msgstr ""
"Lass uns ein wenig erkunden. Die üblichste Option ist Maus und Tastatur zu "
"ergreifen und einfach loszulaufen. Das funktioniert, ist aber langsam und "
"langweilig. Es wäre doch viel besser, wenn wir eine Art Teleporter hätten. "
"Dank Sonic Pi haben wir diesen. Probier dieses:"

#: A.06-minecraft.md:45
#, no-wrap
msgid "mc_teleport 80, 40, 100"
msgstr "mc_teleport 80, 40, 100"

#: A.06-minecraft.md:49
msgid ""
"Crikey! That was a long way up. If you weren't in flying-mode then you would h"
"ave fallen back down all the way to the ground. If you double-tap space to ent"
"er flying-mode and teleport again, you'll stay hovering at the location you za"
"p to."
msgstr ""
"Meine Güte! Das war ein langer Weg nach oben. Wenn du dich nicht im "
"Flugmodus befunden hättest, wärst du den ganzen Weg zurück auf den Boden "
"gefallen. Wenn du doppelt auf die Leertaste drückst, um in den Flugmodus zu "
"wechseln und dich wieder zu teleportieren, schwebst du weiterhin an der "
"Stelle, an die du dich teleportiert hast."

#: A.06-minecraft.md:54
msgid ""
"Now, what do those numbers mean? We have three numbers which describe the coor"
"dinates of where in the world we want to go. We give each number a name - x, y"
" and z:"
msgstr ""
"Aber was bedeuten diese Zahlen? Wir haben drei Zahlen, welche die "
"Koordinaten beschreiben, zu denen wir in der Welt gehen wollen. Jede der "
"Zahlen bekommt einen Namen - x, y und z:"

#: A.06-minecraft.md:58
msgid "x - how far left and right (80 in our example)"
msgstr "x - wie weit links und rechts (80 in unserem Beispiel)"

#: A.06-minecraft.md:59
msgid "y - how high we want to be (40 in our example)"
msgstr "y - wie hoch wir sein wollen (40 in unserem Beispiel)"

#: A.06-minecraft.md:60
msgid "z - how far forward and back (100 in our example)"
msgstr "z - wie weit vorwärts und rückwärts (100 in unserem Beispiel)"

#: A.06-minecraft.md:62
msgid ""
"By choosing different values for x, y and z we can teleport *anywhere* in our "
"world. Try it! Choose different numbers and see where you can end up. If the s"
"creen goes black it's because you've teleported yourself under the ground or i"
"nto a mountain. Just choose a higher y value to get back out above land. Keep "
"on exploring until you find somewhere you like..."
msgstr ""
"Indem wir unterschiedliche Werte für x, y und z wählen, können wir uns an "
"*jeden* Ort der Welt teleportieren. Probiere es aus! Wähle verschiedene "
"Zahlen aus und schaue, wo du landest. Falls der Bildschirm schwarz wird, "
"hast du dich in den Boden oder in einen Berg teleportiert. Wähle in diesem "
"Fall einen höheren y-Wert um wieder über den Boden zu kommen. Erkunde "
"weiter, bis du einen Platz findest, der dir gefällt..."

#: A.06-minecraft.md:69
msgid ""
"Using the ideas so far, let's build a Sonic Teleporter which makes a fun telep"
"ort sound whilst it whizzes us across the Minecraft world:"
msgstr ""

#: A.06-minecraft.md:72
#, no-wrap
msgid ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""
msgstr ""
"mc_message \"Preparing to teleport....\"\n"
"sample :ambi_lunar_land, rate: -1\n"
"sleep 1\n"
"mc_message \"3\"\n"
"sleep 1\n"
"mc_message \"2\"\n"
"sleep 1\n"
"mc_message \"1\"\n"
"sleep 1\n"
"mc_teleport 90, 20, 10\n"
"mc_message \"Whoooosh!\""

#: A.06-minecraft.md:86
msgid ""
"![Screen 1](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-1-small.png)"
msgstr ""
"![Bildschirm 1](../../../etc/doc/images/tutorial/articles/A.06-minecraft/"
"Musical-Minecraft-1-small.png)"

#: A.06-minecraft.md:88
msgid "Magic Blocks"
msgstr "Magische Blöcke"

#: A.06-minecraft.md:90
msgid ""
"Now you've found a nice spot, let's start building. You could do what you're u"
"sed to and start clicking the mouse furiously to place blocks under the cursor"
". Or you could use the magic of Sonic Pi. Try this:"
msgstr ""

#: A.06-minecraft.md:94
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :melon, x, y + 5, z"

#: A.06-minecraft.md:99
msgid ""
"Now look up! There's a melon in the sky! Take a moment to look at the code. Wh"
"at did we do? On line one we grabbed the current location of Steve as the vari"
"ables x, y and z. These correspond to our coordinates described above. We use "
"these coordinates in the fn `mc_set_block` which will place the block of your "
"choosing at the specified coordinates. In order to make something higher up in"
" the sky we just need to increase the y value which is why we add 5 to it. Let"
"'s make a long trail of them:"
msgstr ""

#: A.06-minecraft.md:107
#, no-wrap
msgid ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :melon_trail do\n"
"  x, y, z = mc_location\n"
"  mc_set_block :melon, x, y-1, z\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:115
msgid ""
"Now, jump over to Minecraft, make sure you're in flying-mode (double tap space"
" if not) and fly all around the world. Look behind you to see a pretty trail o"
"f melon blocks! See what kind of twisty patterns you can make in the sky."
msgstr ""

#: A.06-minecraft.md:120
msgid "Live Coding Minecraft"
msgstr ""

#: A.06-minecraft.md:122
msgid ""
"Those of you that have been following this tutorial over the last few months w"
"ill probably have your minds blown at this point. The trail of melons is prett"
"y cool, but the most exciting part of the previous example is that you can use"
" `live_loop` with Minecraft! For those that don't know, `live_loop` is Sonic P"
"i's special magic ability that no other programming language has. It lets you "
"run multiple loops at the same time and allows you to change them whilst they "
"run. They are incredibly powerful and amazing fun. I use `live_loop`s to perfo"
"rm music in nightclubs with Sonic Pi - DJs use discs and I use `live_loop`s :-"
") However, today we're going to live code both music and Minecraft."
msgstr ""

#: A.06-minecraft.md:133
msgid ""
"Let's get started. Run the code above and start making your melon trail again."
" Now, without stopping the code, just simply change `:melon` to `:brick` and h"
"it run. Hey presto, you're now making a brick trail. How simple was that! Fanc"
"y some music to go with it? Easy. Try this:"
msgstr ""

#: A.06-minecraft.md:138
#, no-wrap
msgid ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :bass_trail do\n"
"  tick\n"
"  x, y, z = mc_location\n"
"  b = (ring :melon, :brick, :glass).look\n"
"  mc_set_block b, x, y -1, z\n"
"  note = (ring :e1, :e2, :e3).look\n"
"  use_synth :tb303\n"
"  play note, release: 0.1, cutoff: 70\n"
"  sleep 0.125\n"
"end"

#: A.06-minecraft.md:151
msgid ""
"Now, whilst that's playing start changing the code. Change the block types - t"
"ry `:water`, `:grass` or your favourite block type. Also, try changing the cut"
"off value from `70` to `80` and then up to `100`. Isn't this fun?"
msgstr ""

#: A.06-minecraft.md:158
msgid ""
"![Screen 2](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-2-small.png)"
msgstr ""
"![Bildschirm 2](../../../etc/doc/images/tutorial/articles/A.06-minecraft/"
"Musical-Minecraft-2-small.png)"

#: A.06-minecraft.md:160
msgid ""
"Let's combine everything we've seen so far with a little extra magic. Let's co"
"mbine our teleportation ability with block placing and music to make a Minecra"
"ft Music Video. Don't worry if you don't understand it all, just type it in an"
"d have a play by changing some of the values whilst it's running live. Have fu"
"n and see you next time..."
msgstr ""

#: A.06-minecraft.md:166
#, no-wrap
msgid ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"
msgstr ""
"live_loop :note_blocks do\n"
"  mc_message \"This is Sonic Minecraft\"\n"
"  with_fx :reverb do\n"
"    with_fx :echo, phase: 0.125, reps: 32 do\n"
"      tick\n"
"      x = (range 30, 90, step: 0.1).look\n"
"      y = 20\n"
"      z = -10\n"
"      mc_teleport x, y, z\n"
"      ns = (scale :e3, :minor_pentatonic)\n"
"      n = ns.shuffle.choose\n"
"      bs = (knit :glass, 3, :sand, 1)\n"
"      b = bs.look\n"
"      synth :beep, note: n, release: 0.1\n"
"      mc_set_block b, x+20, n-60+y, z+10\n"
"      mc_set_block b, x+20, n-60+y, z-10\n"
"      sleep 0.25\n"
"    end\n"
"  end\n"
"end\n"
"live_loop :beats do\n"
"  sample :bd_haus, cutoff: 100\n"
"  sleep 0.5\n"
"end"

#: A.07-bizet.md:1
msgid "A.7 Bizet Beats"
msgstr ""

#: A.07-bizet.md:3
msgid "Bizet Beats"
msgstr ""

#: A.07-bizet.md:5
msgid ""
"After our brief excursion to the fantastic world of coding Minecraft with Soni"
"c Pi last month, let's get musical again. Today we're going to bring a classic"
"al operatic dance piece straight into the 21st century using the awesome power"
" of code."
msgstr ""

#: A.07-bizet.md:10
msgid "Outrageous and Disruptive"
msgstr "Skandalös und disruptiv"

#: A.07-bizet.md:12
msgid ""
"Let's jump into a time machine back to the year 1875. A composer called Bizet "
"had just finished his latest opera Carmen. Unfortunately like many exciting an"
"d disruptive new pieces of music people initially didn't like it at all becaus"
"e it was too outrageous and different. Sadly Bizet died ten years before the o"
"pera gained huge international success and became one of the most famous and f"
"requently performed operas of all time. In sympathy with this tragedy let's ta"
"ke one of the main themes from Carmen and convert it to a modern format of mus"
"ic that is also too outrageous and different for most people in our time - liv"
"e coded music!"
msgstr ""

#: A.07-bizet.md:23
msgid "Decoding the Habanera"
msgstr "Die Habanera dekodieren"

#: A.07-bizet.md:25
msgid ""
"Trying to live code the whole opera would be a bit of a challenge for this tut"
"orial, so let's focus on one of the most famous parts - the bass line to the H"
"abanera:"
msgstr ""
"Der Versuch die gesamte Oper in diesem Tutorial zu kodieren, wäre wohl zu "
"viel des Guten, daher werden wir uns auf einen der berühmtesten Teile "
"fokussieren - die Basslinie der Habanera:"

#: A.07-bizet.md:29
msgid ""
"![Habanera Riff](../../../etc/doc/images/tutorial/articles/A.07-bizet/habanera"
".png)"
msgstr ""
"![Habanera Riff](../../../etc/doc/images/tutorial/articles/A.07-bizet/"
"habanera.png)"

#: A.07-bizet.md:31
msgid ""
"This may look extremely unreadable to you if you haven't yet studied music not"
"ation. However, as programmers we see music notation as just another form of c"
"ode - only it represents instructions to a musician instead of a computer. We "
"therefore need to figure out a way of decoding it."
msgstr ""

#: A.07-bizet.md:36
msgid "Notes"
msgstr "Anmerkungen"

#: A.07-bizet.md:38
msgid ""
"The notes are arranged from left to right like the words in this magazine but "
"also have different heights. *The height on the score represents the pitch of "
"the note.* The higher the note on the score, the higher the pitch of the note."
msgstr ""

#: A.07-bizet.md:43
msgid ""
"In Sonic Pi we already know how to change the pitch of a note - we either use "
"high or low numbers such as `play 75` and `play 80` or we use the note names: "
"`play :E` and `play :F`. Luckily each of the vertical positions of the musical"
" score represents a specific note name. Take a look at this handy look up tabl"
"e:"
msgstr ""

#: A.07-bizet.md:49
msgid "![Notes](../../../etc/doc/images/tutorial/articles/A.07-bizet/notes.png)"
msgstr ""
"![Anmerkungen](../../../etc/doc/images/tutorial/articles/A.07-bizet/notes."
"png)"

#: A.07-bizet.md:51
msgid "Rests"
msgstr "Pausen"

#: A.07-bizet.md:53
msgid ""
"Music scores are an extremely rich and expressive kind of code capable of comm"
"unicating many things. It therefore shouldn't come as much of a surprise that "
"musical scores can not only tell you what notes to play but also when *not* to"
" play notes. In programming this is pretty much equivalent to the idea of `nil"
"` or `null` - the absence of a value. In other words not playing a note is lik"
"e the absence of a note."
msgstr ""

#: A.07-bizet.md:60
msgid ""
"If you look closely at the score you'll see that it's actually a combination o"
"f black dots with lines which represent notes to play and squiggly things whic"
"h represent the rests. Luckily Sonic Pi has a very handy representation for a "
"rest: `:r`, so if we run: `play :r` it actually plays silence! We could also w"
"rite `play :rest`, `play nil` or `play false` which are all equivalent ways of"
" representing rests."
msgstr ""

#: A.07-bizet.md:67
msgid "Rhythm"
msgstr "Rhythmus"

#: A.07-bizet.md:69
msgid ""
"Finally, there's one last thing to learn how to decode in the notation - the t"
"imings of the notes. In the original notation you'll see that the notes are co"
"nnected with thick lines called beams. The second note has two of these beams "
"which means it lasts for a 16th of a beat. The other notes have a single beam "
"which means they last for an 8th of a beat. The rest has two squiggly beams wh"
"ich means it also represents a 16th of the beat."
msgstr ""

#: A.07-bizet.md:77
msgid ""
"When we attempt to decode and explore new things a very handy trick is to make"
" everything as similar as possible to try and see any relationships or pattern"
"s. For example, when we re-write our notation purely in 16ths you can see that"
" our notation just turns into a nice sequence of notes and rests."
msgstr ""

#: A.07-bizet.md:83
msgid ""
"![Habanera Riff 2](../../../etc/doc/images/tutorial/articles/A.07-bizet/habane"
"ra2.png)"
msgstr ""

#: A.07-bizet.md:85
msgid "Re-coding the Habanera"
msgstr ""

#: A.07-bizet.md:87
msgid ""
"We're now in a position to start translating this bass line to Sonic Pi. Let's"
" encode these notes and rests in a ring:"
msgstr ""
"Wir sind jetzt in der Lage, um diese Basslinie für Sonic Pie zu übersetzen. La"
"ss uns diese Noten kodieren und gut sein lassen:"

#: A.07-bizet.md:90
#, no-wrap
msgid "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"
msgstr "(ring :d, :r, :r, :a, :f5, :r, :a, :r)"

#: A.07-bizet.md:94
msgid "Let's see what this sounds like. Throw it in a live loop and tick through it:"
msgstr ""
"Lass uns schauen, wie es sich anhört. Stelle es in einen Live-Loop und ticke d"
"urch:"

#: A.07-bizet.md:97
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end"

#: A.07-bizet.md:104
msgid ""
"Fabulous, that instantly recognisable riff springs to life through your speake"
"rs. It took a lot of effort to get here, but it was worth it - high five!"
msgstr ""

#: A.07-bizet.md:108
msgid "Moody Synths"
msgstr "Stimmungssynthesizer"

#: A.07-bizet.md:110
msgid ""
"Now we have the bass line, let's re-create some of the ambience of the operati"
"c scene. One synth to try out is `:blade` which is a moody 80s style synth lea"
"d. Let's try it with the starting note `:d` passed through a slicer and reverb"
":"
msgstr ""

#: A.07-bizet.md:115
#, no-wrap
msgid ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"
msgstr ""
"live_loop :habanera do\n"
"  use_synth :fm\n"
"  use_transpose -12\n"
"  play (ring :d, :r, :r, :a, :f5, :r, :a, :r).tick\n"
"  sleep 0.25\n"
"end\n"
"with_fx :reverb do\n"
"  live_loop :space_light do\n"
"    with_fx :slicer, phase: 0.25 do\n"
"      synth :blade, note: :d, release: 8, cutoff: 100, amp: 2\n"
"    end\n"
"    sleep 8\n"
"  end\n"
"end"

#: A.07-bizet.md:133
msgid ""
"Now, try the other notes in the bass line: `:a` and `:f5`. Remember, you don't"
" need to hit stop, just modify the code whilst the music is playing and hit ru"
"n again. Also, try different values for the slicer's `phase:` opt such as `0.5"
"`, `0.75` and `1`."
msgstr ""

#: A.07-bizet.md:140
msgid ""
"Finally, let's combine all the ideas so far into a new remix of the Habanera. "
"You might notice that I've included another part of the bass line as a comment"
". Once you've typed it all into a fresh buffer hit Run to hear the composition"
". Now, without hitting stop, *uncomment* the second line by removing the `#` a"
"nd hit run again - how marvellous is that! Now, start mashing it around yourse"
"lf and have fun."
msgstr ""
"Zum Schluss lass uns alle bisherigen Ideen in einen neuen Remix von Habanera k"
"ombinieren. Du wirst feststellen, dass ich einen weiteren Teil der Basslinie a"
"ls Kommentar hinzugefügt habe. Wenn Du alles in einen neuen Puffer eingegeben "
"hast, drücke *Run*, um Dir die Komposition anzuhören. Und jetzt, ohne auf Stop"
"p zu drücken, entkommentiere die zweite Zeile, indem Du das `#`-Zeichen entfer"
"nst, und drücke dann noch einmal *Run* – wie fantastisch das ist! Jetzt misch "
"alles wie es Dir gefällt – viel Spaß."

#: A.07-bizet.md:147
#, no-wrap
msgid ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_debug false\n"
"bizet_bass = (ring :d, :r, :r, :a, :f5, :r, :a, :r)\n"
"#bizet_bass = (ring :d, :r, :r, :Bb, :g5, :r, :Bb, :r)\n"
" \n"
"with_fx :reverb, room: 1, mix: 0.3 do\n"
"  live_loop :bizet do\n"
"    with_fx :slicer, phase: 0.125 do\n"
"      synth :blade, note: :d4, release: 8,\n"
"        cutoff: 100, amp: 1.5\n"
"    end\n"
"    16.times do\n"
"      tick\n"
"      play bizet_bass.look, release: 0.1\n"
"      play bizet_bass.look - 12, release: 0.3\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end\n"
" \n"
"live_loop :ind do\n"
"  sample :loop_industrial, beat_stretch: 1,\n"
"    cutoff: 100, rate: 1\n"
"  sleep 1\n"
"end\n"
" \n"
"live_loop :drums do\n"
"  sample :bd_haus, cutoff: 110\n"
"  synth :beep, note: 49, attack: 0,\n"
"    release: 0.1\n"
"  sleep 0.5\n"
"end"

#: A.08-minecraft-vj.md:1
msgid "A.8 Become a Minecraft VJ"
msgstr "A.8 Werde ein Minecraft VJ"

#: A.08-minecraft-vj.md:3
msgid "Become a Minecraft VJ"
msgstr "Werde ein Minecraft VJ"

#: A.08-minecraft-vj.md:5
#, fuzzy
msgid ""
"![Screen 0](../../../etc/doc/images/tutorial/articles/A.08-minecraft-vj/minecr"
"aft-vj-0-small.png)"
msgstr ""
"![Screen 0](../../../etc/doc/images/tutorial/articles/A.06-minecraft/Musical-M"
"inecraft-0-small.png)"

#: A.08-minecraft-vj.md:7
msgid ""
"Everyone has played Minecraft. You will all have built amazing structures, des"
"igned cunning traps and even created elaborate cart lines controlled by redsto"
"ne switches. How many of you have performed with Minecraft? We bet you didn't "
"know that you could use Minecraft to create amazing visuals just like a profes"
"sional VJ."
msgstr ""

#: A.08-minecraft-vj.md:13
msgid ""
"If your only way of modifying Minecraft was with the mouse, you'd have a tough"
" time changing things fast enough. Luckily for you your Raspberry Pi comes wit"
"h a version of Minecraft that can be controlled with code. It also comes with "
"an app called Sonic Pi which makes coding Minecraft not only easy but also inc"
"redibly fun."
msgstr ""

#: A.08-minecraft-vj.md:19
msgid ""
"In today's article we'll be showing you some of the tips and tricks that we've"
" used to create performances in night clubs and music venues around the world."
msgstr ""

#: A.08-minecraft-vj.md:23
msgid "Let's get started..."
msgstr "Lass uns anfangen …"

#: A.08-minecraft-vj.md:25
msgid "Getting Started"
msgstr "Erste Schritte"

#: A.08-minecraft-vj.md:27
msgid ""
"Let's start with a simple warm up exercise to refresh ourselves with the basic"
"s. First up, crack open your Raspberry Pi and then fire up both Minecraft and "
"Sonic Pi. In Minecraft, create a new world, and in Sonic Pi choose a fresh buf"
"fer and write in this code:"
msgstr ""
"Um unsere Grundlagen aufzufrischen, lass uns mit einer einfachen Übung zum Auf"
"wärmen anfangen. Öffne zunächst Deinen Raspberry Pi, dann starte Minecraft und"
" Sonic Pi. Erstelle eine neue Welt in Minecraft, und in Sonic Pi wählst Du ein"
"en neuen Puffer, dann schreibe diesen Code:"

#: A.08-minecraft-vj.md:32
#, no-wrap
msgid "mc_message \"Let's get started...\""
msgstr "mc_message \"Let's get started...\""

#: A.08-minecraft-vj.md:36
msgid ""
"Hit the Run button and you'll see the message over in the Minecraft window. OK"
", we're ready to start, let's have some fun......"
msgstr ""
"Klicke den Run-Button und Du wirst die Meldung im Minecraft-Fenster sehen. Ok,"
" wir können nun loslegen, lass uns Spaß haben …"

#: A.08-minecraft-vj.md:39
msgid "Sand Storms"
msgstr "Sandstürme"

#: A.08-minecraft-vj.md:41
msgid ""
"When we're using Minecraft to create visuals we try and think about what will "
"both look interesting and also be easy to generate from code. One nice trick i"
"s to create a sand storm by dropping sand blocks from the sky. For that all we"
" need are a few basic fns:"
msgstr ""

#: A.08-minecraft-vj.md:46
msgid "`sleep` - for inserting a delay between actions"
msgstr "`sleep` - um eine Verzögerung zwischen Aktionen einzufügen"

#: A.08-minecraft-vj.md:47
msgid "`mc_location` - to find our current location"
msgstr "`mc_location` - um unsere aktuelle Position zu finden"

#: A.08-minecraft-vj.md:48
msgid "`mc_set_block`- to place sand blocks at a specific location"
msgstr ""

#: A.08-minecraft-vj.md:49
msgid "`rrand` - to allow us to generate random values within a range"
msgstr "`rrand` - damit wir Zufallswerte innerhalb eines Bereichs erzeugen können"

#: A.08-minecraft-vj.md:50
msgid "`live_loop` - to allow us to continually make it rain sand"
msgstr ""

#: A.08-minecraft-vj.md:52
msgid ""
"If you're unfamiliar with any of the built-in fns such as `rrand`, just type t"
"he word into your buffer, click on it and then hit the keyboard combo `Control"
"-i` to bring up the built-in documentation. Alternatively you can navigate to "
"the *lang* tab in the Help system and then look up the fns directly along with"
" all the other exciting things you can do."
msgstr ""

#: A.08-minecraft-vj.md:58
msgid ""
"Let's make it rain a little first before unleashing the full power of the stor"
"m. Grab your current location and use it to create a few sand blocks up in the"
" sky nearby:"
msgstr ""
"Lass es uns etwas regnen lassen bevor wir die ganze Kraft des Sturms "
"enthüllen. Versuche mit dem Wissen das du hast ein paar Sandblöke im Himmel "
"zu erschaffen:"

#: A.08-minecraft-vj.md:62
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"
msgstr ""
"x, y, z = mc_location\n"
"mc_set_block :sand, x, y + 20, z + 5\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 6\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 7\n"
"sleep 2\n"
"mc_set_block :sand, x, y + 20, z + 8"

#: A.08-minecraft-vj.md:73
msgid ""
"When you hit Run, you might have to look around a little as the blocks may sta"
"rt falling down behind you depending on which direction you're currently facin"
"g. Don't worry, if you missed them just hit Run again for another batch of san"
"d rain - just make sure you're looking the right way!"
msgstr ""

#: A.08-minecraft-vj.md:79
msgid ""
"Let's quickly review what's going on here. On the first line we grabbed Steve'"
"s location as coordinates with the fn `mc_location` and placed them into the v"
"ars `x`, `y`, and `z`. Then on the next lines we used the `mc_set_block` fn to"
" place some sand at the same coordinates as Steve but with some modifications."
" We chose the same x coordinate, a y coordinate 20 blocks higher and then succ"
"essively larger z coordinates so the sand dropped in a line away from Steve."
msgstr ""

#: A.08-minecraft-vj.md:87
msgid ""
"Why don't you take that code and start playing around with it yourself? Try ad"
"ding more lines, changing the sleep times, try mixing `:sand` with `:gravel` a"
"nd choose different coordinates. Just experiment and have fun!"
msgstr ""

#: A.08-minecraft-vj.md:91
msgid "Live Loops Unleashed"
msgstr ""

#: A.08-minecraft-vj.md:93
msgid ""
"OK, it's time to get the storm raging by unleashing the full power of the `liv"
"e_loop` - Sonic Pi's magical ability which unleashes the full power of live co"
"ding - changing code on-the-fly whilst it's running!"
msgstr ""

#: A.08-minecraft-vj.md:97
#, no-wrap
msgid ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :sand_storm do\n"
"  x, y, z = mc_location\n"
"  xd = rrand(-10, 10)\n"
"  zd = rrand(-10, 10)\n"
"  co = rrand(70, 130)\n"
"  synth :cnoise, attack: 0, release: 0.125, cutoff: co\n"
"  mc_set_block :sand, x + xd, y+20, z+zd\n"
"  sleep 0.125\n"
"end"

#: A.08-minecraft-vj.md:109
msgid ""
"What fun! We're looping round pretty quickly (8 times a second) and during eac"
"h loop we're finding Steve's location like before but then generating 3 random"
" values:"
msgstr ""

#: A.08-minecraft-vj.md:113
msgid "`xd` - the difference for x which will be between -10 and 10"
msgstr "`xd` - Die Abweichung für x. Sie muss zwischen -10 und 10 liegen"

#: A.08-minecraft-vj.md:114
msgid "`zd` - the difference for z also between -10 and 10"
msgstr "`zd` - Die Abweichung für z, auch zwischen -10 und 10"

#: A.08-minecraft-vj.md:115
msgid "`co` - a cutoff value for the low pass filter between 70 and 130"
msgstr "`co` - ein Cut-Off-Wert für den Tiefpassfilter zwischen 70 und 130"

#: A.08-minecraft-vj.md:117
msgid ""
"We then use those random values in the fns `synth` and `mc_set_block` giving u"
"s sand falling in random locations around Steve along with a percussive rain-l"
"ike sound from the `:cnoise` synth."
msgstr ""

#: A.08-minecraft-vj.md:121
msgid ""
"For those of you new to live loops - this is where the fun really starts with "
"Sonic Pi. Whilst the code is running and the sand is pouring down, try changin"
"g one of the values, perhaps the sleep time to `0.25` or the `:sand` block typ"
"e to `:gravel`. Now hit run *again*. Hey Presto! Things changed without the co"
"de stopping. This is your gateway to performing like a real VJ. Keep practisin"
"g and changing things around. How different can you make the visuals without s"
"topping the code?"
msgstr ""

#: A.08-minecraft-vj.md:129
msgid "Epic Block Patterns"
msgstr "Epische Blockmuster"

#: A.08-minecraft-vj.md:131
msgid ""
"![Screensman 1](../../../etc/doc/images/tutorial/articles/A.08-minecraft-vj/mi"
"necraft-vj-1-small.png)"
msgstr ""

#: A.08-minecraft-vj.md:133
msgid ""
"Finally, another great way of generating interesting visuals is to generate hu"
"ge patterned walls to fly towards and close by. For this effect we'll need to "
"move from placing the blocks randomly to placing them in an ordered manner. We"
" can do this by nesting two sets of iteration (hit the Help button and navigat"
"e to section 5.2 of the tutorial \"Iteration and Loops\" for more background on "
"iteration). The funny `|xd|` after the do means that `xd` will be set for each"
" value of the iteration. So the first time it will be 0, then 1, then 2... etc"
". By nesting two lots of iteration together like this we can generate all the "
"coordinates for a square. We can then randomly choose block types from a ring "
"of blocks for an interesting effect:"
msgstr ""

#: A.08-minecraft-vj.md:145
#, no-wrap
msgid ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"
msgstr ""
"x, y, z = mc_location\n"
"bs = (ring :gold, :diamond, :glass)\n"
"10.times do |xd|\n"
"  10.times do |yd|\n"
"    mc_set_block bs.choose, x + xd, y + yd, z\n"
"  end\n"
"end"

#: A.08-minecraft-vj.md:155
msgid ""
"Pretty neat. Whilst we're having fun here, try changing `bs.choose` to `bs.tic"
"k` to move from a random pattern to a more regular one. Try changing the block"
" types and the more adventurous of you might want to try sticking this within "
"a `live_loop` so that the patterns keep changing automatically."
msgstr ""

#: A.08-minecraft-vj.md:161
msgid ""
"Now, for the VJ finale - change the two `10.times` to `100.times` and hit Run."
" Kaboom! A Huge gigantic wall of randomly placed bricks. Imagine how long it w"
"ould take you to build that manually with your mouse! Double-tap space to ente"
"r fly-mode and start swooping by for some great visual effects. Don't stop her"
"e though - use your imagination to conjure up some cool ideas and then use the"
" coding power of Sonic Pi to make it real. When you've practised enough dim th"
"e lights and put on a VJ show for your friends!"
msgstr ""

#: A.09-randomisation.md:1
msgid "A.9 Randomisation"
msgstr "A.9 Zufälligkeit"

#: A.09-randomisation.md:3
msgid "Surfing Random Streams"
msgstr ""

#: A.09-randomisation.md:5
msgid ""
"Back in episode 4 of this tutorial series we took a brief look at randomisatio"
"n whilst coding up some sizzling synth riffs. Given that randomisation is such"
" an important part of my live coding DJ sets I thought it would be useful to c"
"over the fundamentals in much greater detail. So, get your lucky hat on and le"
"t's surf some random streams!"
msgstr ""

#: A.09-randomisation.md:11
msgid "There is no random"
msgstr "Es gibt keinen Zufall"

#: A.09-randomisation.md:13
msgid ""
"The first thing to learn which might really surprise you when playing with Son"
"ic Pi's randomisation functions is that they're not actually really random. Wh"
"at does this actually mean? Well, let's try a couple of tests. First, imagine "
"a number in your head between 0 and 1. Keep it there and don't tell me. Now le"
"t me guess... was it `0.321567`? No? Bah, I'm clearly no good at this. Let me "
"have another go, but let's ask Sonic Pi to choose a number this time. Fire up "
"Sonic Pi v2.7+ and ask it for a random number but again don't tell me:"
msgstr ""

#: A.09-randomisation.md:22
#, no-wrap
msgid "print rand"
msgstr "print rand"

#: A.09-randomisation.md:26
msgid ""
"Now for the reveal... was it `0.75006103515625`? Yes! Ha, I can see you're a l"
"ittle sceptical. Perhaps it was just a lucky guess. Let's try again. Press the"
" Run button again and see what we get... What? `0.75006103515625` again? This "
"clearly can't be random! You're right, it's not."
msgstr ""

#: A.09-randomisation.md:32
msgid ""
"What's going on here? The fancy computer science word here is determinism. Thi"
"s just means that nothing is by chance and everything is destined to be. Your "
"version of Sonic Pi is destined to always return `0.75006103515625` in the pro"
"gram above. This might sound pretty useless, but let me assure you that it's o"
"ne of the most powerful parts of Sonic Pi. If you stick at it you'll learn how"
" to rely on the deterministic nature of Sonic Pi's randomisation as a fundamen"
"tal building block for your compositions and live coded DJ sets."
msgstr ""

#: A.09-randomisation.md:41
msgid "A Random Melody"
msgstr "Eine zufällige Melodie"

#: A.09-randomisation.md:43
msgid ""
"When Sonic Pi boots it actually loads into memory a sequence of 441,000 pre-ge"
"nerated random values. When you call a random function such as `rand` or `rran"
"d`, this random stream is used to generate your result. Each call to a random "
"function consumes a value from this stream. Therefore the 10th call to a rando"
"m function will use the 10th value from the stream. Also, every time you press"
" the Run button, the stream is reset for that run. This is why I could predict"
" the result to `rand` and why the 'random' melody was the same every time. Eve"
"rybody's version of Sonic Pi uses the exact same random stream which is very i"
"mportant when we start sharing our pieces with each other."
msgstr ""

#: A.09-randomisation.md:54
msgid "Let's use this knowledge to generate a repeatable random melody:"
msgstr ""

#: A.09-randomisation.md:56
#, no-wrap
msgid ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"
msgstr ""
"8.times do\n"
" play rrand_i(50, 95)\n"
" sleep 0.125\n"
"end"

#: A.09-randomisation.md:63
msgid ""
"Type this into a spare buffer and hit Run. You'll hear a melody consisting of "
"'random' notes between 50 and 95. When it's finished, hit Run again to hear ex"
"actly the same melody again."
msgstr ""
"Tippe dies in einen freien Puffer und drücke *Run*. Du wirst eine Melodie höre"
"n, die aus zufälligen Noten zwischen 50 und 95 besteht. Wenn sie beendet ist, "
"drücke *Run* noch einmal, um Dir exakt die gleiche Melodie erneut anzuhören."

#: A.09-randomisation.md:67
msgid "Handy Randomisation Functions"
msgstr "Praktische Zufälligkeitsfunktionen"

#: A.09-randomisation.md:69
msgid ""
"Sonic Pi comes with a number of useful functions for working with the random s"
"tream. Here's a list of some of the most useful:"
msgstr ""

#: A.09-randomisation.md:72
msgid "`rand` - Simply returns the next value in the random stream"
msgstr "`rand` - Gibt einfach den nächsten Wert des Zufallsparameter zurück"

#: A.09-randomisation.md:73
msgid "`rrand` - Returns a random value within a range"
msgstr "`rrand` - Gibt einen Zufallswert innerhalb eines Bereichs zurück"

#: A.09-randomisation.md:74
msgid "`rrand_i` - Returns a random whole number within a range"
msgstr "`rrand_i` - Gibt eine zufällige ganze Zahl innerhalb eines Bereichs zurück"

#: A.09-randomisation.md:75
msgid "`one_in` - Returns true or false with the given probability"
msgstr "`one_in` - Gibt wahr oder falsch mit der angegebenen Wahrscheinlichkeit zurück"

#: A.09-randomisation.md:76
msgid "`dice` - Imitates rolling a dice and returns a value between 1 and 6"
msgstr ""
"`dice` - Imitiert den Wurf eines Würfels und gibt einen Wert zwischen 1 und 6 "
"zurück"

#: A.09-randomisation.md:77
msgid "`choose` - Chooses a random value from a list"
msgstr "`choose` - Wählt einen zufälligen Wert aus einer Liste aus"

#: A.09-randomisation.md:79
msgid ""
"Check out their documentation in the Help system for detailed information and "
"examples."
msgstr ""

#: A.09-randomisation.md:82
msgid "Resetting the Stream"
msgstr ""

#: A.09-randomisation.md:84
msgid ""
"Whilst the ability to repeat a sequence of chosen notes is essential to allow "
"you to replay a riff on the dance floor, it might not be exactly the riff you "
"want. Wouldn't it be great if we could try a number of different riffs and cho"
"ose the one we liked best? This is where the real magic starts."
msgstr ""

#: A.09-randomisation.md:90
msgid ""
"We can manually set the stream with the fn `use_random_seed`. In Computer Scie"
"nce, a random seed is the starting point from which a new stream of random val"
"ues can sprout out and blossom. Let's try it:"
msgstr ""

#: A.09-randomisation.md:94
#, no-wrap
msgid ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 0\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:102
msgid ""
"Great, we get the first three notes of our random melody above: `84`, `83` and"
" `71`. However, we can now change the seed to something else. How about this:"
msgstr ""

#: A.09-randomisation.md:106
#, no-wrap
msgid ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"use_random_seed 1\n"
"3.times do\n"
"  play rrand_i(50, 95)\n"
"  sleep 0.125\n"
"end"

#: A.09-randomisation.md:114
msgid ""
"Interesting, we get `83`, `71` and `61` . You might notice that the first two "
"numbers here are the same as the last two numbers before - this isn't a coinci"
"dence."
msgstr ""

#: A.09-randomisation.md:118
msgid ""
"Remember that the random stream is just a giant list of 'pre-rolled' values. U"
"sing a random seed simply jumps us to a point in that list. Another way of thi"
"nking about it is to imagine a huge deck of pre-shuffled cards. Using a random"
" seed is cutting the deck at a particular point. The fabulous part of this is "
"that it's precisely this ability to jump around the random stream which gives "
"us huge power when making music."
msgstr ""

#: A.09-randomisation.md:126
msgid ""
"Let's revisit our random melody of 8 notes with this new stream resetting powe"
"r, but let's also throw in a live loop so we can experiment live whilst it's p"
"laying:"
msgstr ""

#: A.09-randomisation.md:130
#, no-wrap
msgid ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do    \n"
"  use_random_seed 0\n"
"  8.times do\n"
"    play rrand_i(50, 95), release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.09-randomisation.md:140
msgid ""
"Now, whilst it's still playing, change the seed value from `0` to something el"
"se. Try `100`, what about `999`. Try your own values, experiment and play arou"
"nd - see which seed generates the riff you like best."
msgstr ""

#: A.09-randomisation.md:147
msgid ""
"This month's tutorial has been quite a technical dive into the workings of Son"
"ic Pi's randomisation functionality. Hopefully it has given you some insight i"
"nto how it works and how you can start using randomisation in a reliable way t"
"o create repeatable patterns within your music. It's important to stress that "
"you can use repeatable randomisation *anywhere* you want. For example, you can"
" randomise the amplitude of notes, the timing of the rhythm, the amount of rev"
"erb, the current synth, the mix of an FX, etc. etc. In the future we'll take a"
" close look at some of these applications, but for now let me leave you with a"
" short example."
msgstr ""

#: A.09-randomisation.md:157
msgid ""
"Type the following into a spare buffer, hit Run, and then start changing the s"
"eeds around, hit Run again (whilst it's still playing) and explore the differe"
"nt sounds, rhythms and melodies you can make. When you find a nice one, rememb"
"er the seed number so you can get back to it. Finally, when you've found a few"
" seeds you like, put on a live coded performance for your friends by simply sw"
"itching between your favourite seeds to create a full piece."
msgstr ""

#: A.09-randomisation.md:165
#, no-wrap
msgid ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :random_riff do\n"
"  use_random_seed 10300\n"
"  use_synth :prophet\n"
"  s = [0.125, 0.25, 0.5].choose\n"
"  8.times do\n"
"    r = [0.125, 0.25, 1, 2].choose\n"
"    n = (scale :e3, :minor).choose\n"
"    co = rrand(30, 100)\n"
"    play n, release: r, cutoff: co\n"
"    sleep s\n"
"  end\n"
"end\n"
"live_loop :drums do\n"
"  use_random_seed 2001\n"
"  16.times do\n"
"    r = rrand(0.5, 10)\n"
"    sample :drum_bass_hard, rate: r, amp: rand\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.10-controlling-your-sound.md:1
msgid "A.10 Control"
msgstr "A.10 Steuerung"

#: A.10-controlling-your-sound.md:3
msgid "Controlling Your Sound"
msgstr ""

#: A.10-controlling-your-sound.md:5
msgid ""
"So far during this series we've focussed on triggering sounds. We've discovere"
"d that we can trigger the many synths built into Sonic Pi with `play` or `synt"
"h` and how to trigger pre-recorded samples with `sample`. We've also looked at"
" how we can wrap these triggered sounds within studio FX such as reverb and di"
"stortion using the `with_fx` command. Combine this with Sonic Pi's incredibly "
"accurate timing system and you can produce a vast array of sounds, beats and r"
"iffs. However, once you've carefully selected a particular sound's options and"
" triggered it, there's no ability to mess with it whilst it's playing right? W"
"rong! Today you're going to learn something very powerful - how to control run"
"ning synths."
msgstr ""

#: A.10-controlling-your-sound.md:17
msgid "A Basic Sound"
msgstr "Ein Grundton"

#: A.10-controlling-your-sound.md:19
msgid ""
"Let's create a nice simple sound. Fire up Sonic Pi and in a fresh buffer type "
"the following:"
msgstr ""
"Lass uns einen schönen einfachen Sound erzeugen. Starte Sonic Pi und gib in ei"
"nen neuen Puffer Folgendes ein:"

#: A.10-controlling-your-sound.md:22
#, no-wrap
msgid "synth :prophet, note: :e1, release: 8, cutoff: 100"
msgstr "synth :prophet, note: :e1, release: 8, cutoff: 100"

#: A.10-controlling-your-sound.md:26
msgid ""
"Now press the Run button at the top left to hear a lovely rumbling synth sound"
". Go ahead, press it again a few times to get a feel for it. OK, done? Let's s"
"tart controlling it!"
msgstr ""

#: A.10-controlling-your-sound.md:30
msgid "Synth Nodes"
msgstr ""

#: A.10-controlling-your-sound.md:32
msgid ""
"A little known feature in Sonic Pi is that the fns `play`, `synth` and `sample"
"`, return something called a `SynthNode` which represents a running sound. You"
" can capture one of these `SynthNode`s using a standard variable and then **co"
"ntrol** it at a later point in time. For example, let's change the value of th"
"e `cutoff:` opt after 1 beat:"
msgstr ""

#: A.10-controlling-your-sound.md:38
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:44
msgid "Let's look at each line in turn:"
msgstr ""

#: A.10-controlling-your-sound.md:46
msgid ""
"Firstly we trigger the `:prophet` synth using the `synth` fn as normal. Howeve"
"r we also capture the result in a variable called `sn`. We could have called t"
"his variable something completely different such as `synth_node` or `jane` - t"
"he name doesn't matter. However, it's important to choose a name that's meanin"
"gful to you for your performances and for people reading your code. I chose `s"
"n` as it's a nice short mnemonic for synth node."
msgstr ""

#: A.10-controlling-your-sound.md:54
msgid ""
"On line 2 we have a standard `sleep` command. This does nothing special - it j"
"ust asks the computer to wait for 1 beat before moving onto the next line."
msgstr ""

#: A.10-controlling-your-sound.md:58
msgid ""
"Line 3 is where the control fun starts. Here, we use the `control` fn to tell "
"our running `SynthNode` to change the cutoff value to `130`. If you hit the **"
"Run** button, you'll hear the `:prophet` synth start playing as before, but af"
"ter 1 beat it will shift to sound a lot brighter."
msgstr ""

#: A.10-controlling-your-sound.md:63
msgid "Modulatable Options"
msgstr "Modulierbare Optionen"

#: A.10-controlling-your-sound.md:65
msgid ""
"Most of Sonic Pi's synths and FX opts may be changed after being triggered. Ho"
"wever, this isn't the case for all of them. For example, the envelope opts `at"
"tack:`, `decay:`, `sustain:` and `release:` can only be set when triggering th"
"e synth. Figuring out which opts can and can't be changed is simple - just hea"
"d to the documentation for a given synth or FX and then scroll down to the ind"
"ividual option documentation and look for the phrases \"May be changed whilst p"
"laying\" or \"Can not be changed once set\". For example, the documentation for t"
"he `:beep` synth's `attack:` opt makes it clear that it's not possible to chan"
"ge it:"
msgstr ""

#: A.10-controlling-your-sound.md:76
msgid "Default: 0"
msgstr "Standard: 0"

#: A.10-controlling-your-sound.md:77
msgid "Must be zero or greater"
msgstr "Muss null oder größer sein"

#: A.10-controlling-your-sound.md:78
msgid "Can not be changed once set"
msgstr "Kann nicht mehr geändert werden, wenn einmal festgelegt"

#: A.10-controlling-your-sound.md:79
msgid "Scaled with current BPM value"
msgstr "Mit dem aktuellen BPM-Wert skaliert"

#: A.10-controlling-your-sound.md:81
msgid "Multiple Changes"
msgstr "Mehrere Änderungen"

#: A.10-controlling-your-sound.md:83
msgid ""
"Whilst a synth is running you're not limited to changing it only once - you're"
" free to change it as many times as you like. For example, we can turn our `:p"
"rophet` into a mini arpeggiator with the following:"
msgstr ""

#: A.10-controlling-your-sound.md:87
#, no-wrap
msgid ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (scale :e3, :minor_pentatonic)\n"
"sn = synth :prophet, note: :e1, release: 8, cutoff: 100\n"
"sleep 1\n"
"16.times do\n"
"  control sn, note: notes.tick\n"
"  sleep 0.125\n"
"end"

#: A.10-controlling-your-sound.md:97
msgid ""
"In this snippet of code we just added a couple of extra things. First we defin"
"ed a new variable called `notes` which contains the notes we'd like to cycle t"
"hrough (an arpeggiator is just a fancy name for something that cycles through "
"a list of notes in order). Secondly we replaced our single call to `control` w"
"ith an iteration calling it 16 times. In each call to `control` we `.tick` thr"
"ough our ring of `notes` which will automatically repeat once we get to the en"
"d (thanks to the fabulous power of Sonic Pi's rings). For a bit of variety try"
" replacing `.tick` with `.choose` and see if you can hear the difference."
msgstr ""

#: A.10-controlling-your-sound.md:107
msgid ""
"Note that we can change multiple opts simultaneously. Try changing the control"
" line to the following and listen for the difference:"
msgstr ""

#: A.10-controlling-your-sound.md:110
#, no-wrap
msgid "control sn, note: notes.tick, cutoff: rrand(70, 130)"
msgstr "control sn, note: notes.tick, cutoff: rrand(70, 130)"

#: A.10-controlling-your-sound.md:114
msgid "Sliding"
msgstr ""

#: A.10-controlling-your-sound.md:116
msgid ""
"When we control a `SynthNode`, it responds exactly on time and instantly chang"
"es the value of the opt to the new one as if you'd pressed a button or flicked"
" a switch requesting the change. This can sound rhythmical and percussive - es"
"pecially if the opt controls an aspect of the timbre such as `cutoff:`. Howeve"
"r, sometimes you don't want the change to happen instantaneously. Instead, you"
" might want to smoothly move from the current value to the new one as if you'd"
" moved a slider or dial. Of course, Sonic Pi can also do this too using the `_"
"slide:` opts."
msgstr ""

#: A.10-controlling-your-sound.md:125
msgid ""
"Each opt that can be modified also has a special corresponding `_slide:` opt t"
"hat allows you to specify a slide time. For example, `amp:` has `amp_slide:` a"
"nd `cutoff:` has `cutoff_slide:`. These slide opts work slightly differently t"
"han all the other opts in that they tell the synth note how to behave **next t"
"ime they are controlled**. Let's take a look:"
msgstr ""

#: A.10-controlling-your-sound.md:131
#, no-wrap
msgid ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"
msgstr ""
"sn = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 2\n"
"sleep 1\n"
"control sn, cutoff: 130"

#: A.10-controlling-your-sound.md:137
msgid ""
"Notice how this example is exactly the same as before except with the addition"
" of `cutoff_slide:`. This is saying that next time this synth has its `cutoff:"
"` opt controlled, it will take 2 beats to slide from the current value to the "
"new one. Therefore, when we use `control` you can hear the cutoff slide from 7"
"0 to 130. It creates an interesting dynamic feel to the sound. Now, try changi"
"ng the `cutoff_slide:` time to a shorter value such as 0.5 or a longer value s"
"uch as 4 to see how it changes the sound. Remember, you can slide any of the m"
"odifiable opts in exactly this way and each `_slide:` value can be totally dif"
"ferent so you can have the cutoff sliding slowly, the amp sliding fast and the"
" pan sliding somewhere in between if that's what you're looking to create..."
msgstr ""

#: A.10-controlling-your-sound.md:151
msgid ""
"Let's look at a short example which demonstrates the power of controlling synt"
"hs after they've been triggered. Notice that you can also slide FX just like s"
"ynths although with a slightly different syntax. Check out section 7.2 of the "
"built-in tutorial for more information on controlling FX."
msgstr ""

#: A.10-controlling-your-sound.md:157
msgid ""
"Copy the code into a spare buffer and take a listen. Don't stop there though -"
" play around with the code. Change the slide times, change the notes, the synt"
"h, the FX and the sleep times and see if you can turn it into something comple"
"tely different!"
msgstr ""
"Kopiere den Code in einen freien Puffer und höre zu. Hör an dieser Stelle nich"
"t auf – spiel mit dem Code herum. Ändere die Wechselzeiten, ändere die Noten, "
"den Synth, die FX und die Pausenzeiten, und probier, etwas ganz Anderes daraus"
" zu machen!"

#: A.10-controlling-your-sound.md:162
#, no-wrap
msgid ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"live_loop :moon_rise do\n"
"  with_fx :echo, mix: 0, mix_slide: 8 do |fx|\n"
"    control fx, mix: 1\n"
"    notes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n"
"    sn = synth :prophet , sustain: 8, note: :e1, cutoff: 70, cutoff_slide: 8\n"
"    control sn, cutoff: 130\n"
"    sleep 2\n"
"    32.times do\n"
"      control sn, note: notes.tick, pan: rrand(-1, 1)\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.11-beat-tracking.md:1
msgid "A.11 Tick Tock"
msgstr ""

#: A.11-beat-tracking.md:3
msgid "Tracking the Beat"
msgstr ""

#: A.11-beat-tracking.md:5
msgid ""
"Last month in this series we took a deep technical dive into the randomisation"
" system underpinning Sonic Pi. We explored how we can use it to deterministica"
"lly add new levels of dynamic control over our code. This month we're going to"
" continue our technical dive and turn our attention to Sonic Pi's unique tick "
"system. By the end of this article you'll be ticking your way through rhythms "
"and riffs on your way to being a live coding DJ."
msgstr ""

#: A.11-beat-tracking.md:13
msgid "Beat Counting"
msgstr ""

#: A.11-beat-tracking.md:15
msgid ""
"When making music we often want to do a different thing depending on which bea"
"t it is. Sonic Pi has a special beat counting system called `tick` to give you"
" precise control over when a beat actually occurs and even supports multiple b"
"eats with their own tempos."
msgstr ""

#: A.11-beat-tracking.md:20
msgid ""
"Let's have a play - to advance the beat we just need to call `tick`. Open up a"
" fresh buffer, type in the following and hit Run:"
msgstr ""
"Lass uns spielen – um den Beat zu erweitern, müssen wir nur `tick`aufrufen. Öf"
"fne einen neuen Puffer, gib Folgendes ein und drücke Run:"

#: A.11-beat-tracking.md:23
#, no-wrap
msgid "puts tick #=> 0"
msgstr "puts tick #=> 0"

#: A.11-beat-tracking.md:27
msgid ""
"This will return the current beat: `0`. Notice that even if you press the Run "
"button a few times it will always return `0`. This is because each run starts "
"a fresh beat counting from 0. However, whilst the run is still active, we can "
"advance the beat as many times as we want:"
msgstr ""

#: A.11-beat-tracking.md:32
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts tick #=> 2"

#: A.11-beat-tracking.md:38
msgid ""
"Whenever you see the symbol `#=>` at the end of a line of code it means that t"
"hat line will log the text on the right-hand-side. For example, `puts foo #=> "
"0` means the code `puts foo` prints `0` to the log at that point in the progra"
"m."
msgstr ""

#: A.11-beat-tracking.md:43
msgid "Checking the Beat"
msgstr ""

#: A.11-beat-tracking.md:45
msgid ""
"We've seen that `tick` does two things. It increments (adds one) and returns t"
"he current beat. Sometimes we just want to look at the current beat without ha"
"ving to increment it which we can do via `look`:"
msgstr ""

#: A.11-beat-tracking.md:49
#, no-wrap
msgid ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"
msgstr ""
"puts tick #=> 0\n"
"puts tick #=> 1\n"
"puts look #=> 1\n"
"puts look #=> 1"

#: A.11-beat-tracking.md:56
msgid ""
"In this code we tick the beat up twice and then call `look` twice. We'll see t"
"he following values in the log: `0`, `1`, `1`, `1`. The first two `tick`s retu"
"rned `0`, then `1` as expected, then the two `look`s just returned the last be"
"at value twice which was `1`."
msgstr ""

#: A.11-beat-tracking.md:64
msgid ""
"So now we can advance the beat with `tick` and check the beat with `look`. Wha"
"t next? We need something to tick over. Sonic Pi uses rings for representing r"
"iffs, melodies and rhythms and the tick system has been specifically designed "
"to work very closely with them. In fact, rings have their own dot version of `"
"tick` which does two things. Firstly, it acts like a regular tick and incremen"
"ts the beat. Secondly it looks up the ring value using the beat as the index. "
"Let's take a look:"
msgstr ""

#: A.11-beat-tracking.md:72
#, no-wrap
msgid "puts (ring :a, :b, :c).tick #=> :a"
msgstr "puts (ring :a, :b, :c).tick #=> :a"

#: A.11-beat-tracking.md:76
msgid ""
"`.tick` is a special dot version of `tick` which will return the first value o"
"f the ring `:a`. We can grab each of the values in the ring by calling `.tick`"
" multiple times:"
msgstr ""

#: A.11-beat-tracking.md:80
#, no-wrap
msgid ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"
msgstr ""
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts (ring :a, :b, :c).tick #=> :b\n"
"puts (ring :a, :b, :c).tick #=> :c\n"
"puts (ring :a, :b, :c).tick #=> :a\n"
"puts look                   #=> 3"

#: A.11-beat-tracking.md:88
msgid ""
"Take a look at the log and you'll see `:a`, `:b`, `:c` and then `:a` again. No"
"tice that `look` returns `3`. Calls to `.tick` act just like they are regular "
"calls to `tick` - they increment the local beat."
msgstr ""

#: A.11-beat-tracking.md:93
msgid "A Live Loop Arpeggiator"
msgstr ""

#: A.11-beat-tracking.md:95
msgid ""
"The real power comes when you mix `tick` with rings and `live_loop`s. When com"
"bined we have all the tools we need to both build and understand a simple arpe"
"giator. We need just four things:"
msgstr ""

#: A.11-beat-tracking.md:99
msgid "A ring containing the notes we want to loop over."
msgstr ""

#: A.11-beat-tracking.md:100
msgid "A means of incrementing and obtaining the beat."
msgstr ""

#: A.11-beat-tracking.md:101
msgid "The ability to play a note based on the current beat."
msgstr ""

#: A.11-beat-tracking.md:102
msgid "A loop structure to keep the arpegiator repeating."
msgstr ""

#: A.11-beat-tracking.md:104
msgid "These concepts can all be found in the following code:"
msgstr "Diese Konzepte findest du alle in dem folgenden Code:"

#: A.11-beat-tracking.md:106
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"live_loop :arp do\n"
"  use_synth :dpulse\n"
"  play notes.tick, release: 0.2\n"
"  sleep 0.125\n"
"end"

#: A.11-beat-tracking.md:116
msgid ""
"Let's look at each of these lines. First we define our ring of notes which we'"
"ll continually play. We then create a `live_loop` called `:arp` which loops ro"
"und for us. Each time round the `live_loop` we set our synth to `:dpulse` and "
"then play the next note in our ring using `.tick`. Remember that this will inc"
"rement our beat counter and use the latest beat value as an index into our not"
"es ring. Finally, we wait for an eighth of a beat before looping round again."
msgstr ""

#: A.11-beat-tracking.md:124
msgid "Multiple Simultaneous Beats"
msgstr "Mehrere gleichzeitige Beats"

#: A.11-beat-tracking.md:126
msgid ""
"A really important thing to know is that `tick`s are local to the `live_loop`."
" This means that each `live_loop` has its own independent beat counter. This i"
"s much more powerful than having a global metronome and beat. Let's take a loo"
"k at this in action:"
msgstr ""

#: A.11-beat-tracking.md:131
#, no-wrap
msgid ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"
msgstr ""
"notes = (ring 57, 62, 55, 59, 64)\n"
"with_fx :reverb do\n"
"  live_loop :arp do\n"
"    use_synth :dpulse\n"
"    play notes.tick + 12, release: 0.1\n"
"    sleep 0.125\n"
"  end\n"
"end\n"
"live_loop :arp2 do\n"
"  use_synth :dsaw\n"
"  play notes.tick - 12, release: 0.2\n"
"  sleep 0.75\n"
"end"

#: A.11-beat-tracking.md:149
msgid "Clashing Beats"
msgstr ""

#: A.11-beat-tracking.md:151
msgid ""
"A big cause of confusion with Sonic Pi's tick system is when people want to ti"
"ck over multiple rings in the same `live_loop`:"
msgstr ""

#: A.11-beat-tracking.md:154
#, no-wrap
msgid ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"
msgstr ""
"use_bpm 300\n"
"use_synth :blade\n"
"live_loop :foo do\n"
"  play (ring :e1, :e2, :e3).tick\n"
"  play (scale :e3, :minor_pentatonic).tick\n"
"  sleep 1\n"
"end"

#: A.11-beat-tracking.md:164
msgid ""
"Even though each `live_loop` has its own independent beat counter, we're calli"
"ng `.tick` twice within the same `live_loop`. This means that the beat will be"
" incremented twice every time round. This can produce some interesting polyrhy"
"thms but is often not what you want. There are two solutions to this problem. "
"One option is to manually call `tick` at the start of the `live_loop` and then"
" use `.look` to look up the current beat in each `live_loop`. The second solut"
"ion is to pass a unique name to each call to `.tick` such as `.tick(:foo)`. So"
"nic Pi will then create and track a separate beat counter for each named tick "
"you use. That way you can work with as many beats as you need! See the section"
" on named ticks in 9.4 of the built-in tutorial for more information."
msgstr ""

#: A.11-beat-tracking.md:178
msgid ""
"Let's bring all this knowledge of `tick`s, `ring`s and `live_loop`s together f"
"or a final fun example. As usual, don't treat this as a finished piece. Start "
"changing things and play around with it and see what you can turn it into. See"
" you next time..."
msgstr ""

#: A.11-beat-tracking.md:183
#, no-wrap
msgid ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"
msgstr ""
"use_bpm 240\n"
"notes = (scale :e3, :minor_pentatonic).shuffle\n"
"live_loop :foo do\n"
"  use_synth :blade\n"
"  with_fx :reverb, reps: 8, room: 1 do\n"
"    tick\n"
"    co = (line 70, 130, steps: 32).tick(:cutoff)\n"
"    play (octs :e3, 3).look, cutoff: co, amp: 2\n"
"    play notes.look, amp: 4\n"
"    sleep 1\n"
"  end\n"
"end\n"
"live_loop :bar do\n"
"  tick\n"
"  sample :bd_ada if (spread 1, 4).look\n"
"  use_synth :tb303\n"
"  co = (line 70, 130, steps: 16).look\n"
"  r = (line 0.1, 0.5, steps: 64).mirror.look\n"
"  play notes.look, release: r, cutoff: co\n"
"  sleep 0.5\n"
"end"

#: A.12-sample-slicing.md:1
msgid "A.12 Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:3
msgid "Sample Slicing"
msgstr ""

#: A.12-sample-slicing.md:5
msgid ""
"Way back in episode 3 of this Sonic Pi series we looked at how to loop, stretc"
"h and filter one of the most famous drum breaks of all time - the Amen Break. "
"In this tutorial we're going to take this one step further and learn how to sl"
"ice it up, shuffle the slices and glue it back together in a completely new or"
"der. If that sounds a bit crazy to you, don't worry, it will all become clear "
"and you'll soon master a powerful new tool for your live coded sets."
msgstr ""

#: A.12-sample-slicing.md:13
msgid "Sound as Data"
msgstr "Ton als Daten"

#: A.12-sample-slicing.md:15
msgid ""
"Before we get started let's just take a brief moment to understand how to work"
" with samples. By now, you've all hopefully played with Sonic Pi's powerful sa"
"mpler. If not, there's no time like the present! Boot up your Raspberry Pi, la"
"unch Sonic Pi from the Programming menu, type the following into a fresh buffe"
"r and then hit the Run button to hear a pre-recorded drum beat:"
msgstr ""

#: A.12-sample-slicing.md:26
msgid ""
"A recording of a sound is simply represented as data - lots of numbers between"
" -1 and 1 which represent the peaks and troughs of the sound wave. If we play "
"those numbers back in order, we get the original sound. However, what's to sto"
"p us from playing them back in a different order and creating a new sound?"
msgstr ""

#: A.12-sample-slicing.md:32
msgid ""
"How are samples actually recorded? It's actually pretty simple once you unders"
"tand the basic physics of sound. When you make a sound - for example by hittin"
"g a drum, the noise travels through the air in a similar fashion to how the su"
"rface of a lake ripples when you throw a pebble into it. When those ripples re"
"ach your ears, your eardrum moves sympathetically and converts those movements"
" into the sound you hear. If we wish to record and play back the sound, we the"
"refore need a way of capturing, storing and reproducing those ripples. One way"
" is to use a microphone which acts like an eardrum and moves back and forth as"
" the sound ripples hit it. The microphone then converts its position into a ti"
"ny electric signal which is then measured many times a second. These measureme"
"nts are then represented as a series of numbers between -1 and 1."
msgstr ""

#: A.12-sample-slicing.md:46
msgid ""
"If we were to plot a visualisation of the sound it would be a simple graph of "
"data with time on the x axis and microphone/speaker position as a value betwee"
"n -1 and 1 on the y axis. You can see an example of such a graph at the top of"
" the diagram."
msgstr ""

#: A.12-sample-slicing.md:51
msgid "Playing Part of a Sample"
msgstr ""

#: A.12-sample-slicing.md:53
msgid ""
"So, how do we code Sonic Pi to play a sample back in a different order? To ans"
"wer this question we need to take a look at the `start:` and `finish:` opts fo"
"r `sample`. These let us control the start and finish positions of our playbac"
"k of the numbers which represent the sound. The values for both of these opts "
"are represented as a number between `0` and `1` where `0` represents the start"
" of the sample and `1` is the end. So, to play the first half of the Amen Brea"
"k, we just need to specify a `finish:` of `0.5`:"
msgstr ""

#: A.12-sample-slicing.md:66
msgid "We can add in a `start:` value to play an even smaller section of the sample:"
msgstr ""

#: A.12-sample-slicing.md:68
#, no-wrap
msgid "sample :loop_amen, start: 0.25, finish: 0.5"
msgstr "sample :loop_amen, start: 0.25, finish: 0.5"

#: A.12-sample-slicing.md:72
msgid ""
"For fun, you can even have the `finish:` opt's value be *before* `start:` and "
"it will play the section backwards:"
msgstr ""

#: A.12-sample-slicing.md:75
#, no-wrap
msgid "sample :loop_amen, start: 0.5, finish: 0.25"
msgstr "sample :loop_amen, start: 0.5, finish: 0.25"

#: A.12-sample-slicing.md:79
msgid "Re-ordering Sample Playback"
msgstr ""

#: A.12-sample-slicing.md:81
msgid ""
"Now that we know that a sample is simply a list of numbers that can be played "
"back in any order and also how to play a specific part of a sample we can now "
"start having fun playing a sample back in the 'wrong' order."
msgstr ""

#: A.12-sample-slicing.md:86
msgid ""
"![Amen Slices](../../../etc/doc/images/tutorial/articles/A.12-sample-slicing/a"
"men_slice.png)"
msgstr ""

#: A.12-sample-slicing.md:88
msgid ""
"Let's take our Amen Break and chop it up into 8 equally-sized slices and then "
"shuffle the pieces around. Take a look at the diagram: at the top A) represent"
"s the graph of our original sample data. Chopping it into 8 slices gives us B)"
" - notice that we've given each slice a different colour to help distinguish t"
"hem. You can see each slice's start and finish values at the top. Finally C) i"
"s one possible re-ordering of the slices. We can then play this back to create"
" a new beat. Take a look at the code to do this:"
msgstr ""

#: A.12-sample-slicing.md:97
#, no-wrap
msgid ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"
msgstr ""
"live_loop :beat_slicer do\n"
"  slice_idx = rand_i(8)\n"
"  slice_size = 0.125\n"
"  s = slice_idx * slice_size\n"
"  f = s + slice_size\n"
"  sample :loop_amen, start: s, finish: f\n"
"  sleep sample_duration :loop_amen, start: s, finish: f\n"
"end"

#: A.12-sample-slicing.md:108
msgid ""
"we choose a random slice to play which should be a random number between 0 and"
" 7 (remember that we start counting at 0). Sonic Pi has a handy function for e"
"xactly this: `rand_i(8)`. We then store this random slice index in the variabl"
"e `slice_idx`."
msgstr ""

#: A.12-sample-slicing.md:113
msgid ""
"We define our `slice_size` which is 1/8 or 0.125. The `slice_size` is necessar"
"y for us to convert our `slice_idx` into a value between 0 and 1 so we can use"
" it as our `start:` opt."
msgstr ""

#: A.12-sample-slicing.md:117
msgid ""
"We calculate the start position `s` by multiplying the `slice_idx` by the `sli"
"ce_size`."
msgstr ""

#: A.12-sample-slicing.md:120
msgid ""
"We calculate the finish position `f` by adding the `slice_size` to the start p"
"osition `s`."
msgstr ""

#: A.12-sample-slicing.md:123
msgid ""
"We can now play the sample slice by plugging in the `s` and `f` values into th"
"e `start:` and `finish:` opts for `sample`."
msgstr ""

#: A.12-sample-slicing.md:126
msgid ""
"Before we play the next slice we need to know how long to `sleep` which should"
" be the duration of the sample slice. Luckily, Sonic Pi has us covered with `s"
"ample_duration` which accepts all the same opts as `sample` and simply returns"
" the duration. Therefore, by passing `sample_duration` our `start:` and `finis"
"h:` opts, we can find out the duration of a single slice."
msgstr ""

#: A.12-sample-slicing.md:133
msgid ""
"We wrap all of this code in a `live_loop` so that we continue to pick new rand"
"om slices to play."
msgstr ""

#: A.12-sample-slicing.md:139
msgid ""
"Let's combine everything we've seen so far into a final example which demonstr"
"ates how we can take a similar approach to combine randomly sliced beats with "
"some bass to create the start of an interesting track. Now it's your turn - ta"
"ke the code below as a starting point and see if you can take it in your own d"
"irection and create something new..."
msgstr ""

#: A.12-sample-slicing.md:145
#, no-wrap
msgid ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"
msgstr ""
"live_loop :sliced_amen do\n"
"  n = 8\n"
"  s =  line(0, 1, steps: n).choose\n"
"  f = s + (1.0 / n)\n"
"  sample :loop_amen, beat_stretch: 2, start: s, finish: f\n"
"  sleep 2.0  / n\n"
"end\n"
"live_loop :acid_bass do\n"
"  with_fx :reverb, room: 1, reps: 32, amp: 0.6 do\n"
"    tick\n"
"    n = (octs :e0, 3).look - (knit 0, 3 * 8, -4, 3 * 8).look\n"
"    co = rrand(70, 110)\n"
"    synth :beep, note: n + 36, release: 0.1, wave: 0, cutoff: co\n"
"    synth :tb303, note: n, release: 0.2, wave: 0, cutoff: co\n"
"    sleep (ring 0.125, 0.25).look\n"
"  end\n"
"end"

#: A.13-probabilistic-sequencer.md:1
msgid "A.13 Code a Probabilistic Sequencer"
msgstr ""

#: A.13-probabilistic-sequencer.md:3
msgid "Code a Probabilistic Sequencer"
msgstr ""

#: A.13-probabilistic-sequencer.md:5
msgid ""
"In a previous episode of this Sonic Pi series we explored the power of randomi"
"sation to introduce variety, surprise and change into our live coded tracks an"
"d performances. For example, we randomly picked notes from a scale to create n"
"ever-ending melodies. Today we're going to learn a new technique which uses ra"
"ndomisation for rhythm - probabilistic beats!"
msgstr ""

#: A.13-probabilistic-sequencer.md:12
msgid "Probability"
msgstr "Wahrscheinlichkeit"

#: A.13-probabilistic-sequencer.md:14
msgid ""
"Before we can start making new beats and synth rhythms we need to take a quick"
" dive into the basics of probability. This might sound daunting and complicate"
"d, but really it's just as simple as rolling a dice - honestly! When you take "
"a regular 6 sided board game dice and roll it what's actually happening? Well,"
" firstly you'll roll either a 1, 2, 3, 4, 5 or 6 with exactly the same chance "
"of getting any of the numbers. In fact, given that it's a 6 sided dice, on ave"
"rage (if you roll lots and lots of times) you'll throw a 1 every 6 throws. Thi"
"s means you have a 1 in 6 chance of throwing a 1. We can emulate dice rolls in"
" Sonic Pi with the fn `dice`. Let's roll one 8 times:"
msgstr ""

#: A.13-probabilistic-sequencer.md:25
#, no-wrap
msgid ""
"8.times do\n"
"  puts dice\n"
"  sleep 1\n"
"end"
msgstr ""
"8.times do\n"
"  puts dice\n"
"  sleep 1\n"
"end"

#: A.13-probabilistic-sequencer.md:32
msgid ""
"Notice how the log prints values between 1 and 6 just as if we'd rolled a real"
" dice ourselves."
msgstr ""

#: A.13-probabilistic-sequencer.md:35
msgid "Random Beats"
msgstr "Zufällige Beats"

#: A.13-probabilistic-sequencer.md:37
msgid ""
"Now imagine you had a drum and every time you were about to hit it you rolled "
"a dice. If you rolled a 1, you hit the drum and if you rolled any other number"
" you didn't. You now have a probabilistic drum machine working with a probabil"
"ity of 1/6! Let's hear what that sounds like:"
msgstr ""

#: A.13-probabilistic-sequencer.md:42
#, no-wrap
msgid ""
"live_loop :random_beat do\n"
"  sample :drum_snare_hard if dice == 1\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :random_beat do\n"
"  sample :drum_snare_hard if dice == 1\n"
"  sleep 0.125\n"
"end"

#: A.13-probabilistic-sequencer.md:50
msgid ""
"Let's quickly go over each line to make sure everything is very clear. First w"
"e create a new `live_loop` called `:random_beat` which will continually repeat"
" the two lines between `do` and `end`. The first of these lines is a call to `"
"sample` which will play a pre-recorded sound (the `:drum_snare_hard` sound in "
"this case). However, this line has a special conditional `if` ending. This mea"
"ns that the line will only be executed if the statement on the right hand side"
" of the `if` is `true`. The statement in this case is `dice == 1`. This calls "
"our `dice` function which, as we have seen, returns a value between 1 and 6. W"
"e then use the equality operator `==` to check to see if this value is `1`. If"
" it is `1`, then the statement resolves to `true` and our snare drum sounds, i"
"f it isn't `1` then the statement resolves to `false` and the snare is skipped"
". The second line simply waits for `0.125` seconds before rolling the dice aga"
"in."
msgstr ""

#: A.13-probabilistic-sequencer.md:65
msgid "Changing Probabilities"
msgstr "Wahrscheinlichkeiten ändern"

#: A.13-probabilistic-sequencer.md:67
msgid ""
"Those of you that have played role play games will be familiar with lots of st"
"rangely shaped dice with different ranges. For example there is the tetrahedro"
"n shaped dice which has 4 sides and even a 20 sided dice in the shape of a ico"
"sahedron. The number of sides on the dice changes the chance, or probability o"
"f rolling a 1. The fewer sides, the more likely you are to roll a 1 and the mo"
"re sides the less likely. For example, with a 4 sided dice, there's a one in 4"
" chance of rolling a 1 and with a 20 sided dice there's a one in 20 chance. Lu"
"ckily, Sonic Pi has the handy `one_in` fn for describing exactly this. Let's p"
"lay:"
msgstr ""
"Diejenigen unter euch die schon einmal Rollenspiele gespielt haben, werden "
"mit einer Menge seltsam geformter Würfel verschiedener Zahlenbereiche "
"vertraut sein. Es gibt zum Beispiel den tetraederförmigen Würfel, der 4 "
"Seiten hat und sogar einen 20-seitigen Würfel in der Form eines Ikosaeder. "
"Die Anzahl der Seiten eines Würfels ändert die Chancen, oder die "
"Wahrscheinlichkeit eine 1 zu würfeln. Je weniger Seiten, desto größer sind "
"deine Chancen eine 1 zu würfeln, und je mehr Seiten, desto geringer. Zum "
"Beispiel beträgt die Wahrscheinlichkeit eine 1 zu würfeln bei einem 4-"
"seitigen Würfel 1 zu 4, und bei einem 20-seitigen Würfel beträgt sie 1 zu "
"20. Glücklicherweise verfügt Sonic Pi über die praktische `one_in`-Funktion, "
"um genau dies zu beschreiben. Lass uns spielen:"

#: A.13-probabilistic-sequencer.md:77
#, no-wrap
msgid ""
"live_loop :different_probabilities do\n"
"  sample :drum_snare_hard if one_in(6)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :different_probabilities do\n"
"  sample :drum_snare_hard if one_in(6)\n"
"  sleep 0.125\n"
"end"

#: A.13-probabilistic-sequencer.md:84
msgid ""
"Start the live loop above and you'll hear the familiar random rhythm. However,"
" don't stop the code running. Instead, change the `6` to a different value suc"
"h as `2` or `20` and hit the `Run` button again. Notice that lower numbers mea"
"n the snare drum sounds more frequently and higher numbers mean the snare trig"
"gers fewer times. You're making music with probabilities!"
msgstr ""

#: A.13-probabilistic-sequencer.md:91
msgid "Combining Probabilities"
msgstr "Wahrscheinlichkeiten kombinieren"

#: A.13-probabilistic-sequencer.md:93
msgid ""
"Things get really exciting when you combine multiple samples being triggered w"
"ith different probabilities. For example:"
msgstr ""

#: A.13-probabilistic-sequencer.md:96
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  sample :elec_hi_snare if one_in(6)\n"
"  sample :drum_cymbal_closed if one_in(2)\n"
"  sample :drum_cymbal_pedal if one_in(3)\n"
"  sample :bd_haus if one_in(4)\n"
"  sleep 0.125\n"
"end"
msgstr ""
"live_loop :multi_beat do\n"
"  sample :elec_hi_snare if one_in(6)\n"
"  sample :drum_cymbal_closed if one_in(2)\n"
"  sample :drum_cymbal_pedal if one_in(3)\n"
"  sample :bd_haus if one_in(4)\n"
"  sleep 0.125\n"
"end"

#: A.13-probabilistic-sequencer.md:106
msgid ""
"Again, run the code above and then start changing the probabilities to modify "
"the rhythm. Also, try changing the samples to create an entirely new feel. For"
" example try changing `:drum_cymbal_closed` to `:bass_hit_c` for extra bass!"
msgstr ""

#: A.13-probabilistic-sequencer.md:112
msgid "Repeatable Rhythms"
msgstr "Wiederholbare Rhythmen"

#: A.13-probabilistic-sequencer.md:114
msgid ""
"Next, we can use our old friend `use_random_seed` to reset the random stream a"
"fter 8 iterations to create a regular beat. Type the following code to hear a "
"much more regular and repeating rhythm. Once you hear the beat, try changing t"
"he seed value from `1000` to another number. Notice how different numbers gene"
"rate different beats."
msgstr ""

#: A.13-probabilistic-sequencer.md:120
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  use_random_seed 1000\n"
"  8.times do\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :multi_beat do\n"
"  use_random_seed 1000\n"
"  8.times do\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.13-probabilistic-sequencer.md:133
msgid ""
"One thing I tend to do with this kind of structure is to remember which seeds "
"sound good and make a note of them. That way I can easily re-create my rhythms"
" in future practice sessions or performances."
msgstr ""

#: A.13-probabilistic-sequencer.md:139
msgid ""
"Finally, we can throw in some random bass to give it some nice melodic content"
". Notice that we can also use our newly discovered probabilistic sequencing me"
"thod on synths just as well as samples. Don't leave it at that though - tweak "
"the numbers and make your own track with the power of probabilities!"
msgstr ""

#: A.13-probabilistic-sequencer.md:145
#, no-wrap
msgid ""
"live_loop :multi_beat do\n"
"  use_random_seed 2000\n"
"  8.times do\n"
"    c = rrand(70, 130)\n"
"    n = (scale :e1, :minor_pentatonic).take(3).choose\n"
"    synth :tb303, note: n, release: 0.1, cutoff: c if rand < 0.9\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus, amp: 1.5 if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"
msgstr ""
"live_loop :multi_beat do\n"
"  use_random_seed 2000\n"
"  8.times do\n"
"    c = rrand(70, 130)\n"
"    n = (scale :e1, :minor_pentatonic).take(3).choose\n"
"    synth :tb303, note: n, release: 0.1, cutoff: c if rand < 0.9\n"
"    sample :elec_hi_snare if one_in(6)\n"
"    sample :drum_cymbal_closed if one_in(2)\n"
"    sample :drum_cymbal_pedal if one_in(3)\n"
"    sample :bd_haus, amp: 1.5 if one_in(4)\n"
"    sleep 0.125\n"
"  end\n"
"end"

#: A.14-amplitude-modulation.md:1
msgid "A.14 Amplitude Modulation"
msgstr "A.14 Amplitudenmodulation"

#: A.14-amplitude-modulation.md:3
msgid "Amplitude Modulation"
msgstr "Amplitudenmodulation"

#: A.14-amplitude-modulation.md:5
msgid ""
"This month we're going to take a deep dive into one of Sonic Pi's most powerfu"
"l and flexible audio FX - the `:slicer`. By the end of this article you will h"
"ave learned how to manipulate the overall volume of parts of our live coded so"
"und in powerful new ways. This will allow you to create new rhythmic and timbr"
"al structures and broaden your sonic possibilities."
msgstr ""

#: A.14-amplitude-modulation.md:12
msgid "Slice that Amp"
msgstr ""

#: A.14-amplitude-modulation.md:14
msgid ""
"So, what does the `:slicer` FX actually do? One way to think about it is that "
"it's just like having someone play around with the volume control on your TV o"
"r home hi-fi. Let's take a look but first, listen to the deep growl of the fol"
"lowing code which triggers the `:prophet` synth:"
msgstr ""

#: A.14-amplitude-modulation.md:20
#, no-wrap
msgid ""
"synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"synth :prophet, note: :e1 + 4, release: 8, cutoff: 80"
msgstr ""
"synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"synth :prophet, note: :e1 + 4, release: 8, cutoff: 80"

#: A.14-amplitude-modulation.md:25
msgid "Now, let's pipe it through the `:slicer` FX:"
msgstr ""

#: A.14-amplitude-modulation.md:27
#, no-wrap
msgid ""
"\n"
"with_fx :slicer do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"
msgstr ""
"\n"
"with_fx :slicer do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"

#: A.14-amplitude-modulation.md:35
msgid ""
"Hear how the slicer acts like it's muting and unmuting the audio with a regula"
"r beat. Also, notice how the `:slicer` affects all the audio generated between"
" the `do`/`end` blocks. You can control the speed at which it turns the audio "
"on and off with the `phase:` opt which is short for phase duration. Its defaul"
"t value is `0.25` which means 4 times a second at the default BPM of 60. Let's"
" make it faster:"
msgstr ""

#: A.14-amplitude-modulation.md:42
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125 do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125 do\n"
"  synth :prophet, note: :e1, release: 8, cutoff: 70\n"
"  synth :prophet, note: :e1 + 4, release: 8, cutoff: 80\n"
"end"

#: A.14-amplitude-modulation.md:49
msgid ""
"Now, play with different `phase:` durations yourself. Try longer and shorter v"
"alues. See what happens when you choose a really short value. Also, try differ"
"ent synths such as `:beep` or `:dsaw` and different notes. Take a look at the "
"following diagram to see how different `phase:` values change the number of am"
"plitude changes per beat."
msgstr ""

#: A.14-amplitude-modulation.md:56
msgid ""
"![Phase Durations](../../../etc/doc/images/tutorial/articles/A.14-amplitude-mo"
"dulation/slicer_phase_durations.png)"
msgstr ""
"![Dauer](../../../etc/doc/images/tutorial/articles/A.14-amplitude-modulation/"
"slicer_phase_durations.png)"

#: A.14-amplitude-modulation.md:58
msgid ""
"Phase duration is the length of time for one on/off cycle. Therefore smaller v"
"alues will make the FX switch on and off much faster than larger values. Good "
"values to start playing with are `0.125`, `0.25`, `0.5` and `1`."
msgstr ""

#: A.14-amplitude-modulation.md:64
msgid "Control Waves"
msgstr ""

#: A.14-amplitude-modulation.md:66
msgid ""
"By default, the `:slicer` FX uses a square wave to manipulate the amplitude th"
"rough time. This is why we hear the amplitude on for a period, then immediatel"
"y off for a period, then back on again. It turns out that the square wave is j"
"ust one of 4 different control waves that are supported by `:slicer`. The othe"
"rs are saw, triangle and (co)sine. Take a look at the diagram below to see wha"
"t these look like. We can also hear what they sound like. For example, the fol"
"lowing code uses (co)sine as the control wave. Hear how the sound doesn't turn"
" on and off abruptly but instead smoothly fades in and out:"
msgstr ""

#: A.14-amplitude-modulation.md:76
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.5, wave: 3 do\n"
"  synth :dsaw, note: :e3, release: 8, cutoff: 120\n"
"  synth :dsaw, note: :e2, release: 8, cutoff: 100\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.5, wave: 3 do\n"
"  synth :dsaw, note: :e3, release: 8, cutoff: 120\n"
"  synth :dsaw, note: :e2, release: 8, cutoff: 100\n"
"end"

#: A.14-amplitude-modulation.md:83
msgid ""
"Have a play with the different wave forms by changing the `wave:` opt to `0` f"
"or saw, `1` for square, `2` for triangle and `3` for sine. See how different w"
"aves sound with different `phase:` opts too."
msgstr ""

#: A.14-amplitude-modulation.md:87
msgid ""
"Each of these waves can be inverted with the `invert_wave:` opt which flips it"
" on the y axis. For example, in a single phase the saw wave typically starts h"
"igh, and slowly goes down before jumping back to the top. With `invert_wave: 1"
"` it will start low and slowly go up before jumping back down again. Additiona"
"lly, the control wave can be started at different points with the `phase_offse"
"t:` opt which should be a value between `0` and `1`. By playing around with `p"
"hase:`, `wave:`, `invert_wave:` and `phase_offset` opts you can dramatically c"
"hange how the amplitude is modified through time."
msgstr ""

#: A.14-amplitude-modulation.md:97
#, fuzzy
msgid ""
"![Phase Durations](../../../etc/doc/images/tutorial/articles/A.14-amplitude-mo"
"dulation/slicer_control_waves.png)"
msgstr "Dauer"

#: A.14-amplitude-modulation.md:100
msgid "Setting your levels"
msgstr ""

#: A.14-amplitude-modulation.md:102
msgid ""
"By default, `:slicer` switches between amplitude values `1` (fully loud) and `"
"0` (silent). This can be changed with the `amp_min:` and `amp_max:` opts. You "
"can use this alongside the sine wave setting to create a simple tremolo effect"
":"
msgstr ""

#: A.14-amplitude-modulation.md:107
#, no-wrap
msgid ""
"with_fx :slicer, amp_min: 0.25, amp_max: 0.75, wave: 3, phase: 0.25 do\n"
"  synth :saw, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, amp_min: 0.25, amp_max: 0.75, wave: 3, phase: 0.25 do\n"
"  synth :saw, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:113
msgid ""
"This is just like grabbing the volume knob on your hi-fi and moving it up and "
"down just a little so the sound 'wobbles' in and out."
msgstr ""

#: A.14-amplitude-modulation.md:117
msgid "Probabilities"
msgstr "Wahrscheinlichkeiten"

#: A.14-amplitude-modulation.md:119
msgid ""
"One of `:slicer`'s powerful features is its ability to use probability to choo"
"se whether or not to turn the slicer on or off. Before the `:slicer` FX starts"
" a new phase it rolls a dice and based on the result either uses the selected "
"control wave or keeps the amplitude off. Let's take a listen:"
msgstr ""

#: A.14-amplitude-modulation.md:125
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125, probability: 0.6  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125, probability: 0.6  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:133
msgid ""
"Hear how we now have an interesting rhythm of pulses. Try changing the `probab"
"ility:` opt to a different value between `0` and `1`. Values closer to `0` wil"
"l have more space between each sound due to the likelihood of the sound being "
"triggered being much lower."
msgstr ""

#: A.14-amplitude-modulation.md:138
msgid ""
"Another thing to notice is that the probability system in the FX is just like "
"the randomisation system accessible via fns such as `rand` and `shuffle`. They"
" are both completely deterministic. This means that each time you hit Run you'"
"ll hear exactly the same rhythm of pulses for a given probability. If you woul"
"d like to change things around you can use the `seed:` opt to select a differe"
"nt starting seed. This works exactly the same as `use_random_seed` but only af"
"fects that particular FX."
msgstr ""

#: A.14-amplitude-modulation.md:146
msgid ""
"Finally, you can change the 'resting' position of the control wave when the pr"
"obability test fails from `0` to any other position with the `prob_pos:` opt:"
msgstr ""

#: A.14-amplitude-modulation.md:150
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125, probability: 0.6, prob_pos: 1  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125, probability: 0.6, prob_pos: 1  do\n"
"  synth :tb303, note: :e1, cutoff_attack: 8, release: 8\n"
"  synth :tb303, note: :e2, cutoff_attack: 4, release: 8\n"
"  synth :tb303, note: :e3, cutoff_attack: 2, release: 8\n"
"end"

#: A.14-amplitude-modulation.md:158
msgid "Slicing Beats"
msgstr ""

#: A.14-amplitude-modulation.md:160
msgid "One really fun thing to do is to use `:slicer` to chop a drum beat in and out:"
msgstr ""

#: A.14-amplitude-modulation.md:163
#, no-wrap
msgid ""
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_mika\n"
"end"
msgstr ""
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_mika\n"
"end"

#: A.14-amplitude-modulation.md:169
msgid ""
"This allows us to take any sample and create new rhythmical possibilites which"
" is a lot of fun. However, one thing to be careful about is to make sure that "
"the tempo of the sample matches the current BPM in Sonic Pi otherwise the slic"
"ing will sound totally off. For example, try swapping `:loop_mika` with the `l"
"oop_amen` sample to hear how bad this can sound when the tempos don't align."
msgstr ""

#: A.14-amplitude-modulation.md:176
msgid "Changing tempo"
msgstr "Tempo ändern"

#: A.14-amplitude-modulation.md:178
msgid ""
"As we have already seen, changing the default BPM with `use_bpm` will make all"
" the sleep times and synth envelope durations grow or shrink to match the beat"
". The `:slicer` FX honours this too, as the `phase:` opt is actually measured "
"in beats not seconds. We can therefore fix the issue with `loop_amen` above by"
" changing the BPM to match the sample:"
msgstr ""

#: A.14-amplitude-modulation.md:184
#, no-wrap
msgid ""
"use_sample_bpm :loop_amen\n"
"with_fx :slicer, phase: 0.125 do\n"
"  sample :loop_amen\n"
"end"
msgstr ""

#: A.14-amplitude-modulation.md:194
msgid ""
"Let's apply all these ideas into a final example that only uses the `:slicer` "
"FX to create an interesting combination. Go ahead, start changing it and make "
"it into your own piece!"
msgstr ""

#: A.14-amplitude-modulation.md:198
#, no-wrap
msgid ""
"live_loop :dark_mist do\n"
"  co = (line 70, 130, steps: 8).tick\n"
"  with_fx :slicer, probability: 0.7, prob_pos: 1 do\n"
"    synth :prophet, note: :e1, release: 8, cutoff: co\n"
"  end\n"
"  \n"
"  with_fx :slicer, phase: [0.125, 0.25].choose do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"  sleep 8\n"
"end\n"
"live_loop :crashing_waves do\n"
"  with_fx :slicer, wave: 0, phase: 0.25 do\n"
"    sample :loop_mika, rate: 0.5\n"
"  end\n"
"  sleep 16\n"
"end"
msgstr ""
"live_loop :dark_mist do\n"
"  co = (line 70, 130, steps: 8).tick\n"
"  with_fx :slicer, probability: 0.7, prob_pos: 1 do\n"
"    synth :prophet, note: :e1, release: 8, cutoff: co\n"
"  end\n"
"  \n"
"  with_fx :slicer, phase: [0.125, 0.25].choose do\n"
"    sample :guit_em9, rate: 0.5\n"
"  end\n"
"  sleep 8\n"
"end\n"
"live_loop :crashing_waves do\n"
"  with_fx :slicer, wave: 0, phase: 0.25 do\n"
"    sample :loop_mika, rate: 0.5\n"
"  end\n"
"  sleep 16\n"
"end"

#: A.15-performance.md:1
msgid "A.15 Five Live Coding Techniques"
msgstr ""

#: A.15-performance.md:3
msgid "Five Live Coding Techniques"
msgstr ""

#: A.15-performance.md:5
msgid ""
"In this month's Sonic Pi tutorial we're going to take a look at how you can st"
"art treating Sonic Pi like a real instrument. We therefore need to start think"
"ing of code in a completely different way. Live coders think of code in a simi"
"lar way to how violinists think of their bow. In fact, just like a violinist c"
"an apply various bowing techniques to create different sounds (long slow motio"
"ns vs short fast hits) we will explore five of the basic live coding technique"
"s that Sonic Pi enables. By the end of this article you'll be able to start pr"
"acticing for your own live coded performances."
msgstr ""

#: A.15-performance.md:15
msgid "1. Memorise the Shortcuts"
msgstr ""

#: A.15-performance.md:17
msgid ""
"The first tip to live coding with Sonic Pi is to start using the shortcuts. Fo"
"r example, instead of wasting valuable time reaching for the mouse, moving it "
"over to the Run button and clicking, you can simply press `alt` and `r` at the"
" same time which is much faster and keeps your fingers at the keyboard ready f"
"or the next edit. You can find out the shortcuts for the main buttons at the t"
"op by hovering the mouse over them. See section 10.2 of the built-in tutorial "
"for the full list of shortcuts."
msgstr ""

#: A.15-performance.md:26
msgid ""
"When performing, one fun thing to do is to add a bit of flair with your arm mo"
"tion when hitting shortcuts. For example, it's often good to communicate to th"
"e audience when you're about to make a change - so embellish your movement whe"
"n hitting `alt-r` just like a guitarist would do when hitting a big power chor"
"d."
msgstr ""

#: A.15-performance.md:32
msgid "2. Manually Layer your Sounds"
msgstr ""

#: A.15-performance.md:34
msgid ""
"Now you can trigger code instantly with the keyboard, you can instantly apply "
"this skill for our second technique which is to layer your sounds manually. In"
"stead of 'composing' using lots of calls to `play`, and `sample` separated by "
"calls to `sleep` we will have one call to `play` which we will manually trigge"
"r using `alt-r`. Let's try it. Type the following code into a fresh buffer:"
msgstr ""

#: A.15-performance.md:41
#, no-wrap
msgid "synth :tb303, note: :e2 - 0, release: 12, cutoff: 90"
msgstr "synth :tb303, note: :e2 - 0, release: 12, cutoff: 90"

#: A.15-performance.md:46
msgid ""
"Now, hit `Run` and whilst the sound is playing, modify the code in order to dr"
"op down four notes by changing it to the following:"
msgstr ""

#: A.15-performance.md:50
#, no-wrap
msgid "synth :tb303, note: :e2 - 4, release: 12, cutoff: 90"
msgstr "synth :tb303, note: :e2 - 4, release: 12, cutoff: 90"

#: A.15-performance.md:55
msgid ""
"Now, hit `Run` again, to hear both sounds playing at the same time. This is be"
"cause Sonic Pi's `Run` button doesn't wait for any previous code to finish, bu"
"t instead starts the code running at the same time. This means you can easily "
"layer lots of sounds manually with minor or major modifications between each t"
"rigger. For example, try changing both the `note:` and the `cutoff:` opts and "
"then re-trigger."
msgstr ""

#: A.15-performance.md:63
msgid "You can also try this technique with long abstract samples. For example:"
msgstr ""

#: A.15-performance.md:65
#, no-wrap
msgid "sample :ambi_lunar_land, rate: 1"
msgstr "sample :ambi_lunar_land, rate: 1"

#: A.15-performance.md:69
msgid ""
"Try starting the sample off, and then progressively halving the `rate:` opt be"
"tween hitting `Run` from `1` to `0.5` to `0.25` to `0.125` and then even try s"
"ome negative values such as `-0.5`. Layer the sounds together and see where yo"
"u can take it. Finally, try adding some FX."
msgstr ""

#: A.15-performance.md:74
msgid ""
"When performing, working with simple lines of code in this way means that an a"
"udience new to Sonic Pi has a good chance to follow what you're doing and rela"
"te the code that they can read to the sounds they are hearing."
msgstr ""

#: A.15-performance.md:80
msgid "3. Master Live Loops"
msgstr ""

#: A.15-performance.md:82
msgid ""
"When working with more rhythmic music, it can often be hard to manually trigge"
"r everything and keep good time. Instead, it is often better to use a `live_lo"
"op`. This provides repetition for your code whilst also giving the ability to "
"edit the code for the next time round the loop. They also will run at the same"
" time as other `live_loop`s which means you can layer them together both with "
"each other and manual code triggers. Take a look at section 9.2 of the built-i"
"n tutorial for more information about working with live loops."
msgstr ""

#: A.15-performance.md:91
msgid ""
"When performing, remember to make use of `live_loop`'s `sync:` opt to allow yo"
"u to recover from accidental runtime mistakes which stop the live loop running"
" due to an error. If you already have the `sync:` opt pointing to another vali"
"d `live_loop`, then you can quickly fix the error and re-run the code to re-st"
"art things without missing a beat."
msgstr ""

#: A.15-performance.md:97
#, fuzzy
msgid "4. Use the Main Mixer"
msgstr "4. Verwende den Hauptmischer"

#: A.15-performance.md:99
msgid ""
"One of Sonic Pi's best kept secrets is that it has a main mixer through which "
"all sound flows. This mixer has both a low pass filter and a high pass filter "
"built-in, so you can easily perform global modifications to the sound. The mai"
"n mixer's functionality can be accessed via the fn `set_mixer_control!`. For e"
"xample, whilst some code is running and making sound, enter this into a spare "
"buffer and hit `Run`:"
msgstr ""

#: A.15-performance.md:107
msgid "` set_mixer_control! lpf: 50 `"
msgstr "` set_mixer_control! lpf: 50 `"

#: A.15-performance.md:111
msgid ""
"After you run this code, all existing and new sounds will have a low pass filt"
"er applied to them and will therefore sound more muffled. Note that this means"
" that the new mixer values stick until they are changed again. However, if you"
" want, you can always reset the mixer back to its default state with `reset_mi"
"xer!`. Some of the currently supported opts are: `pre_amp:`, `lpf:` `hpf:`, an"
"d `amp:`. For the full list, see the built-in docs for `set_mixer_control!`."
msgstr ""

#: A.15-performance.md:119
msgid ""
"Use the mixer's `*_slide` opts to slide one or many opts values over time. For"
" example, to slowly slide the mixer's low pass filter down from the current va"
"lue to 30, use the following:"
msgstr ""

#: A.15-performance.md:123
#, no-wrap
msgid "set_mixer_control! lpf_slide: 16, lpf: 30"
msgstr "set_mixer_control! lpf_slide: 16, lpf: 30"

#: A.15-performance.md:127
msgid "You can then slide quickly back to a high value with:"
msgstr ""

#: A.15-performance.md:129
#, no-wrap
msgid "set_mixer_control! lpf_slide: 1, lpf: 130"
msgstr "set_mixer_control! lpf_slide: 1, lpf: 130"

#: A.15-performance.md:133
msgid ""
"When performing, it's often useful to keep a buffer free for working with the "
"mixer like this."
msgstr ""
"Bei der Ausführung ist es oft hilfreich, einen Puffer frei zu halten, um, wie "
"jetzt, mit dem Mixer zu arbeiten."

#: A.15-performance.md:136
msgid "5. Practice"
msgstr "5. Übung"

#: A.15-performance.md:138
msgid ""
"The most important technique for live coding is practice. The most common attr"
"ibute across professional musicians of all kinds is that they practice playing"
" with their instruments - often for many hours a day. Practice is just as impo"
"rtant for a live coder as a guitarist. Practice allows your fingers to memoris"
"e certain patterns and common edits so you can type and work with them more fl"
"uently. Practice also gives you opportunities to explore new sounds and code c"
"onstructs."
msgstr ""

#: A.15-performance.md:146
msgid ""
"When performing, you'll find the more practice you do, the easier it will be f"
"or you to relax into the gig. Practice will also give you a wealth of experien"
"ce to draw from. This can help you understand which kinds of modifications wil"
"l be interesting and also work well with the current sounds."
msgstr ""

#: A.15-performance.md:154
msgid ""
"This month, instead of giving you a final example that combines all the things"
" discussed, let's part by setting down a challenge. See if you can spend a wee"
"k practicing one of these ideas every day. For example, one day practice manua"
"l triggers, the next do some basic `live_loop` work and the following day play"
" around with the main mixer. Then repeat. Don't worry if things feel slow and "
"clunky at first - just keep practicing and before you know it you'll be live c"
"oding for a real audience."
msgstr ""

#: A.16-practice.md:1
msgid "A.16 How to Practice Live Coding"
msgstr ""

#: A.16-practice.md:3
msgid "8 Tips for Live Coding Practice"
msgstr ""

#: A.16-practice.md:5
msgid ""
"Last month we took a look at five important techniques for mastering live codi"
"ng - in other words, we explored how we could use Sonic Pi to approach code in"
" the same way we would approach a musical instrument. One of the important con"
"cepts that we discussed was practice. This month we're going to take a deeper "
"dive into understanding why live coding practice is important and how you migh"
"t start."
msgstr ""

#: A.16-practice.md:13
msgid "Practice regularly"
msgstr "Übe regelmäßig"

#: A.16-practice.md:15
msgid ""
"The most important piece of advice is to make sure you practice regularly. As "
"a rule I typically practice for 1-2 hours a day, but 20 mins is just fine when"
" you're starting out. Little but often is what you're aiming for - so if you c"
"an only manage 10 minutes, that's a great start."
msgstr ""

#: A.16-practice.md:21
msgid ""
"Practice tip #1 - start to develop a practice routine. Find a nice time in the"
" day that works for you and try and practice at that time as many days of the "
"week as you can. Before long you'll be looking forward to your regular session"
"."
msgstr ""

#: A.16-practice.md:27
msgid "Learn to Touch Type"
msgstr ""

#: A.16-practice.md:29
msgid ""
"If you watch a professional musician performing on stage you'll likely notice "
"a few things. Firstly, when they play they don't stare at their instrument. Th"
"eir fingers, arms and bodies know which keys to press, strings to pluck or dru"
"ms to hit without them having to think about it too much. This is known as \"mu"
"scle memory\" and although it might sound like something only professionals can"
" do - it's just the same as when you first learned to walk or ride a bike - pr"
"acticing through repetition. Live coders use muscle memory to free their minds"
" from having to think about where to move their fingers so they can focus on t"
"he music. This is called touch-typing - typing without having to look at the k"
"eyboard."
msgstr ""

#: A.16-practice.md:41
msgid ""
"Practice tip #2 - learn how to touch type. There are many apps, websites and e"
"ven games which can help you achieve this. Find one you like the look of and s"
"tick at it until you can code without looking down."
msgstr ""

#: A.16-practice.md:46
msgid "Code whilst standing"
msgstr ""

#: A.16-practice.md:48
msgid ""
"The body of a musician is conditioned for playing their instrument. For exampl"
"e, a trumpet player needs to be able to blow hard, a guitar player needs to be"
" able to grip the fretboard with strength and a drummer needs to be able to co"
"ntinually hit the drums for long periods of time. So, what's physical about li"
"ve coding? Just like DJs, live coders typically perform whilst standing up and"
" some even dance whilst they code! If you practice live coding whilst sitting "
"at a desk and then have to get up and stand at a gig, you'll likely find the d"
"ifference very difficult and frustrating."
msgstr ""

#: A.16-practice.md:58
msgid ""
"Practice tip #3 - stand whilst you practice. The easiest way to do this is to "
"use a standing height desk. However, if like me you don't have one at home, th"
"ere's a couple of low-fi options. The approach I take is to use an ironing boa"
"rd which happens to work rather well. Another is to stack some boxes or large "
"books on a normal desk and place your keyboard on top of that. Also, make sure"
" you stretch before you start practicing and try and dance a little during the"
" session. Remember, nobody is watching you, so have fun and you'll feel much m"
"ore natural on stage."
msgstr ""

#: A.16-practice.md:68
msgid "Practice setting up"
msgstr ""

#: A.16-practice.md:70
msgid ""
"Most instruments require some assembly and tuning before they can be played. U"
"nless you're a rockstar with a bus full of roadies, you'll have to set up your"
" own instrument before your gig. This is often a stressful time and it is easy"
" for problems to occur. One way to help with this is to incorporate the setup "
"process into your practice sessions."
msgstr ""

#: A.16-practice.md:76
msgid ""
"Practice tip #4 - treat setting up as an important part of your practice. For "
"example, have a box or bag that you can keep your Raspberry Pi and keyboard in"
" etc. Before each practice session, take out all the parts, connect everything"
", and work through the boot process until you have Sonic Pi running and can ma"
"ke sounds. Once you've finished practicing, take the time to carefully pack ev"
"erything away afterwards. This may take some time at first, but before long yo"
"u'll be able to setup and pack everything away incredibly quickly without havi"
"ng to think about it."
msgstr ""

#: A.16-practice.md:87
msgid "Experiment Musically"
msgstr "Experimentiere musikalisch"

#: A.16-practice.md:89
msgid ""
"Once you've set up and are ready to start making music, you might find yoursel"
"f struggling to know where to start. One problem many people face is that they"
" might have a good idea of the kinds of sounds they want to make, but are frus"
"trated that they can't produce them. Some people don't even know what kind of "
"sounds they want to make! The first thing to do is not to worry - this is very"
" common and happens to every musician - even if they've been practicing for a "
"long time. It is much more important to be making sounds you don't like than n"
"ot making any sounds at all."
msgstr ""

#: A.16-practice.md:99
msgid ""
"Practice tip #5 - spend time making sounds and music you don't like. Try to ma"
"ke time to explore new sounds and ideas. Don't worry that it might sound terri"
"ble if it's not the style you're looking for. When you're experimenting like t"
"his you increase the chance of stumbling over a sound or combination of sounds"
" which you love! Even if 99% of the sounds you make are bad, that 1% might be "
"the riff or intro to your new track. Forget the things you don't like and reme"
"mber the parts you do. This is even easier when you're making music with code "
"- just hit save!"
msgstr ""

#: A.16-practice.md:110
msgid "Hear the Code"
msgstr "Höre den Code"

#: A.16-practice.md:112
msgid ""
"Many musicians can look at a musical score and hear the music in their head wi"
"thout having to play it. This is a very useful skill and it's well worth incor"
"porating into your live coding practice sessions. The important point is to be"
" able to have some understanding of what the code is going to sound like. You "
"don't need to be able to hear it exactly in your head, but instead it's useful"
" to know if the code is going to be fast, slow, loud, rhythmic, melodic, rando"
"m, etc. The final goal is then to be able to reverse this process - to be able"
" to hear music in your head and know what code to write to make it. It may tak"
"e you a long time to master this, but once you do, you'll be able to improvise"
" on stage and express your ideas fluently."
msgstr ""
"Viele Musiker können auf ein Notenblatt schauen und die Musik in ihrem Kopf hö"
"ren, ohne das sie gespielt wird. Das ist eine sehr nützliche Fähigkeit und es "
"lohnt sich auch diese auf deine Live-Coding Übungen zu übertragen: Der wichtig"
"e Punkt ist, dass Du eine gewisse Vorstellungen darüber entwickelst, wie sich "
"Dein Code anhören wird. Du musst es natürlich nicht genau in deinem Kopf hören"
" können, aber es ist praktisch, ein Gefühl dafür zu haben, ob sich der Code sc"
"hnell oder langsam, laut, rhythmisch, melodisch, zufällig usw. anhören wird. D"
"as endgültige Ziel ist dann, diesen Prozess umkehren zu können und zu Musik, d"
"ie Du dir in deinem Kopf vorstellst, den passenden Code schreiben zu können. B"
"is dahin wirst du wahrscheinlich sehr viel üben müssen, aber wenn du es dann k"
"annst, wirst du es schaffen auf der Bühne improvisieren zu können und deine Id"
"een fließend umzusetzen."

#: A.16-practice.md:124
msgid ""
"Practice tip #6 - write some code into Sonic Pi but don't hit the Run button. "
"Instead, try to imagine what sound it is going to produce. Then, hit Run, list"
"en, and think about what you got right and what you didn't. Keep repeating thi"
"s until it become a natural part of your coding process. When I practice I nor"
"mally have a good idea of what the code will sound like. However, I still am o"
"ccasionally surprised, and then I'll stop and spend some time thinking about w"
"hy I was wrong. Each time this happens, I learn new tricks which allow me to e"
"xpress myself in new ways."
msgstr ""

#: A.16-practice.md:134
msgid "Remove all distractions"
msgstr ""

#: A.16-practice.md:136
msgid ""
"A common problem when practicing is to become distracted with other things. Pr"
"acticing is hard and requires real discipline regardless of the kind of music "
"you're making - from jazz to classical to EDM. If you're struggling to get sta"
"rted or make progress, it's often too easy to hop on social media, or look som"
"ething up on the internet etc. If you've set yourself a target of 20 minutes o"
"f practice, it's important to try and spend all that time being as productive "
"as possible."
msgstr ""

#: A.16-practice.md:144
msgid ""
"Practice tip #7 - before you start practicing remove as many distractions as p"
"ossible. For example, disconnect from the internet, put your phone in another "
"room and try to practice in a quiet place where you're unlikely to be disturbe"
"d. Try to focus on coding music and you can return to your distractions when y"
"ou've finished."
msgstr ""

#: A.16-practice.md:151
msgid "Keep a practice diary"
msgstr ""

#: A.16-practice.md:153
msgid ""
"When you are practicing, you'll often find your mind is full of new exciting i"
"deas - new musical directions, new sounds to try out, new functions to write, "
"etc. These ideas are often so interesting that you might stop what you're doin"
"g and start working on the idea. This is another form of distraction!"
msgstr ""

#: A.16-practice.md:159
msgid ""
"Practice tip #8 - keep a practice diary by your keyboard. When you get an exci"
"ting new idea, temporarily pause your practice session, quickly jot the idea d"
"own, then forget about it and carry on practicing. You can then spend some qua"
"lity time thinking about and working on your ideas after you've finished pract"
"icing."
msgstr ""

#: A.16-practice.md:168
msgid ""
"Try to establish a practice routine which incorporates as many of these ideas "
"as possible. Try to keep the sessions as fun as possible but be aware that som"
"e practice sessions will be hard and feel a little like work. However, it will"
" all be worth it once you've created your first piece or given your first perf"
"ormance. Remember, practice is the key to success!"
msgstr ""

#: A.17-sample-stretching.md:1
msgid "A.17 Sample Stretching"
msgstr ""

#: A.17-sample-stretching.md:3
msgid "Sample Stretching"
msgstr ""

#: A.17-sample-stretching.md:5
msgid ""
"When people discover Sonic Pi, one of the first things they learn is how simpl"
"e it is to play pre-recorded sounds using the `sample` function. For example, "
"you can play an industrial drum loop, hear the sound of a choir or even listen"
" to a vinyl scratch all via a single line of code. However, many people don't "
"realise that you can actually vary the speed that the sample is played back at"
" for some powerful effects and a whole new level of control over your recorded"
" sounds. So, fire up a copy of Sonic Pi and let's get started stretching some "
"samples!"
msgstr ""

#: A.17-sample-stretching.md:14
msgid "Slowing Samples Down"
msgstr "Sample verlangsamen"

#: A.17-sample-stretching.md:16
msgid "To modify the playback rate of a sample we need to use the `rate:` opt:"
msgstr ""

#: A.17-sample-stretching.md:18
#, no-wrap
msgid "sample :guit_em9, rate: 1"
msgstr "Sample :guit_em9, rate: 1"

#: A.17-sample-stretching.md:20
msgid ""
"If we specify a `rate:` of `1` then the sample is played back at the normal ra"
"te. If we want to play it back at half speed we simply use a `rate:` of `0.5`:"
msgstr ""

#: A.17-sample-stretching.md:27
msgid ""
"Notice that this has two effects on the audio. Firstly the sample sounds lower"
" in pitch and secondly it takes twice as long to play back (see the sidebar fo"
"r an explanation of why this is the case). We can even choose lower and lower "
"rates moving towards `0`, so a `rate:` of `0.25` is a quarter speed, `0.1` is "
"a tenth of the speed, etc. Try playing with some low rates and see if you can "
"turn the sound into a low rumble."
msgstr ""
"Dies hat zwei Auswirkungen auf den Ton. Das Sample hört sich tiefer an und es "
"dauert doppelt so lange es abzuspielen (eine Erklärung hierfür findest du in d"
"er Seitenleiste). Wir können den Wert von `rate` immer kleiner machen, indem w"
"ir uns `0` annähern. Eine Rate von `0.25` bedeutet ein Viertel der Geschwindig"
"keit, eine Rate von `0.1` ein Zehntel, usw. Spiele mit niedrige Raten herum un"
"d schaue, ob du es schaffst ein tiefes Murren zu erzeugen."

#: A.17-sample-stretching.md:34
msgid "Speeding Samples Up"
msgstr "Sample beschleunigen"

#: A.17-sample-stretching.md:36
msgid ""
"In addition to making the sound longer and lower using a small rate, we can us"
"e higher rates to make the sound shorter and higher. Let's play with a drum lo"
"op this time. First, take a listen to how it sounds at the default rate of `1`"
":"
msgstr ""

#: A.17-sample-stretching.md:41
#, no-wrap
msgid "sample :loop_amen, rate: 1"
msgstr "sample :loop_amen, rate: 1"

#: A.17-sample-stretching.md:44
msgid "Now, let's speed it up a little:"
msgstr "Lassen wir es etwas schneller werden:"

#: A.17-sample-stretching.md:48
msgid ""
"Ha! We just moved musical genres from old-skool techno to jungle. Notice how t"
"he pitch of each drum hit is higher as well as how the whole rhythm speeds up."
" Now, try even higher rates and see how high and short you can make the drum l"
"oop. For example, if you use a rate of `100`, the drum loop turns into a click"
"!"
msgstr ""

#: A.17-sample-stretching.md:54
msgid "Reverse Gear"
msgstr "Rückwärtsgang"

#: A.17-sample-stretching.md:56
msgid ""
"Now, I'm sure many of you are thinking the same thing right now... \"what if yo"
"u use a negative number for the rate?\". Great question! Let's think about this"
" for a moment. If our `rate:` opt signifies the speed with which the sample is"
" played back, `1` being normal speed, `2` being double speed, `0.5` being half"
" speed, `-1` must mean backwards! Let's try it on a snare. First, play it back"
" at the normal rate:"
msgstr ""

#: A.17-sample-stretching.md:63
#, no-wrap
msgid "sample :elec_filt_snare, rate: 1"
msgstr ""

#: A.17-sample-stretching.md:65
msgid "Now, play it backwards:"
msgstr "Jetzt lass es uns rückwärts abspielen:"

#: A.17-sample-stretching.md:67
#, no-wrap
msgid "sample :elec_filt_snare, rate: -1"
msgstr ""

#: A.17-sample-stretching.md:69
msgid ""
"Of course, you can play it backwards twice as fast with a rate of `-2` or back"
"wards at half speed with a rate of `-0.5`. Now, play around with different neg"
"ative rates and have fun. It's particularly amusing with the `:misc_burp` samp"
"le!"
msgstr ""

#: A.17-sample-stretching.md:75
msgid "Sample, Rate and Pitch"
msgstr ""

#: A.17-sample-stretching.md:77
msgid ""
"One of the effects of rate modification on samples is that faster rates result"
" in the sample sounding higher in pitch and slower rates result in the sample "
"sounding lower in pitch. Another place you may have heard this effect in every"
" day life is when you're cycling or driving past a beeping pedestrian crossing"
" - as you're heading towards the sound source the pitch is higher than when yo"
"u're moving away from the sound - the so-called Doppler effect. Why is this?"
msgstr ""

#: A.17-sample-stretching.md:85
msgid ""
"Let's consider a simple beep which is represented by a sine wave. If we use an"
" oscilloscope to plot a beep, we'll see something like Figure A. If we plot a "
"beep an octave higher, we'll see Figure B and an octave lower will look like F"
"igure C. Notice that the waves of higher notes are more compact and the waves "
"of lower notes are more spread out."
msgstr ""

#: A.17-sample-stretching.md:91
msgid ""
"A sample of a beep is nothing more than a lot of numbers (x, y, coordinates) w"
"hich when plotted onto a graph will re-draw the original curves. See figure D "
"where each circle represents a coordinate. To turn the coordinates back into a"
"udio, the computer works through each x value and sends the corresponding y va"
"lue to the speakers. The trick here is that the rate at which the computer wor"
"ks through the x numbers does not have to be the same as the rate with which t"
"hey were recorded. In other words, the space (representing an amount of time) "
"between each circle can be stretched or compressed. So, if the computer walks "
"through the x values faster than the original rate, it will have the effect of"
" squashing the circles closer together which will result in a higher sounding "
"beep. It will also make the beep shorter as we will work through all the circl"
"es faster. This is shown in Figure E."
msgstr ""

#: A.17-sample-stretching.md:105
msgid ""
"Finally, one last thing to know is that a mathematician called Fourier proved "
"that any sound is actually lots and lots of sine waves all combined together. "
"Therefore, when we compress and stretch any recorded sound we're actually stre"
"tching and compressing many sine waves all at the same time in exactly this ma"
"nner."
msgstr ""

#: A.17-sample-stretching.md:111
msgid "Pitch Bending"
msgstr ""

#: A.17-sample-stretching.md:113
msgid ""
"As we've seen, using a faster rate will make the sound higher in pitch and a s"
"lower rate will make the sound lower in pitch. A very simple and useful trick "
"is to know that doubling the rate actually results in the pitch being an octav"
"e higher and inversely halving the rate results in the pitch being an octave l"
"ower. This means that for melodic samples, playing it alongside itself at doub"
"le/half rates actually sounds rather nice:"
msgstr ""

#: A.17-sample-stretching.md:121
#, no-wrap
msgid ""
"sample :bass_trance_c, rate: 1\n"
"sample :bass_trance_c, rate: 2\n"
"sample :bass_trance_c, rate: 0.5"
msgstr ""

#: A.17-sample-stretching.md:127
msgid ""
"However, what if we just want to alter the rate such that the pitch goes up on"
"e semitone (one note up on a piano)? Sonic Pi makes this very easy via the `rp"
"itch:` opt:"
msgstr ""

#: A.17-sample-stretching.md:131
#, no-wrap
msgid ""
"sample :bass_trance_c\n"
"sample :bass_trance_c, rpitch: 3\n"
"sample :bass_trance_c, rpitch: 7"
msgstr ""

#: A.17-sample-stretching.md:137
msgid ""
"If you take a look at the log on the right, you'll notice that an `rpitch:` of"
" `3` actually corresponds to a rate of `1.1892` and a `rpitch:` of `7` corresp"
"onds to a rate of `1.4983`. Finally, we can even combine `rate:` and `rpitch:`"
" opts:"
msgstr ""

#: A.17-sample-stretching.md:142
#, no-wrap
msgid ""
"sample :ambi_choir, rate: 0.25, rpitch: 3\n"
"sleep 3\n"
"sample :ambi_choir, rate: 0.25, rpitch: 5\n"
"sleep 2\n"
"sample :ambi_choir, rate: 0.25, rpitch: 6\n"
"sleep 1\n"
"sample :ambi_choir, rate: 0.25, rpitch: 1"
msgstr ""

#: A.17-sample-stretching.md:155
msgid ""
"Let's take a look at a simple piece which combines these ideas. Copy it into a"
"n empty Sonic Pi buffer, hit play, listen to it for a while and then use it as"
" a starting point for your own piece. See how much fun it is to manipulate the"
" playback rate of samples. As an added exercise try recording your own sounds "
"and play around with the rate to see what crazy sounds you can make."
msgstr ""

#: A.17-sample-stretching.md:162
#, no-wrap
msgid ""
"live_loop :beats do\n"
"  sample :guit_em9, rate: [0.25, 0.5, -1].choose, amp: 2\n"
"  sample :loop_garzul, rate: [0.5, 1].choose\n"
"  sleep 8\n"
"end\n"
" \n"
"live_loop :melody do\n"
"  oct = [-1, 1, 2].choose * 12\n"
"  with_fx :reverb, amp: 2 do\n"
"    16.times do\n"
"      n = (scale 0, :minor_pentatonic).choose\n"
"      sample :bass_voxy_hit_c, rpitch: n + 4 + oct\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"
msgstr ""
"live_loop :beats do\n"
"  sample :guit_em9, rate: [0.25, 0.5, -1].choose, amp: 2\n"
"  sample :loop_garzul, rate: [0.5, 1].choose\n"
"  sleep 8\n"
"end\n"
" \n"
"live_loop :melody do\n"
"  oct = [-1, 1, 2].choose * 12\n"
"  with_fx :reverb, amp: 2 do\n"
"    16.times do\n"
"      n = (scale 0, :minor_pentatonic).choose\n"
"      sample :bass_voxy_hit_c, rpitch: n + 4 + oct\n"
"      sleep 0.125\n"
"    end\n"
"  end\n"
"end"

#: A.18-additive-synthesis.md:1
msgid "A.18 Sound Design - Additive Synthesis"
msgstr ""

#: A.18-additive-synthesis.md:3
msgid "Additive Synthesis"
msgstr ""

#: A.18-additive-synthesis.md:5
msgid ""
"This is the first of a short series of articles on how to use Sonic Pi for sou"
"nd design. We'll be taking a quick tour of a number of different techniques av"
"ailable for you to craft your own unique sound. The first technique we'll look"
" at is called *additive synthesis*. This may sound complicated - but if we exp"
"and each word slightly the meaning pops right out. Firstly, additive means a c"
"ombination of things and secondly synthesis means to create sound. Additive sy"
"nthesis therefore means nothing more complicated than *combining existing soun"
"ds to create new ones*. This synthesis technique dates back a very long time -"
" for example, pipe organs in the middle ages had lots of slightly different so"
"unding pipes which you could enable or disable with stops. Pulling out the sto"
"p for a given pipe 'added it to the mix' making the sound richer and more comp"
"lex. Now, let's see how we can pull out all the stops with Sonic Pi."
msgstr ""

#: A.18-additive-synthesis.md:21
msgid "Simple Combinations"
msgstr ""

#: A.18-additive-synthesis.md:23
msgid ""
"Let's start with the most basic sound there is - the humble pure-toned sine wa"
"ve:"
msgstr ""

#: A.18-additive-synthesis.md:26
#, no-wrap
msgid "synth :sine, note: :d3"
msgstr ""

#: A.18-additive-synthesis.md:30
msgid "Now, let's see how this sounds combined with a square wave:"
msgstr ""

#: A.18-additive-synthesis.md:32
#, no-wrap
msgid ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3"
msgstr ""

#: A.18-additive-synthesis.md:37
msgid ""
"Notice how the two sounds combine to form a new, richer sound. Of course, we d"
"on't have to stop there, we can add as many sounds as we need. However, we nee"
"d to be careful with how many sounds we add together. Just like when we mix pa"
"ints to create new colours, adding too many colours will result in a messy bro"
"wn, similarly - adding too many sounds together will result in a muddy sound."
msgstr ""

#: A.18-additive-synthesis.md:45
msgid "Blending"
msgstr ""

#: A.18-additive-synthesis.md:47
msgid ""
"Let's add something to make it sound a little brighter. We could use a triangl"
"e wave at an octave higher (for that high bright sound) yet only play it at am"
"p `0.4` so it adds something extra to the sound rather than taking it over:"
msgstr ""

#: A.18-additive-synthesis.md:52
#, no-wrap
msgid ""
"synth :sine, note: :d3\n"
"synth :square, note: :d3\n"
"synth :tri, note: :d4, amp: 0.4"
msgstr ""

#: A.18-additive-synthesis.md:58
msgid ""
"Now, try creating your own sounds by combining 2 or more synths at different o"
"ctaves and amplitudes. Also, note that you can play around with each synth's o"
"pts to modify each source sound before it is mixed in for even more combinatio"
"ns of sounds."
msgstr ""

#: A.18-additive-synthesis.md:64
msgid "Detuning"
msgstr "Verstimmung"

#: A.18-additive-synthesis.md:66
msgid ""
"So far, when combining our different synths we've used either the same pitch o"
"r switched octave. How might it sound if we didn't stick to octaves but instea"
"d chose a slightly higher or lower note? Let's try it:"
msgstr ""

#: A.18-additive-synthesis.md:70
#, no-wrap
msgid ""
"detune = 0.7\n"
"synth :square, note: :e3\n"
"synth :square, note: :e3 + detune"
msgstr ""
"detune = 0.7\n"
"synth :square, note: :e3\n"
"synth :square, note: :e3 + detune"

#: A.18-additive-synthesis.md:76
msgid ""
"If we detune our square waves by 0.7 notes we hear something that perhaps does"
"n't sound in tune or correct - a 'bad' note. However, as we move closer to 0 i"
"t will sound less and less out of tune as the pitches of the two waves get clo"
"ser and more similar. Try it for yourself! Change the `detune:` opt value from"
" `0.7` to `0.5` and listen to the new sound. Try `0.2`, `0.1`, `0.05`, `0`. Ea"
"ch time you change the value, take a listen and see if you can hear how the so"
"und is changing. Notice that low detune values such as `0.1` produce a really "
"nice 'thick' sound, with both slightly different pitches interacting with each"
" other in interesting, often surprising, ways."
msgstr ""

#: A.18-additive-synthesis.md:87
#, fuzzy
msgid ""
"Some of the built-in synths already include a detune option that does exactly "
"this in one synth. Try playing with the `detune:` opt of `:dsaw`, `:dpulse` an"
"d `:dtri`."
msgstr ""
"Einige der integrierten Synths haben bereits eine Option zur Verstimmung, die "
"das ganze für einem Synth machen. Probiere die Option `detune:` von `:dsaw`, `"
":dpulse` und `:dtri` aus."

#: A.18-additive-synthesis.md:92
msgid "Amplitude shaping"
msgstr "Amplitudenmodellierung"

#: A.18-additive-synthesis.md:94
msgid ""
"Another way we can finely craft our sound is to use a different envelope and o"
"ptions for each synth trigger. For example this will allow you to make some as"
"pects of the sound percussive and other aspects ring out for a period of time."
msgstr ""

#: A.18-additive-synthesis.md:99
#, no-wrap
msgid ""
"detune = 0.1\n"
"synth :square, note: :e1, release: 2\n"
"synth :square, note: :e1 + detune, amp: 2, release: 2\n"
"synth :gnoise, release: 2, amp: 1, cutoff: 60\n"
"synth :gnoise, release: 0.5, amp: 1, cutoff: 100\n"
"synth :noise, release: 0.2, amp: 1, cutoff: 90"
msgstr ""
"detune = 0.1\n"
"synth :square, note: :e1, release: 2\n"
"synth :square, note: :e1 + detune, amp: 2, release: 2\n"
"synth :gnoise, release: 2, amp: 1, cutoff: 60\n"
"synth :gnoise, release: 0.5, amp: 1, cutoff: 100\n"
"synth :noise, release: 0.2, amp: 1, cutoff: 90"

#: A.18-additive-synthesis.md:108
msgid ""
"In the example above I have mixed in a noisy percussive element to the sound a"
"long with some more persistent background rumbling. This was achieved firstly "
"by using two noise synths with middling cutoff values (`90` and `100`) using s"
"hort release times along with a noise with a longer release time but with a lo"
"w cutoff value (which makes the noise less crisp and more rumbly.)"
msgstr ""

#: A.18-additive-synthesis.md:117
msgid ""
"Let's combine all these techniques to see if we can use additive synthesis to "
"re-create a basic bell sound. I've broken this example into four sections. Fir"
"stly we have the 'hit' section which is the initial onset part of the bell sou"
"nd - so uses a short envelope (e.g. a `release:` of around `0.1`). Next we hav"
"e the long ringing section in which I'm using the pure sound of the sine wave."
" Notice that I'm often increasing the note by roughly `12` and `24` which are "
"the number of notes in one and two octaves. I have also thrown in a couple of "
"low sine waves to give the sound some bass and depth. Finally, I used `define`"
" to wrap my code in a function which I can then use to play a melody. Try play"
"ing your own melody and also messing around with the contents of the `:bell` f"
"unction until you create your own crazy sound to play with!"
msgstr ""

#: A.18-additive-synthesis.md:130
#, no-wrap
msgid ""
"define :bell do |n|\n"
"  # Triangle waves for the 'hit'\n"
"  synth :tri, note: n - 12, release: 0.1\n"
"  synth :tri, note: n + 0.1, release: 0.1\n"
"  synth :tri, note: n - 0.1, release: 0.1\n"
"  synth :tri, note: n, release: 0.2\n"
"  # Sine waves for the 'ringing'\n"
"  synth :sine, note: n + 24, release: 2\n"
"  synth :sine, note: n + 24.1, release: 2\n"
"  synth :sine, note: n + 24.2, release: 0.5\n"
"  synth :sine, note: n + 11.8, release: 2\n"
"  synth :sine, note: n, release: 2\n"
"  # Low sine waves for the bass\n"
"  synth :sine, note: n - 11.8, release: 2\n"
"  synth :sine, note: n - 12, release: 2\n"
"end\n"
"# Play a melody with our new bell!\n"
"bell :e3\n"
"sleep 1\n"
"bell :c2\n"
"sleep 1\n"
"bell :d3\n"
"sleep 1\n"
"bell :g2"
msgstr ""

#: A.19-subtractive-synthesis.md:1
msgid "A.19 Sound Design - Subtractive Synthesis"
msgstr ""

#: A.19-subtractive-synthesis.md:3
msgid "Subtractive Synthesis"
msgstr ""

#: A.19-subtractive-synthesis.md:5
msgid ""
"This is the second in a series of articles on how to use Sonic Pi for sound de"
"sign. Last month we looked at additive synthesis which we discovered was the s"
"imple act of playing multiple sounds at the same time to make a new combined s"
"ound. For example we could combine different sounding synths or even the same "
"synth at different pitches to build a new complex sound from simple ingredient"
"s. This month we'll look at a new technique commonly called *subtractive synth"
"esis* which is simply the act of taking an existing complex sound and removing"
" parts of it to create something new. This is a technique which is commonly as"
"sociated with the sound of analog synthesisers of the 1960s and 1970s but also"
" with the recent renaissance of modular analog synths through popular standard"
"s such as Eurorack."
msgstr ""

#: A.19-subtractive-synthesis.md:18
msgid ""
"Despite this sounding like a particularly complicated and advanced technique, "
"Sonic Pi makes it surprisingly simple and easy - so let's dive right in."
msgstr ""

#: A.19-subtractive-synthesis.md:22
msgid "Complex Source Signal"
msgstr ""

#: A.19-subtractive-synthesis.md:24
msgid ""
"For a sound to work well with subtractive synthesis, it typically needs to be "
"fairly rich and interesting. This doesn't mean we need something hugely comple"
"x - in fact, just a standard `:square` or `:saw` wave will do:"
msgstr ""

#: A.19-subtractive-synthesis.md:29
#, no-wrap
msgid "synth :saw, note: :e2, release: 4"
msgstr "synth :saw, note: :e2, release: 4"

#: A.19-subtractive-synthesis.md:33
msgid ""
"Notice that this sound is already pretty interesting and contains many differe"
"nt frequencies above `:e2` (the second E on a piano) which add to create the t"
"imbre. If that didn't make much sense to you, try comparing it with the `:beep"
"`:"
msgstr ""

#: A.19-subtractive-synthesis.md:38
#, no-wrap
msgid "synth :beep, note: :e2, release: 4"
msgstr "synth :beep, note: :e2, release: 4"

#: A.19-subtractive-synthesis.md:42
msgid ""
"As the `:beep` synth is just a sine wave, you'll hear a much purer tone and on"
"ly at `:e2` and none of the high crispy/buzzy sounds which you heard in the `:"
"saw`. It's this buzziness and variation from a pure sine wave that we can play"
" with when we use subtractive synthesis."
msgstr ""

#: A.19-subtractive-synthesis.md:49
msgid ""
"Once we have our raw source signal, the next step is to pass it through a filt"
"er of some kind which will modify the sound by removing or reducing parts of i"
"t. One of the most common filters used for subtractive synthesis is something "
"called a low pass filter. This will allow all the low parts of the sound throu"
"gh but will reduce or remove the higher parts. Sonic Pi has a powerful yet sim"
"ple to use FX system that includes a low pass filter, called `:lpf`. Let's pla"
"y with it:"
msgstr ""

#: A.19-subtractive-synthesis.md:57
#, no-wrap
msgid ""
"with_fx :lpf, cutoff: 100 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"
msgstr ""
"with_fx :lpf, cutoff: 100 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"

#: A.19-subtractive-synthesis.md:63
msgid ""
"If you listen carefully you'll hear how some of that buzziness and crispiness "
"has been removed. In fact, all the frequencies in the sound above note `100` h"
"ave been reduced or removed and only the ones below are still present in the s"
"ound. Try changing that `cutoff:` point to lower notes, say `70` and then `50`"
" and compare the sounds."
msgstr ""

#: A.19-subtractive-synthesis.md:69
msgid ""
"Of course, the `:lpf` isn't the only filter you can use to manipulate the sour"
"ce signal. Another important FX is the high pass filter referred to as `:hpf` "
"in Sonic Pi. This does the opposite to `:lpf` in that it lets the high parts o"
"f the sound through and cuts off the low parts."
msgstr ""

#: A.19-subtractive-synthesis.md:74
#, no-wrap
msgid ""
"with_fx :hpf, cutoff: 90 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"
msgstr ""
"with_fx :hpf, cutoff: 90 do\n"
"  synth :saw, note: :e2, release: 4\n"
"end"

#: A.19-subtractive-synthesis.md:80
msgid ""
"Notice how this sounds much more buzzy and raspy now that all the low frequenc"
"y sounds have been removed. Play around with the cutoff value - notice how low"
"er values let more of the original bass parts of the source signal through and"
" higher values sound increasingly tinny and quiet."
msgstr ""

#: A.19-subtractive-synthesis.md:86
msgid "Low Pass Filter"
msgstr ""

#: A.19-subtractive-synthesis.md:88
msgid ""
"![Varying amounts of low pass filtering](../../../etc/doc/images/tutorial/arti"
"cles/A.19-subtractive-synthesis/subtractive-synthesis-waveforms.png)"
msgstr ""

#: A.19-subtractive-synthesis.md:90
msgid ""
"The low pass filter is such an important part of every subtractive synthesis t"
"oolkit that it's worth taking a deeper look at how it works. This diagram show"
"s the same sound wave (the `:prophet` synth) with varying amounts of filtering"
". At the top, section A shows the audio wave with no filtering. Notice how the"
" wave form is very pointy and contains lots of sharp edges. It is these hard, "
"sharp angles that produce the high crispy/buzzy parts of the sound. Section B "
"shows the low pass filter in action - notice how it is less pointy and more ro"
"unded than the wave form above. This means that the sound will have fewer high"
" frequencies giving it a more mellow rounded feel. Section C shows the low pas"
"s filter with a fairly low cutoff value - this means that even more of the hig"
"h frequencies have been removed from the signal resulting in an even softer, r"
"ounder wave form. Finally, notice how the size of the wave form, which represe"
"nts the amplitude, decreases as we move from A to C. Subtractive synthesis wor"
"ks by removing parts of the signal which means that the overall amplitude is r"
"educed as the amount of filtering that is taking place increases."
msgstr ""

#: A.19-subtractive-synthesis.md:109
msgid "Filter Modulation"
msgstr "Filter Modulation"

#: A.19-subtractive-synthesis.md:111
msgid ""
"So far we've just produced fairly static sounds. In other words, the sound doe"
"sn't change in any way for the entirety of its duration. Often you might want "
"some movement in the sound to give the timbre some life. One way to achieve th"
"is is via filter modulation - changing the filter's options through time. Luck"
"ily Sonic Pi gives you powerful tools to manipulate an FX's opts through time."
" For example, you can set a slide time to each modulatable opt to specify how "
"long it should take for the current value to linearly slide to the target valu"
"e:"
msgstr ""

#: A.19-subtractive-synthesis.md:120
#, no-wrap
msgid ""
"with_fx :lpf, cutoff: 50 do |fx|\n"
"  control fx, cutoff_slide: 3, cutoff: 130\n"
"  synth :prophet, note: :e2, sustain: 3.5\n"
"end"
msgstr ""
"with_fx :lpf, cutoff: 50 do |fx|\n"
"  control fx, cutoff_slide: 3, cutoff: 130\n"
"  synth :prophet, note: :e2, sustain: 3.5\n"
"end"

#: A.19-subtractive-synthesis.md:127
msgid ""
"Let's take a quick look at what's going on here. Firstly we start an `:lpf` FX"
" block as normal with an initial `cutoff:` of a low `50`. However, the first l"
"ine also finishes with the strange `|fx|` at the end. This is an optional part"
" of the `with_fx` syntax which allows you to directly name and control the run"
"ning FX synth. Line 2 does exactly this and controls the FX to set the `cutoff"
"_slide:` opt to 3 and the new target `cutoff:` to be `130`. The FX will now st"
"art sliding the `cutoff:` opt's value from `50` to `130` over a period of 3 be"
"ats. Finally we also trigger a source signal synth so we can hear the effect o"
"f the modulated low pass filter."
msgstr ""

#: A.19-subtractive-synthesis.md:140
msgid ""
"This is just a very basic taster of what's possible when you use filters to mo"
"dify and change a source sound. Try playing with Sonic Pi's many built-in FX t"
"o see what crazy sounds you can design. If your sound feels too static, rememb"
"er you can start modulating the options to create some movement."
msgstr ""

#: A.19-subtractive-synthesis.md:146
msgid ""
"Let's finish by designing a function which will play a new sound created with "
"subtractive synthesis. See if you can figure out what's going on here - and fo"
"r the advanced Sonic Pi readers out there - see if you can work out why I wrap"
"ped everything inside a call to `at` (please send answers to @samaaron on Twit"
"ter)."
msgstr ""

#: A.19-subtractive-synthesis.md:152
#, no-wrap
msgid ""
"define :subt_synth do |note, sus|\n"
"  at do\n"
"    with_fx :lpf, cutoff: 40, amp: 2 do |fx|\n"
"      control fx, cutoff_slide: 6, cutoff: 100\n"
"      synth :prophet, note: note, sustain: sus\n"
"    end\n"
"    with_fx :hpf, cutoff_slide: 0.01 do |fx|\n"
"      synth :dsaw, note: note + 12, sustain: sus\n"
"      (sus * 8).times do\n"
"        control fx, cutoff: rrand(70, 110)\n"
"        sleep 0.125\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"subt_synth :e1, 8\n"
"sleep 8\n"
"subt_synth :e1 - 4, 8"
msgstr ""
"define :subt_synth do |note, sus|\n"
"  at do\n"
"    with_fx :lpf, cutoff: 40, amp: 2 do |fx|\n"
"      control fx, cutoff_slide: 6, cutoff: 100\n"
"      synth :prophet, note: note, sustain: sus\n"
"    end\n"
"    with_fx :hpf, cutoff_slide: 0.01 do |fx|\n"
"      synth :dsaw, note: note + 12, sustain: sus\n"
"      (sus * 8).times do\n"
"        control fx, cutoff: rrand(70, 110)\n"
"        sleep 0.125\n"
"      end\n"
"    end\n"
"  end\n"
"end\n"
"subt_synth :e1, 8\n"
"sleep 8\n"
"subt_synth :e1 - 4, 8"

#: A.20-creative-coding-in-the-classroom.md:1
msgid "A.20 Creative coding in the classroom with Sonic Pi"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:3
msgid "Creative coding in the classroom with Sonic Pi"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:5
msgid ""
"(This article was published in [issue 9 of the Hello World Magazine](https://h"
"elloworld.raspberrypi.org/issues/9))"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:7
msgid ""
"Code is one of the most creative media that humans have created. The initially"
" obscure symbols of parentheses and lambdas are not just deeply rooted in scie"
"nce and mathematics, they are the closest we have managed to get to casting th"
"e same kind of magical spells as Gandalf and Harry Potter. I believe that this"
" provides a powerful means of engagement in our learning spaces. Through the m"
"agic of code we are able to conjure up individually meaningful stories and lea"
"rning experiences."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:15
msgid ""
"We are surrounded by magical experiences. From the sleight of hand of a stage "
"magician making the ball disappear into thin air, to the wonder of seeing your"
" favourite band perform on a big stage. It is these \"wow\" moments that inspire"
" us to pick up a magic book and learn the French Drop or to start jamming powe"
"r chords on an old guitar. How might we create similarly deep and lasting sens"
"es of wonder that will motivate people to practice and learn the fundamentals "
"of programming?"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:23
msgid "Musical Engines and Notation"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:25
msgid ""
"The histories of music and computers have been intricately woven together sinc"
"e the inception of computing machines, or \"engines\" as Charles Babbage's power"
"ful analytical engine was called. Back in 1842 the Mathematician Ada Lovelace,"
" who worked very closely with Babbage, saw the creative potential of these eng"
"ines. Whilst these first engines had originally been designed to accurately so"
"lve hard maths problems, Ada dreamt about making music with them:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:33
msgid ""
"\"..the engine might compose elaborate and scientific pieces of music of any de"
"gree of complexity or extent.\" Ada Lovelace, 1842."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:36
msgid ""
"Of course, today in 2019 much of our music, regardless of genre, has either be"
"en composed, produced or mastered with a digital computer. Ada's dream came tr"
"ue. It is even possible to trace the history back even further. If you see cod"
"ing as the art of writing sequences of special symbols that instruct a compute"
"r to do specific things, then musical composition is a very similar practice. "
"In Western music, the symbols are black dots positioned on a stave of lines th"
"at tell the musician which notes to play and when. Intriguingly, if we trace t"
"he roots of Western music notation back to the Italian Benedictine monk, Guido"
" d'Arezzo, we find that the dots and lines system that modern orchestras use i"
"s just one of a number of notation systems he worked on. Some of the others we"
"re much closer to what we might now see as code."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:50
msgid ""
"In education, magical meaningful experiences with computers and programming la"
"nguages have been explored since the late '60s. Computer education pioneers Se"
"ymour Papert, Marvin Minsky and Cynthia Solomon explored simple Lisp-based lan"
"guages that moved pens over large pieces of paper. With just a few simple comm"
"ands it was possible to program the computer to draw any picture. They even ex"
"perimented by extending their Logo language from drawing to music. Papert wrot"
"e about learning through experiencing the reconstruction of knowledge rather t"
"han its transmission. Getting people to play with things directly was an impor"
"tant part of his group's work."
msgstr ""
"In der Wissenschaft werden seit den späten 60er Jahren magische, "
"bedeutungsvolle Erfahrungen mit Computern und Programmiersprachen erforscht. "
"Die Pioniere des Computerunterrichts Seymour Papert, Marvin Minsky und "
"Cynthia Solomon erforschten einfache Lisp-basierte Sprachen, die Stifte über "
"große Papierstücke bewegten. Mit nur wenigen einfachen Befehlen war es "
"möglich, den Computer so zu programmieren, dass er jedes beliebige Bild "
"zeichnete. Sie experimentierten sogar damit, ihre Logo-Sprache vom Zeichnen "
"auf Musik auszuweiten. Papert schrieb über das Lernen durch die Erfahrung "
"der Rekonstruktion von Wissen und nicht durch dessen Vermittlung. Die "
"Menschen dazu zu bringen, direkt mit den Dingen zu experimentieren, war ein "
"wichtiger Teil der Arbeit seiner Gruppe."

#: A.20-creative-coding-in-the-classroom.md:62
msgid "Sonic Pi Performances"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:64
msgid ""
"![Jylda Live Coding in the Sage Gateshead](../../../etc/doc/images/tutorial/ar"
"ticles/A.20-creative-coding-in-the-classroom/jylda-small.png) Jylda and Sam Aa"
"ron perform at the Thinking Digital Conference in the Sage Gateshead. Photo cr"
"edit: TyneSight Photos."
msgstr ""
"![Jylda Live Coding in the Sage Gateshead](../../../etc/doc/images/tutorial/"
"articles/A.20-creative-coding-in-the-classroom/jylda-small.png) Jylda und "
"Sam Aaron treten auf der Thinking Digital Conference im Sage Gateshead auf. "
"Foto: TyneSight Photos."

#: A.20-creative-coding-in-the-classroom.md:68
msgid ""
"Sonic Pi has been used to perform in a wide range of venues such as school hal"
"ls, nightclubs, outdoor stages at musical festivals, college chapels and prest"
"igious music venues. For example the amazing Convo project which brought 1000 "
"children together in the Royal Albert Hall to perform an ambitious new composi"
"tion by composer Charlotte Harding. The piece was written for traditional inst"
"ruments, choirs, percussion and Sonic Pi code. The pop-artist Jylda also perfo"
"rmed with Sonic Pi in the Sage Gateshead for the Thinking Digital Conference, "
"where she created a unique live-coded improvised remix of her song Reeled."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:78
msgid ""
"![Sonic Pi in the Royal Albert Hall](../../../etc/doc/images/tutorial/articles"
"/A.20-creative-coding-in-the-classroom/convo-small.png) Sonic Pi used as one o"
"f the instruments as part of Convo at the Royal Albert Hall. Photo credit: Pet"
"e Jones."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:83
msgid "Live coding in the classroom"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:85
msgid ""
"Sonic Pi is a code-based music creation and performance tool that builds on al"
"l of these ideas. Unlike the majority of computing education software, it is b"
"oth simple enough to use for education and also powerful enough for profession"
"als. It has been used to perform in international music festivals, used to com"
"pose in a range of styles from classical, EDM and heavy metal, and was even re"
"viewed in the Rolling Stone magazine. It has a diverse community of over 1.5 m"
"illion live coders with a variety of backgrounds all learning and sharing thei"
"r ideas and thoughts through the medium of code. It is free to download for Ma"
"c, PC and Raspberry Pi and includes a friendly tutorial that assumes you know "
"nothing about either code or music."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:97
msgid ""
"Sonic Pi was initially conceived as a response to the UK's newly released Comp"
"uting curriculum in 2014. The goal was to find a motivating and fun way to tea"
"ch the fundamentals of programming. It turns out that there is a lot in common"
" and it's huge fun to explain sequencing as melody, iteration as rhythm, condi"
"tionals as musical variety. I developed the initial designs and first iteratio"
"ns of the platform with Carrie Anne Philbin, who brought a teacher’s perspecti"
"ve to the project. Since then, Sonic Pi has undergone iterative improvements t"
"hanks to the feedback gained from observing learners and collaborating directl"
"y with educators in the classroom. A core design philosophy was to never add a"
" feature that couldn't be easily taught to a 10 year old child. This meant tha"
"t most ideas had to be heavily refined and reworked until they were simple eno"
"ugh. Making things simple whilst keeping them powerful continues to be the har"
"dest part of the project."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:112
msgid ""
"In order to provide the magical motivation, Sonic Pi's design was never limite"
"d to a pure focus on education. Ideally there would be famous musicians and pe"
"rformers using Sonic Pi as a standard instrument alongside guitars, drums, voc"
"als, synths, violins, etc. These performers would then act as motivational rol"
"e models demonstrating the creative potential of code. For this to be possible"
" sufficient focus and effort therefore had to be placed on making it a powerfu"
"l instrument whilst still keeping it simple enough for 10 year olds to pick up"
". In addition to educators, I also worked directly with a variety of different"
" artists in classrooms, art galleries, studios and venues in the early stages "
"of Sonic Pi’s development. This provided essential feedback which enabled Soni"
"c Pi to grow and ultimately flourish as a tool for creative expression."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:126
msgid ""
"There were a number of exciting and unexpected side effects of this dual focus"
" on education and professional musicians. Many of the features are beneficial "
"to both groups. For example, a lot of effort has been put into making error me"
"ssages more friendly and useful (rather than being a huge complicated mess of "
"jargon). This turns out to be very useful when you write a bug while performin"
"g in front of thousands of people. Additionally, functionality such as playing"
" studio quality audio samples, adding audio effects, providing access to live "
"audio from the microphone all turn out to make the learning experience more fu"
"n, rewarding and ultimately meaningful."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:137
msgid ""
"The Sonic Pi community continues to grow and share amazing code compositions, "
"lesson plans, musical algorithms, and much more. Much of this happens on our f"
"riendly forum in_thread (in-thread.sonic-pi.net) which is home to a very diver"
"se group of people that includes educators, musicians, programmers, artists an"
"d makers. It is a real joy to see people learn to use code to express themselv"
"es in new ways and for that in turn to inspire others to do the same."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:145
msgid "Some fun capabilities"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:147
msgid ""
"From a Computer Science perspective, Sonic Pi provides you with the building b"
"locks to teach you the basics as found in the UK's curriculum such as sequenci"
"ng, iteration, conditionals, functions, data structures, algorithms, etc. Howe"
"ver, it also builds on a number of important and relevant concepts which have "
"become adopted in mainstream industry such as concurrency, events, pattern mat"
"ching, distributed computing and determinism - all whilst keeping things simpl"
"e enough to explain to a 10 year old child."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:156
msgid "Getting started is as simple as:"
msgstr "Der Einstieg ist ganz einfach:"

#: A.20-creative-coding-in-the-classroom.md:162
msgid "A melody can be constructed with one more command, sleep:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:164
#, no-wrap
#, fuzzy
msgid ""
"play 70\n"
"sleep 1\n"
"play 72\n"
"sleep 0.5\n"
"play 75"
msgstr ""
"play 72\n"
"sleep 0.5\n"
"play 75\n"
"sleep 0.5\n"
"play 79"

#: A.20-creative-coding-in-the-classroom.md:172
msgid ""
"In this example, we play the note 70 (roughly the 70th note on a piano), wait "
"for 1 second, play note 72, wait for half a second and then play note 75. What"
"'s interesting here is that with just two commands we have access to pretty mu"
"ch all of Western notation (which notes to play and when) and learners can cod"
"e any melody they've ever heard. This leads to huge variety in expressive outc"
"omes whilst focussing on the same computing concept: sequencing in this case."
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:180
msgid ""
"Taking ideas from the professional music world, we can also play back any reco"
"rded sound. Sonic Pi can play any audio file on your computer but also has a n"
"umber of sounds built-in to make things easy to get started:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:189
msgid ""
"This code will play back the drum break which was a pillarstone to early hip-h"
"op, Drum and Bass and Jungle. For example, a number of early hip-hop artists p"
"layed this drum break back at half speed to give it a more laid-back feeling:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:198
msgid ""
"In the 90s a number of music scenes burst out of new technology which enabled "
"artists to take drum breaks like this apart and reassemble in a different orde"
"r. For example:"
msgstr ""

#: A.20-creative-coding-in-the-classroom.md:202
#, no-wrap
msgid ""
"live_loop :jungle do\n"
" sample :loop_amen, onset: pick\n"
" sleep 0.125\n"
"end"
msgstr ""
"live_loop :jungle do \n"
" sample :loop_amen, onset: pick\n"
" sleep 0.125\n"
"end"

#: A.20-creative-coding-in-the-classroom.md:209
msgid ""
"In this example we introduce a basic loop called :jungle which picks a random "
"drum hit from our audio sample, waits for an eighth of a second and then picks"
" another drum hit. This results in an endless stream of random drum beats to d"
"ance to whilst you experience what a loop is."
msgstr ""
"In diesem Beispiel führen wir eine einfache Schleife mit dem Namen `:jungle` e"
"in, die einen zufälligen Trommelschlag aus unserem Audio Sample auswählt, eine"
" achtel Sekunde wartet und dann einen weiteren Trommelschlag abspielt. Das Erg"
"ebnis ist eine endlose Folge von Trommelschlägen zum dabei Tanzen, während Du "
"erfährst, was eine Schleife ist."

#: B-Essential-Knowledge.md:1
#, fuzzy
msgid "B Essential Knowledge"
msgstr "Unentbehrliche Kenntnisse"

#: B-Essential-Knowledge.md:3
msgid "Essential Knowledge"
msgstr "Unentbehrliche Kenntnisse"

#: B-Essential-Knowledge.md:5
msgid ""
"This section will cover some very useful - in fact *essential* - knowledge for"
" getting the most out of your Sonic Pi experience."
msgstr ""
"In diesem Kapitel findest Du sehr nützliches - nein, *unentbehrliches* - Wisse"
"n, um das Bestmögliche aus Sonic Pi herauszuholen."

#: B-Essential-Knowledge.md:8
msgid ""
"We'll cover how to take advantage of the many keyboard shortcuts available to "
"you, how to share your work and some tips on performing with Sonic Pi."
msgstr ""
"Wir behandeln viele der verfügbaren Tastaturkürzel, zeigen, wie Du Deine Ergeb"
"nisse mit anderen teilen kannst, und geben Dir Tipps für Auftritte mit Sonic P"
"i."

#: B.01-Using-Shortcuts.md:1
#, fuzzy
msgid "B.1 Using Shortcuts"
msgstr "10.1 Tastaturkürzel"

#: B.01-Using-Shortcuts.md:3
msgid "Using Shortcuts"
msgstr "Tastaturkürzel"

#: B.01-Using-Shortcuts.md:5
msgid ""
"Sonic Pi is as much an instrument as a coding environment. Shortcuts can there"
"fore make playing Sonic Pi much more *efficient and natural* - especially when"
" you're playing live in front of an audience."
msgstr ""
"Sonic Pi ist zu gleichen Teilen Musikinstrument und Programmierumgebung. Mit T"
"astaturkürzeln kannst Du Sonic Pi viel *effizienter und natürlicher* spielen -"
" insbesondere, wenn Du live vor Publikum spielst."

#: B.01-Using-Shortcuts.md:9
msgid ""
"Much of Sonic Pi can be controlled through the keyboard. As you gain more fami"
"liarity working and performing with Sonic Pi, you'll likely start using the sh"
"ortcuts more and more. *I personally touch-type* (I recommend you consider lea"
"rning too) and find myself frustrated whenever I need to reach for the mouse a"
"s it slows me down. I therefore use all of these shortcuts on a very regular b"
"asis!"
msgstr ""
"Sehr vieles in Sonic Pi kann mit der Tastatur gesteuert werden. Je vertrauter "
"Du mit Sonic Pi wirst, umso mehr wirst Du diese Tastaturkürzel verwenden. *Ich"
" selbst tippe, ohne die Tastatur anzusehen* (und kann Dir nur empfehlen, das Z"
"ehnfingersystem auch zu lernen). Und ich bin jedes Mal frustriert, wenn ich zu"
"r Maus greifen muss, denn das macht mich langsam. Deshalb benutze ich ständig "
"Tastaturkürzel!"

#: B.01-Using-Shortcuts.md:16
msgid ""
"Therefore, if you learn the shortcuts, you'll learn to use your keyboard effec"
"tively and you'll be live coding like a pro in no time."
msgstr ""
"Wer die Tastaturkürzel beherrscht, kann auch seine Tastatur viel effektiver be"
"nutzen und in kürzester Zeit wirst Du programmieren wie ein Profi."

#: B.01-Using-Shortcuts.md:19
msgid ""
"However, *don't try and learn them all at once*, just try and remember the one"
"s you use most and then keep adding more to your practice."
msgstr ""
"*Versuche aber nicht, alle auf einmal zu lernen*, merke dir erst einmal die, "
"welche du am häufigsten brauchst und füge später weitere deinem Repertoire "
"hinzu."

#: B.01-Using-Shortcuts.md:22
msgid "Consistency across Platforms"
msgstr "Konsistenz auf verschiedenen Plattformen"

#: B.01-Using-Shortcuts.md:24
msgid ""
"Imagine you're learning the clarinet. You'd expect all clarinets of all makes "
"to have similar controls and fingerings. If they didn't, you'd have a tough ti"
"me switching between different clarinets and you'd be stuck to using just one "
"make."
msgstr ""
"Stell Dir vor, Du lernst Klarinette. Du kannst davon ausgehen, dass alle Klari"
"netten aller Marken gleiche Mechaniken und Fingersätze haben. Hätten sie das n"
"icht, könntest Du nicht ohne weiteres zwischen verschiedenen Klarinetten hin- "
"und her wechseln. Sondern müsstest immer bei einer Marke bleiben."

#: B.01-Using-Shortcuts.md:29
msgid ""
"Unfortunately the three major operating systems (Linux, Mac OS X and Windows) "
"come with their own standard defaults for actions such as cut and paste etc. S"
"onic Pi will try and honour these standards. However *priority is placed on co"
"nsistency across platforms* within Sonic Pi rather than attempting to conform "
"to a given platform's standards. This means that when you learn the shortcuts "
"whilst playing with Sonic Pi on your Raspberry Pi, you can move to the Mac or "
"PC and feel right at home."
msgstr ""
"Unglücklicherweise haben die drei wesentlichen Betriebssysteme (Linux, Mac OS "
"X und Windows) alle ihre eigenen typischen Tastaturkürzel für Aktionen wie z.B"
". Kopieren, Ausschneiden und Einfügen. Sonic Pi nutzt diese Standards wo immer"
" möglich. Jedoch *liegt die Priorität auf plattformübergreifender Konsistenz* "
"innerhalb von Sonic Pi, nicht auf dem Versuch, die Standards der jeweiligen Pl"
"attform vollumfänglich zu erfüllen. Das bedeutet, dass die in Sonic Pi auf dem"
" Raspberry Pi gelernten Tastaturkürzel ebenso auf einem Mac oder PC mit Sonic "
"Pi funktionieren."

#: B.01-Using-Shortcuts.md:37
msgid "Control and Meta"
msgstr "Control und Meta"

#: B.01-Using-Shortcuts.md:39
msgid ""
"Part of the notion of consistency is the naming of shortcuts. In Sonic Pi we u"
"se the names *Control* and *Meta* to refer to the two main combination keys. O"
"n all platforms *Control* is the same. However, on Linux and Windows, *Meta* i"
"s actually the *Alt* key while on Mac *Meta* is the *Command* key. For consist"
"ency we'll use the term *Meta* - just remember to map that to the appropriate "
"key on your operating system."
msgstr ""
"Für diese Konsistenz müssen wir auch die Namen der Tastaturkürzel entsprechend"
" auswählen. In Sonic Pi verwenden wir die Namen *Control* und *Meta* für die b"
"eiden wichtigsten Kombinationstasten. *Control* (*Ctrl* - oder *Strg* für \"Ste"
"uerung\" auf deutschen Tastaturen) ist auf allen Plattformen gleich. Auf Linux "
"und Windows ist *Meta* die *Alt*-Taste, während *Meta* auf dem Mac die *Comman"
"d*-Taste ist. Um konsistent zu bleiben, nutzen wir den Begriff *Meta* - diesem"
" musst Du mental die passende Taste Deines Betriebssystems zuordnen."

#: B.01-Using-Shortcuts.md:46
msgid "Abbreviations"
msgstr "Abkürzungen"

#: B.01-Using-Shortcuts.md:48
msgid ""
"To help keep things simple and readable, we'll use the abbreviations *C-* for "
"*Control* plus another key and *M-* for *Meta* plus another key. For example, "
"if a shortcut requires you to hold down both *Meta* and *r* we'll write that a"
"s `M-r`. The *-* just means \"at the same time as.\""
msgstr ""
"Um die Dinge einfach und lesbar zu halten, werden wir die Abkürzungen *C-* für"
" *Control* und eine weitere Taste sowie *M-* für *Meta* und eine weitere Taste"
" verwenden. Wenn ein Tastaturkürzel beispielsweise erfordert, dass Du *Meta* u"
"nd *r* gleichzeitig drückst, werden wir die Abkürzung `M-r` verwenden. Der Bin"
"destrich in der Mitte (*-*) bedeutet nur \"zur gleichen Zeit.\""

#: B.01-Using-Shortcuts.md:53
msgid "The following are some of the shortcuts I find most useful."
msgstr "Hier sind ein paar der Tastaturkürzel, die ich am nützlichsten finde."

#: B.01-Using-Shortcuts.md:55
msgid "Stopping and starting"
msgstr "Starten und Stoppen"

#: B.01-Using-Shortcuts.md:57
msgid ""
"Instead of always reaching for the mouse to run your code, you can simply pres"
"s `M-r`. Similarly, to stop running code you can press `M-s`."
msgstr ""
"Du musst nicht immer zur Maus greifen, um Deinen Code auszuführen. Drücke stat"
"tdessen einfach `M-r` zum Abspielen. Mit `M-s` stoppst Du die Musik."

#: B.01-Using-Shortcuts.md:60 B.02-Shortcut-Cheatsheet.md:56
msgid "Navigation"
msgstr "Navigation"

#: B.01-Using-Shortcuts.md:62
msgid ""
"I'm really lost without the navigation shortcuts. I therefore highly recommend"
" you spend the time to learn them. These shortcuts also work extremely well wh"
"en you've learned to touch type as they use the standard letters rather than r"
"equiring you to move your hand to the mouse or the arrow keys on your keyboard"
"."
msgstr ""
"Ohne die Tastenkürzel zur Navigation bin ich verloren. Deshalb empfehle ich Di"
"r dringend, diese Kürzel zu lernen. Sie funktionieren besonders gut, wenn Du d"
"as Zehnfingersystem schon halbwegs beherrschst, da sie normale Buchstaben verw"
"enden - so musst Du Deine Hand nicht zur Maus oder zu den Pfeiltasten bewegen."

#: B.01-Using-Shortcuts.md:68
msgid ""
"You can move to the beginning of the line with `C-a`, the end of the line with"
" `C-e`, up a line with `C-p`, down a line with `C-n`, forward a character with"
" `C-f`, and back a character with `C-b`. You can even delete all the character"
"s from the cursor to the end of the line with `C-k`."
msgstr ""
"Mit `C-a` springst Du an den Anfang, mit `C-e` ans Ende einer Zeile. Eine Zeil"
"e nach oben geht es mit `C-p`, eine nach unten mit `C-n`, ein Zeichen vorwärts"
" mit `C-f` und eines nach hinten mit `C-b`. Du kannst auch alle Zeichen von de"
"r aktuellen Cursorposition bis zum Ende der Zeile mit `C-k` löschen."

#: B.01-Using-Shortcuts.md:74
msgid "Tidy Code"
msgstr "Code aufräumen"

#: B.01-Using-Shortcuts.md:76
msgid "To auto-align your code simply press `M-m`."
msgstr "Um Deinen Code sauber einzurücken, drücke `M-m`."

#: B.01-Using-Shortcuts.md:78
msgid "Help System"
msgstr "Hilfesystem"

#: B.01-Using-Shortcuts.md:80
msgid ""
"To toggle the help system you can press `M-i`. However, a much more useful sho"
"rtcut to know is `C-i` which will look up the word underneath the cursor and d"
"isplay the docs if it finds anything. Instant help!"
msgstr ""
"Zum Hilfesystem kommst Du mit `M-i`. Noch hilfreicher ist allerdings `C-i`, da"
"mit wird Dir für das Wort, auf dem der Cursor gerade steht, sofort die passend"
"e Stelle in der Dokumentation gezeigt. Sofortige Hilfe!"

#: B.01-Using-Shortcuts.md:84
#, fuzzy
msgid "For a full list take a look at section B.2 Shortcut Cheatsheet."
msgstr ""
"Eine Liste aller Tastaturkürzel ist in Kapitel 10.2 \"Cheatsheet für Tastenkürz"
"el\" enthalten."

#: B.02-Shortcut-Cheatsheet.md:1
#, fuzzy
msgid "B.2 Shortcut Cheatsheet"
msgstr "10.2 Cheatsheet für Tastaturkürzel"

#: B.02-Shortcut-Cheatsheet.md:3
msgid "Shortcut Cheatsheet"
msgstr "Cheatsheet für Tastaturkürzel"

#: B.02-Shortcut-Cheatsheet.md:5
#, fuzzy
msgid ""
"The following is a summary of the main shortcuts available within Sonic Pi. Pl"
"ease see Section B.1 for motivation and background."
msgstr ""
"In diesem Abschnitt findest Du eine Zusammenfassung der wichtigsten Tastenkürz"
"el von Sonic Pi. In Abschnitt 10.1 erklärte ich Dir bereits, warum diese so nü"
"tzlich sind."

#: B.02-Shortcut-Cheatsheet.md:8
msgid "Conventions"
msgstr "Konventionen"

#: B.02-Shortcut-Cheatsheet.md:10
msgid ""
"In this list, we use the following conventions (where *Meta* is one of *Alt* o"
"n Windows/Linux or *Cmd* on Mac):"
msgstr ""
"Wir verwenden die folgenden Konventionen (*Meta* ist *Alt* auf Windows und Lin"
"ux und *Cmd* auf dem Mac wie in 10.1 beschrieben):"

#: B.02-Shortcut-Cheatsheet.md:13
msgid ""
"`C-a` means hold the *Control* key then press the *a* key whilst holding them "
"both at the same time, then releasing."
msgstr ""
"`C-a` bedeutet, die *Control* (*Strg* auf deutschen Tastaturen) zu drücken und"
" zu halten, dabei *a* zu drücken und danach beide Tasten wieder los zu lassen."

#: B.02-Shortcut-Cheatsheet.md:14
msgid ""
"`M-r` means hold the *Meta* key and then press the *r* key whilst holding them"
" both at the same time, then releasing."
msgstr ""
"`M-r` bedeutet, *Meta* zu drücken und zu halten, dabei die *r*-Taste zu drücke"
"n und danach beide wieder los zu lassen."

#: B.02-Shortcut-Cheatsheet.md:15
msgid ""
"`S-M-z` means hold the *Shift* key, then the *Meta* key, then finally the *z* "
"key all at the same time, then releasing."
msgstr ""
"`S-M-z` bedeutet, die *Meta*-Taste zu drücken und zu halten, dann *Shift* zu d"
"rücken und zu halten und schließlich die *z*-Taste und alle drei Tasten gleich"
"zeitig wieder los zu lassen."

#: B.02-Shortcut-Cheatsheet.md:16
msgid ""
"`C-M-f` means hold the *Control* key, then press *Meta* key, finally the *f* k"
"ey all at the same time, then releasing."
msgstr ""
"`C-M-f` bedeutet, *Control* zu drücken und zu halten, dann *Meta* zu drücken u"
"nd zu halten, dann *f* zu drücken und alle drei Tasten gleichzeitig wieder los"
" zu lassen."

#: B.02-Shortcut-Cheatsheet.md:18
msgid "Main Application Manipulation"
msgstr "Steuerung der Hauptanwendung"

#: B.02-Shortcut-Cheatsheet.md:20
msgid "`M-r` - Run code"
msgstr "`M-r` - Code ausführen"

#: B.02-Shortcut-Cheatsheet.md:21
msgid "`M-s` - Stop code"
msgstr "`M-s` - Code-Ausführung stoppen"

#: B.02-Shortcut-Cheatsheet.md:22
msgid "`M-i` - Toggle Help System"
msgstr "`M-i` - Hilfesystem ein-/ausschalten"

#: B.02-Shortcut-Cheatsheet.md:23
msgid "`M-p` - Toggle Preferences"
msgstr "`M-p` - Einstellungen ein-/ausschalten"

#: B.02-Shortcut-Cheatsheet.md:24
msgid "`M-{` - Switch buffer to the left"
msgstr "`M-<` - Zum Puffer links wechseln"

#: B.02-Shortcut-Cheatsheet.md:25
msgid "`M-}` - Switch buffer to the right"
msgstr "`M->` - Zum Puffer rechts wechseln"

#: B.02-Shortcut-Cheatsheet.md:26
msgid "`S-M-0` - Switch to buffer 0"
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:27
msgid "`S-M-1` - Switch to buffer 1"
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:28
msgid "..."
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:29
msgid "`S-M-9` - Switch to buffer 9"
msgstr ""

#: B.02-Shortcut-Cheatsheet.md:30
msgid "`M-+` - Increase text size of current buffer"
msgstr "`M-+` - Schrift des Puffers vergrößern"

#: B.02-Shortcut-Cheatsheet.md:31
msgid "`M--` - Decrease text size of current buffer"
msgstr "`M--` - Schrift des Puffers verkleinern"

#: B.02-Shortcut-Cheatsheet.md:34
msgid "Selection/Copy/Paste"
msgstr "Auswahl/Kopieren/Einfügen"

#: B.02-Shortcut-Cheatsheet.md:36
msgid "`M-a` - Select all"
msgstr "`M-a` - Alles auswählen"

#: B.02-Shortcut-Cheatsheet.md:37
msgid "`M-c` - Copy selection to paste buffer"
msgstr "`M-c` - Auswahl in den Zwischenspeicher kopieren"

#: B.02-Shortcut-Cheatsheet.md:38
msgid "`M-]` - Copy selection to paste buffer"
msgstr "`M-]` - Auswahl in den Zwischenspeicher kopieren"

#: B.02-Shortcut-Cheatsheet.md:39
msgid "`M-x` - Cut selection to paste buffer"
msgstr "`M-x` - Auswahl ausschneiden und im Zwischenspeicher ablegen"

#: B.02-Shortcut-Cheatsheet.md:40
msgid "`C-]` - Cut selection to paste buffer"
msgstr "`C-]` - Auswahl ausschneiden und im Zwischenspeicher ablegen"

#: B.02-Shortcut-Cheatsheet.md:41
msgid "`C-k` - Cut to the end of the line"
msgstr "`C-k` - Text ab Cursor bis zum Ende der Zeile ausschneiden"

#: B.02-Shortcut-Cheatsheet.md:42
msgid "`M-v` - Paste from paste buffer to editor"
msgstr "`M-v` - Inhalt des Zwischenspeichers in den Editor kopieren"

#: B.02-Shortcut-Cheatsheet.md:43
msgid "`C-y` - Paste from paste buffer to editor"
msgstr "`C-y` - Inhalt des Zwischenspeichers in den Editor kopieren"

#: B.02-Shortcut-Cheatsheet.md:44
msgid ""
"`C-SPACE` - Set mark. Navigation will now manipulate highlighted region. Use `"
"C-g` to escape."
msgstr ""
"`C-SPACE` - Markierung setzen. Textauswahl ab jetzt von hier bis zum Cursor. `"
"C-g` löscht die Markierung."

#: B.02-Shortcut-Cheatsheet.md:46
msgid "Text Manipulation"
msgstr "Text-Manipulation"

#: B.02-Shortcut-Cheatsheet.md:48
msgid "`M-m` - Align all text"
msgstr "`M-m` - Gesamten Code ausrichten"

#: B.02-Shortcut-Cheatsheet.md:49
msgid "`Tab` - Align current line or selection (or select autocompletion)"
msgstr "`Tab` - Aktuelle Codezeile oder Auswahl ausrichten"

#: B.02-Shortcut-Cheatsheet.md:50
msgid "`C-l` - Centre editor"
msgstr "`C-l` - Editor zentrieren"

#: B.02-Shortcut-Cheatsheet.md:51
msgid "`M-/` - Comment/Uncomment current line or selection"
msgstr "`M-/` - Aktuelle Codezeile auskommentieren"

#: B.02-Shortcut-Cheatsheet.md:52
msgid "`C-t` - Transpose/swap characters"
msgstr "`C-t` - Zeichen vertauschen"

#: B.02-Shortcut-Cheatsheet.md:53
msgid "`M-u` - Convert next word (or selection) to upper case."
msgstr "`M-u` - Das nächste Wort oder Auswahl in Großbuchstaben wandeln."

#: B.02-Shortcut-Cheatsheet.md:54
msgid "`M-l` - Convert next word (or selection) to lower case."
msgstr "`M-l` - Das nächste Wort oder Auswahl in Kleinbuchstaben wandeln."

#: B.02-Shortcut-Cheatsheet.md:58
msgid "`C-a` - Move to beginning of line"
msgstr "`C-a` - An den Anfang der Zeile springen"

#: B.02-Shortcut-Cheatsheet.md:59
msgid "`C-e` - Move to end of line"
msgstr "`C-e` - Ans Ende der Zeile springen"

#: B.02-Shortcut-Cheatsheet.md:60
msgid "`C-p` - Move to previous line"
msgstr "`C-p` - Zur vorherigen Zeile springen"

#: B.02-Shortcut-Cheatsheet.md:61
msgid "`C-n` - Move to next line"
msgstr "`C-n` - Zur nächsten Zeile springen"

#: B.02-Shortcut-Cheatsheet.md:62
msgid "`C-f` - Move forward one character"
msgstr "`C-f` - Ein Zeichen vorwärts"

#: B.02-Shortcut-Cheatsheet.md:63
msgid "`C-b` - Move backward one character"
msgstr "`C-b` - Ein Zeichen zurück"

#: B.02-Shortcut-Cheatsheet.md:64
msgid "`M-f` - Move forward one word"
msgstr "`M-f` - Ein Wort nach vorne"

#: B.02-Shortcut-Cheatsheet.md:65
msgid "`M-b` - Move backward one word"
msgstr "`M-b` - Ein Wort zurück"

#: B.02-Shortcut-Cheatsheet.md:66
msgid "`C-M-n` - Move line or selection down"
msgstr "`C-M-n` - Zeile oder Auswahl nach unten schieben"

#: B.02-Shortcut-Cheatsheet.md:67
msgid "`C-M-p` - Move line or selection up"
msgstr "`C-M-p` - Zeile oder Auswahl nach unten schieben"

#: B.02-Shortcut-Cheatsheet.md:68
msgid "`S-M-u` - Move up 10 lines"
msgstr "`S-M-u` - 10 Zeilen nach oben springen"

#: B.02-Shortcut-Cheatsheet.md:69
msgid "`S-M-d` - Move down 10 lines"
msgstr "`S-M-d` - 10 Zeilen nach unten springen"

#: B.02-Shortcut-Cheatsheet.md:70
msgid "`M-<` - Move to beginning of buffer"
msgstr "`M-<` - Zum Anfang des Puffers gehen"

#: B.02-Shortcut-Cheatsheet.md:71
msgid "`M->` - Move to end of buffer"
msgstr "`M->` - Zum Ende des Puffers gehen"

#: B.02-Shortcut-Cheatsheet.md:73
msgid "Deletion"
msgstr "Löschen"

#: B.02-Shortcut-Cheatsheet.md:75
msgid "`C-h` - Delete previous character"
msgstr "`C-h` - Vorangegangenes Zeichen löschen"

#: B.02-Shortcut-Cheatsheet.md:76
msgid "`C-d` - Delete next character"
msgstr "`C-d` - Nächstes Zeichen löschen"

#: B.02-Shortcut-Cheatsheet.md:78
msgid "Advanced Editor Features"
msgstr "Fortgeschrittene Funktionen des Editors"

#: B.02-Shortcut-Cheatsheet.md:80
msgid "`C-i` - Show docs for word under cursor"
msgstr "`C-i` - Dokumentation für das Wort unter dem Cursor anzeigen"

#: B.02-Shortcut-Cheatsheet.md:81
msgid "`M-z` - Undo"
msgstr "`M-z` - Rückgängig (\"Undo\")"

#: B.02-Shortcut-Cheatsheet.md:82
msgid "`S-M-z` - Redo"
msgstr "`S-M-z` - Wiederholen (\"Redo\")"

#: B.02-Shortcut-Cheatsheet.md:83
msgid "`C-g` - Escape"
msgstr "`C-g` - Escape"

#: B.02-Shortcut-Cheatsheet.md:84
msgid "`S-M-f` - Toggle fullscreen mode"
msgstr "`S-M-f` - Vollbildmodus ein-/ausschalten"

#: B.02-Shortcut-Cheatsheet.md:85
msgid "`S-M-b` - Toggle visibility of buttons"
msgstr "`S-M-b` - Buttons ein-/ausschalten"

#: B.02-Shortcut-Cheatsheet.md:86
msgid "`S-M-l` - Toggle visibility of log"
msgstr "`S-M-l` - Anzeige Protokoll-Fenster ein-/aus"

#: B.02-Shortcut-Cheatsheet.md:87
msgid "`S-M-m` - Toggle between light/dark modes"
msgstr "`S-M-m` - Dunkle Benutzeroberfläche ein-/ausschalten"

#: B.02-Shortcut-Cheatsheet.md:88
msgid "`S-M-s` - Save contents of buffer to a file"
msgstr "`S-M-s` - Inhalt des Puffers in Datei speichern"

#: B.02-Shortcut-Cheatsheet.md:89
msgid "`S-M-o` - Load contents of buffer from a file"
msgstr "`S-M-o` - Datei in einen Puffer laden"

#: B.03-Sharing.md:1
#, fuzzy
msgid "B.3 Sharing"
msgstr "10.3 Teilen"

#: B.03-Sharing.md:3
msgid "Sharing"
msgstr "Teilen"

#: B.03-Sharing.md:5
msgid "Sonic Pi is all about sharing and learning with each other."
msgstr "In Sonic Pi geht es vor allen Dingen um das Teilen und gemeinsame Lernen."

#: B.03-Sharing.md:7
msgid ""
"Once you've learned how to code music, sharing your compositions is as simple "
"as sending an email containing your code. Please do *share* your code with oth"
"ers so they can *learn* from your work and even use parts in a new *mash-up*."
msgstr ""
"Sobald Du gelernt hast, Musik zu programmieren, kannst Du Deine "
"Kompositionen ganz leicht mit anderen teilen: Schicke Deinen Code einfach "
"mit einer E-Mail an Deine Freunde. Ich möchte Dich ermuntern, Deinen Code "
"mit anderen zu *teilen*, so dass sie von Deiner Arbeit *lernen* und Teile "
"davon in neuen *Mash-Ups* verwenden können."

#: B.03-Sharing.md:12
msgid ""
"If you're unsure of the best way to share your work with others I recommend pu"
"tting your code on [GitHub](https://github.com) and your music on [SoundCloud]"
"(https://soundcloud.com). That way you'll be able to easily reach a large audi"
"ence."
msgstr ""
"Du hast keine Ahnung, wo Du Deine Werke am besten mit anderen teilen kannst? I"
"ch empfehle Dir für Deinen Code [GitHub](https://github.com) und für Deine Mus"
"ik [SoundCloud](https://soundcloud.com). So erreichst Du schnell ein großes Pu"
"blikum."

#: B.03-Sharing.md:17
msgid "Code -> GitHub"
msgstr "Code -> GitHub"

#: B.03-Sharing.md:19
msgid ""
"[GitHub](https://github.com) is a site for sharing and working with code. It's"
" used by professional developers as well as artists for sharing and collaborat"
"ing with code. The simplest way to share a new piece of code (or even an unfin"
"ished piece) is to create a [Gist](https://gist.github.com). A [Gist](https://"
"gist.github.com) is a simple way of uploading your code in a simple way that o"
"thers can see, copy and share."
msgstr ""
"[GitHub](https://github.com) wird von professionellen Entwicklern und auch Kün"
"stlern verwendet, um Code zu teilen und zusammenzuarbeiten. Auf GitHub gibt es"
" einen eigenen Bereich namens [Gist](https://gist.github.com), damit kann man "
"besonders einfach ein neues Stück Code (egal ob fertig oder nicht) veröffentli"
"chen. Mit einem [Gist](https://gist.github.com) können dann auch andere Deinen"
" Code übernehmen, kommentieren und verbessern."

#: B.03-Sharing.md:27
msgid "Audio -> SoundCloud"
msgstr "Audio -> SoundCloud"

#: B.03-Sharing.md:29
msgid ""
"Another important way of sharing your work is to record the audio and upload i"
"t to [SoundCloud](https://soundcloud.com). Once you've uploaded your piece, ot"
"her users can comment and discuss your work. I also recommend placing a link t"
"o a [Gist](https://gist.github.com) of your code in the track description."
msgstr ""
"Statt Code kannst Du auch eine Musikaufnahme veröffentlichen und dafür eine Au"
"diodatei zu [SoundCloud](https://soundcloud.com) hochladen. Dort können andere"
" Nutzer Kommentare dazu abgeben und die Musik diskutieren. Es ist empfehlenswe"
"rt, bei einer Veröffentlichung auf Soundcloud zusätzlich einen Link zu einem ["
"Gist](https://gist.github.com) mit Deinen Code in die Beschreibung aufzunehmen"
"."

#: B.03-Sharing.md:35
msgid ""
"To record your work, hit the `Rec` button in the toolbar, and recording starts"
" immediately. Hit `Run` to start your code if it isn't already in progress. Wh"
"en you're done recording, press the flashing `Rec` button again, and you'll be"
" prompted to enter a filename. The recording will be saved as a WAV file, whic"
"h can be edited and converted to MP3 by any number of free programs (try Audac"
"ity for instance)."
msgstr ""
"Um Dein Stück aufzunehmen, drücke den `Aufnehmen`-Knopf in der "
"Werkzeugleiste, die Aufnahme startet dann sofort. Drücke `Ausführen`, um "
"Deinen Code zu starten, wenn er nicht bereits läuft. Wenn Du fertig bist, "
"drücke den blinkenden `Aufnehmen`-Knopf erneut. Du wirst dann nach einem "
"Dateinamen gefragt, unter dem die Aufnahme als WAV-Datei gespeichert wird. "
"Es gibt viele Werkzeuge, um eine WAV-Datei in ein MP3 zu wandeln, z.B. das "
"Programm *Audacity*."

#: B.03-Sharing.md:43
msgid "Hope"
msgstr "Hoffnung"

#: B.03-Sharing.md:45
msgid ""
"I encourage you to share your work and really hope that we'll all teach each o"
"ther new tricks and moves with Sonic Pi. I'm really excited by what you'll hav"
"e to show me."
msgstr ""
"Ich möchte Dich ermuntern, Deine Arbeiten zu teilen, und hoffe sehr, dass wir "
"uns gegenseitig neue Sonic-Pi-Tipps und -Tricks beibringen werden. Ich bin sch"
"on sehr gespannt darauf, was Du mir zeigen wirst."

#: B.04-Performing.md:1
#, fuzzy
msgid "B.4 Performing"
msgstr "10.4 Auftritte"

#: B.04-Performing.md:3
msgid "Performing"
msgstr "Auftritte"

#: B.04-Performing.md:5
msgid ""
"One of the most exciting aspects of Sonic Pi is that it enables you to use cod"
"e as a *musical instrument*. This means that writing code live can now be seen"
" as a new way of performing music."
msgstr ""
"Einer der aufregendsten Aspekte von Sonic Pi ist, dass Du von nun an Code als "
"*Musikinstrument* verwenden kannst. Vor Publikum zu programmieren wird damit e"
"in neuer Weg, um Musik aufzuführen."

#: B.04-Performing.md:9
msgid "We call this *Live Coding*."
msgstr "Das nennen wir *Live-Coding*."

#: B.04-Performing.md:11
msgid "Show Your Screen"
msgstr "Zeig Deinen Bildschirm"

#: B.04-Performing.md:13
msgid ""
"When you live code I recommend you *show your screen* to your audience. Otherw"
"ise it's like playing a guitar but hiding your fingers and the strings. When I"
" practice at home I use a Raspberry Pi and a little mini projector on my livin"
"g room wall. You could use your TV or one of your school/work projectors to gi"
"ve a show. Try it, it's a lot of fun."
msgstr ""
"Wenn Du live programmierst, empfehle ich Dir, Deinem Publikum Deinen *Bildschi"
"rm zu zeigen*. Beim Gitarrespielen versteckst Du ja auch nicht Deine Finger un"
"d die Saiten Deines Instruments. Wenn ich zu Hause übe, verwende ich einen Ras"
"pberry Pi und projiziere den Bildschirm mit einem kleinen Beamer an meine Wohn"
"zimmerwand. Du könntest auch Deinen Fernseher oder einen Projektor in der Schu"
"le/Arbeit verwenden und eine kleine Show geben. Versuch es, das macht eine Men"
"ge Spaß."

#: B.04-Performing.md:20
msgid "Form a Band"
msgstr "Gründe eine Band"

#: B.04-Performing.md:22
msgid ""
"Don't just play on your own - form a live coding band! It's a lot of fun jammi"
"ng with others. One person could do beats, another ambient background, etc. Us"
"e the `live_audio` functionality to combine code with traditional instruments "
"such as a guitar or a microphone."
msgstr ""

#: B.04-Performing.md:27
msgid "See what interesting combinations of sounds you can create with code."
msgstr ""

#: B.04-Performing.md:29
msgid "TOPLAP"
msgstr "TOPLAP"

#: B.04-Performing.md:31
msgid ""
"Live coding isn't completely new - a small number of people have been doing it"
" for a few years now, typically using bespoke systems they've built for themse"
"lves. A great place to go and find out more about other live coders and system"
"s is [TOPLAP](http://toplap.org)."
msgstr ""
"Live-Coding ist nicht wirklich neu - eine kleine Gruppe von Enthusiasten macht"
" das schon seit Jahren, typischerweise mit selbstgebauten, individuellen Syste"
"men. Bei [TOPLAP](http://toplap.org) erfährst Du mehr über diese anderen Live-"
"Coder und ihre Geräte."

#: B.04-Performing.md:36
msgid "Algorave"
msgstr "Algorave"

#: B.04-Performing.md:38
msgid ""
"Another great resource for exploring the live coding world is [Algorave](http:"
"//algorave.com). Here you can find all about a specific strand of live coding "
"for making music in nightclubs."
msgstr ""
"Einige Live-Coder spielen auch in Nightclubs. Mehr über dieses spezielle Genre"
" erfährst Du auf [Algorave](http://algorave.com)."

#: C-Minecraft-Pi.md:1
#, fuzzy
msgid "C Minecraft Pi"
msgstr "Minecraft Pi"

#: C-Minecraft-Pi.md:3
msgid "Minecraft Pi"
msgstr "Minecraft Pi"

#: C-Minecraft-Pi.md:5
msgid ""
"Sonic Pi now supports a simple API for interacting with Minecraft Pi - the spe"
"cial edition of Minecraft which is installed by default on the Raspberry Pi's "
"Raspbian Linux-based operating system."
msgstr ""
"Raspbian, das Linux-Betriebssystem für Raspberry Pi, bringt eine spezielle Ver"
"sion von Minecraft als Teil der Vorinstallation mit. Und mit Sonic Pi kannst D"
"u über eine einfache API jetzt auch Minecraft Pi steuern."

#: C-Minecraft-Pi.md:9
msgid "No need to import libraries"
msgstr "Keine Bibliotheken notwendig"

#: C-Minecraft-Pi.md:11
msgid ""
"The Minecraft Pi integration has been designed to be insanely easy to use. All"
" you need to do is to launch Minecraft Pi and create a world. You're then free"
" to use the `mc_*` fns just like you might use `play` and `synth`. There's no "
"need to import anything or install any libraries - it's all ready to go and wo"
"rks out of the box."
msgstr ""
"Die Verbindung zwischen Minecraft Pi und Sonic Pi ist so einfach zu nutzen, da"
"ss Du nichts dafür vorbereiten musst. Starte einfach Minecraft Pi und baue ein"
"e Welt. Du kannst sofort die `mc_*`-Funktionen in Deinem Code genau wie `play`"
" oder `synth` einsetzen. Es gibt nichts zu installieren und keine Bibliotheken"
" zu importieren - alles ist fix und fertig und sofort startklar für Dich."

#: C-Minecraft-Pi.md:17
msgid "Automatic Connection"
msgstr "Automatische Verbindung"

#: C-Minecraft-Pi.md:19
msgid ""
"The Minecraft Pi API takes care of managing your connection to the Minecraft P"
"i application. This means you don't need to worry about a thing. If you try an"
"d use the Minecraft Pi API when Minecraft Pi isn't open, Sonic Pi will politel"
"y tell you. Similarly, if you close Minecraft Pi whilst you're still running a"
" `live_loop` that uses the API, the live loop will stop and politely tell you "
"that it can't connect. To reconnect, just launch Minecraft Pi again and Sonic "
"Pi will automatically detect and re-create the connection for you."
msgstr ""
"Die Minecraft-Pi-API kümmert sich automatisch um die Verbindung zur laufenden "
"Minecraft-Pi-Applikation. Du musst also nichts dafür tun. Sonic Pi wird sich a"
"llerdings freundlich beschweren, wenn Du die API benutzen möchtest und Minecra"
"ft Pi nicht gleichzeitig läuft. Und falls Du die Minecraft-Pi-Applikation been"
"dest, während Dein Code die API in einem `live_loop` ansprechen will, wird der"
" Loop beendet und Du erhältst eine entsprechende Fehlermeldung. Starte dann Mi"
"necraft Pi wieder neu, die API wird sich von selbst damit verbinden und Dein C"
"ode funktioniert wieder."

#: C-Minecraft-Pi.md:28
msgid "Designed to be Live Coded"
msgstr "Gemacht für Live-Coding"

#: C-Minecraft-Pi.md:30
msgid ""
"The Minecraft Pi API has been designed to work seamlessly within `live_loop`s."
" This means it's possible to synchronise modifications in your Minecraft Pi wo"
"rlds with modifications in your Sonic Pi sounds. Instant Minecraft-based music"
" videos! Note however that Minecraft Pi is alpha software and is known to be s"
"lightly buggy. If you encounter any problems simply restart Minecraft Pi and c"
"arry on as before. Sonic Pi's automatic connection functionality will take car"
"e of things for you."
msgstr ""
"Die Minecraft-Pi-API ist dazu da, dass sie problemlos in einem `live_loop` "
"funktioniert. Du kannst damit also Veränderungen in Deiner Minecraft-Welt "
"mit Veränderungen in Deinen Sonic-Pi-Sounds synchronisieren. Zack, Minecraft-"
"basierte Musik-Videos! Bedenke aber, dass Minecraft Pi eine Alpha-Version "
"ist und die Software ein paar kleinere Bugs hat. Wenn ein solches Problem "
"mit Minecraft Pi auftritt, starte es einfach neu. Sonic Pi nimmt dann "
"automatisch eine neue Verbindung über seine API auf."

#: C-Minecraft-Pi.md:39
msgid "Requires a Raspberry Pi 2.0"
msgstr "Raspberry Pi 2 empfohlen"

#: C-Minecraft-Pi.md:41
msgid ""
"It is highly recommended that you use a Raspberry Pi 2 if you wish to run both"
" Sonic Pi and Minecraft at the same time - especially if you want to use Sonic"
" Pi's sound capabilities."
msgstr ""
"Minecraft Pi und Sonic Pi mit seinen Sound-Möglichkeiten sind beides sehr rech"
"enintensive Programme. Der alte Raspberry ist davon schnell überfordert und ei"
"n Raspberry Pi 2 mit seinem schnelleren Prozessor deshalb sehr zu empfehlen."

#: C-Minecraft-Pi.md:45
msgid "API Support"
msgstr "API-Support"

#: C-Minecraft-Pi.md:47
#, fuzzy
msgid ""
"At this stage, Sonic Pi supports basic block and player manipulations which ar"
"e detailed in Section C.1. Support for event callbacks triggered by player int"
"eractions in the world is planned for a future release."
msgstr ""
"Zur Zeit kann Sonic Pi einige Grundfunktionen zur Manipulation von Minecraft-B"
"löcken und dem Spieler ausführen. Details dazu findest Du im nächsten Abschnit"
"t 11.1. Für ein späteres Release plane ich, auch Event-Callbacks aus Minecraft"
" Pi zu unterstützen, so dass der Code in Sonic Pi von Ereignissen erfahren kan"
"n, die der Spieler in Minecraft Pi ausgelöst hat."

#: C.01-Basic-API.md:1
#, fuzzy
msgid "C.1 Basic API"
msgstr "11.1 Grundfunktionen der Minecraft-PI-API"

#: C.01-Basic-API.md:3
msgid "Basic Minecraft Pi API"
msgstr "Grundfunktionen der Minecraft-Pi-API"

#: C.01-Basic-API.md:5
msgid ""
"Sonic Pi currently supports the following basic interactions with Minecraft Pi"
":"
msgstr ""
"Folgende Aktionen kannst Du mit der API von Sonic Pi aus in Minecraft Pi auslö"
"sen:"

#: C.01-Basic-API.md:7 C.01-Basic-API.md:16
msgid "Displaying chat messages"
msgstr "Anzeige von Chat-Nachrichten"

#: C.01-Basic-API.md:8 C.01-Basic-API.md:33
msgid "Setting the position of the user"
msgstr "die Spielerposition setzen"

#: C.01-Basic-API.md:9
msgid "Getting the position of the user"
msgstr "die Spielerposition auslesen"

#: C.01-Basic-API.md:10
msgid "Setting the block type at a given coordinate"
msgstr "den Typ eines Minecraft-Blocks an einer Koordinate setzen"

#: C.01-Basic-API.md:11
msgid "Getting the block type at a given coordinate"
msgstr "den Typ eines Minecraft-Blocks an einer Koordinate auslesen"

#: C.01-Basic-API.md:14
msgid "Let's look at each of these in turn."
msgstr "Schauen wir uns diese der Reihe nach an."

#: C.01-Basic-API.md:18
msgid ""
"Let's see just how easy it is to control Minecraft Pi from Sonic Pi. First, ma"
"ke sure you have both Minecraft Pi and Sonic Pi open at the same time and also"
" make sure you've entered a Minecraft world and can walk around."
msgstr ""
"Lass uns kurz ansehen, wie einfach es ist Minecraft Pi von Sonic Pi aus zu "
"steuern. Starte zunächst Sonic Pi und Minecraft Pi zugleich, und stelle "
"sicher, dass du einer Minecraft-Welt beigetreten bist und herumlaufen kannst."

#: C.01-Basic-API.md:23
msgid "In a fresh Sonic Pi buffer simply enter the following code:"
msgstr "Jetzt schreibe folgenden Code in einem leeren Puffer von Sonic Pi :"

#: C.01-Basic-API.md:25
#, no-wrap
msgid "mc_message \"Hello from Sonic Pi\""
msgstr "mc_message \"Hallo, hier ist Sonic Pi\""

#: C.01-Basic-API.md:29
msgid ""
"When you hit the *Run* button, you'll see your message flash up on the Minecra"
"ft window. Congratulations, you've written your first Minecraft code! That was"
" easy wasn't it."
msgstr ""
"Führe den Code aus und Du wirst die Nachricht im Minecraft-Fenster aufblitzen "
"sehen. Gratuliere, das ist Dein erster Minecraft-Code! War doch gar nicht schw"
"er, oder?"

#: C.01-Basic-API.md:35
msgid ""
"Now, let's try a little magic. Let's teleport ourselves somewhere! Try the fol"
"lowing:"
msgstr ""
"Und jetzt zaubern wir ein wenig. Teleportiere Dich einfach, wohin Du willst! P"
"robiere das hier aus:"

#: C.01-Basic-API.md:38
#, no-wrap
msgid "mc_teleport 50, 50, 50"
msgstr "mc_teleport 50, 50, 50"

#: C.01-Basic-API.md:42
#, fuzzy
msgid ""
"When you hit *Run* - boom! You're instantly transported to a new place. Most l"
"ikely it was somewhere in the sky and you fell down either to dry land or into"
" water. Now, what are those numbers: `50, 50, 50`? They're the coordinates of "
"the location you're trying to teleport to. Let's take a brief moment to explor"
"e what coordinates are and how they work because they're really, really import"
"ant for programming Minecraft."
msgstr ""
"Nach Klick auf *Ausführen* - Paff! - bist Du sofort an einem anderen Ort in De"
"iner Minecraft-Welt. Vermutlich irgendwie hoch oben in der Luft und Du bist au"
"fs Land oder Wasser herunter gefallen. Was bedeuten diese Zahlen: `50, 50, 50`"
"? Das sind die Koordinaten der Zielposition für den Teleport. Probiere jetzt i"
"n Deinem Code ein paar Koordinaten aus, damit Du weißt, wie sie funktionieren."
" Koordinaten sind für Minecraft-Programme sehr sehr wichtig."

#: C.01-Basic-API.md:50
msgid "Coordinates"
msgstr "Koordinaten"

#: C.01-Basic-API.md:52
msgid ""
"Imagine a pirate's map with a big `X` marking the location of some treasure. T"
"he exact location of the `X` can be described with two numbers - how far along"
" the map from left to right and how far along the map from bottom to top. For "
"example `10cm` across and `8cm` up. These two numbers `10` and `8` are coordin"
"ates. You could easily imagine describing the locations of other stashes of tr"
"easure with other pairs of numbers. Perhaps there's a big chest of gold at `2`"
" across and `9` up..."
msgstr ""
"Stelle Dir eine alte Piraten-Schatzkarte vor - beim großen `X` ist der Schatz "
"vergraben. Die genaue Position des `X` lässt sich mit zwei Zahlen beschreiben "
"- wie weit ist das Kreuz horizontal vom Papierrand entfernt und wie weit verti"
"kal. Angenommen, es ist `10cm` vom linken Rand und `8cm` vom unteren Rand entf"
"ernt. Diese beiden Zahlen `10` und `8` sind Koordinaten. Auch andere vergraben"
"e Schätze auf der Karte lassen sich mit ihrem jeweiligen Koordinaten-Zahlenpaa"
"r genau beschreiben. Etwa die große Goldkiste bei `2` von links und `9` von un"
"ten..."

#: C.01-Basic-API.md:61
msgid ""
"Now, in Minecraft two numbers isn't quite enough. We also need to know how hig"
"h we are. We therefore need three numbers:"
msgstr ""
"In Minecraft Pi reichen zwei Zahlen nicht mehr aus. Wir brauchen auch eine Höh"
"enangabe und damit besteht eine Koordinate in Minecraft aus drei Zahlen:"

#: C.01-Basic-API.md:64
msgid "How far from right to left in the world - `x`"
msgstr "Wie weit von rechts nach links innerhalb der Welt - `x`"

#: C.01-Basic-API.md:65
msgid "How far from front to back in the world - `z`"
msgstr "Wie weit von vorn nach hinten innerhalb der Welt - `z`"

#: C.01-Basic-API.md:66
msgid "How high up we are in the world - `y`"
msgstr "Wie hoch vom Boden aus innerhalb der Welt - `y`"

#: C.01-Basic-API.md:68
msgid ""
"One more thing - we typically describe these coordinates in this order `x`, `y"
"`, `z`."
msgstr ""
"Diese Minecraft-Koordinaten schreiben wir dann in der Reihenfolge `x`, `y`, `z"
"` auf."

#: C.01-Basic-API.md:71
msgid "Finding your current coordinates"
msgstr "Finde deine aktuellen Koordinaten"

#: C.01-Basic-API.md:73
msgid ""
"Let's have a play with coordinates. Navigate to a nice place in the Minecraft "
"map and then switch over to Sonic Pi. Now enter the following:"
msgstr ""
"Spielen wir also ein wenig mit den Koordinaten herum. Bewege Dich in Minecraft"
" Pi an einen schönen Ort und wechsele dann zu Sonic Pi. Nun führe folgenden Co"
"de aus:"

#: C.01-Basic-API.md:76
#, no-wrap
msgid "puts mc_location"
msgstr "puts mc_location"

#: C.01-Basic-API.md:80
msgid ""
"When you hit the *Run* button you'll see the coordinates of your current posit"
"ion displayed in the log window. Take a note of them, then move forward in the"
" world and try again. Notice how the coordinates changed! Now, I recommend you"
" spend some time repeating exactly this - move a bit in the world, take a look"
" at the coordinates and repeat. Do this until you start to get a feel for how "
"the coordinates change when you move. Once you've understood how coordinates w"
"ork, programming with the Minecraft API will be a complete breeze."
msgstr ""
"Wenn du auf *Ausführen* klickst, kannst du im Protokoll-Fenster die "
"Koordinaten der Position sehen, auf der du dich in Minecraft befindest. "
"Merke sie dir, bewege dich in Minecraft ein wenig weiter und führe den Code "
"noch einmal aus. Bemerke, wie sich die Koordinaten geändert haben! Ich "
"empfehle dir genau das noch ein bisschen auszuprobieren - bewege dich ein "
"wenig in der Welt, schaue auf die Koordinaten und wiederhole das, bis du ein "
"Gefühl dafür bekommst, wie sich die Koordinaten ändern, wenn du dich "
"bewegst. Wenn du erst einmal verstanden hast, wie Koordinaten funktionieren, "
"wird das Programmieren mit der Minecraft-Pi-API ganz einfach."

#: C.01-Basic-API.md:89
msgid "Let's Build!"
msgstr "Lass uns etwas bauen!"

#: C.01-Basic-API.md:91
msgid ""
"Now that you know how to find the current position and to teleport using coord"
"inates, you have all the tools you need to start building things in Minecraft "
"with code. Let's say you want to make the block with coordinates `40`, `50`, `"
"60` to be glass. That's super easy:"
msgstr ""
"Jetzt weißt Du, wie Du Deine Position auslesen und Dich an beliebige Stellen t"
"eleportieren kannst. Als nächstes können wir mit Code Dinge in Minecraft bauen"
". Zum Beispiel ein Block aus Glas an Koordinate `40, 50, 60`, das geht ganz ei"
"nfach:"

#: C.01-Basic-API.md:96
#, no-wrap
msgid "mc_set_block :glass, 40, 50, 60"
msgstr "mc_set_block :glass, 40, 50, 60"

#: C.01-Basic-API.md:100
msgid ""
"Haha, it really was that easy. To see your handywork just teleport nearby and "
"take a look:"
msgstr ""
"Haha, das war ja wirklich ganz einfach. Nach getaner Arbeit springst Du schnel"
"l in die Nähe und schaust Dir das Ergebnis an:"

#: C.01-Basic-API.md:103
#, no-wrap
msgid "mc_teleport 35, 50, 60"
msgstr "mc_teleport 35, 50, 60"

#: C.01-Basic-API.md:107
msgid ""
"Now turn around and you should see your glass block! Try changing it to diamon"
"d:"
msgstr ""
"Dreh Dich ein wenig und Du wirst Deinen Glasblock sehen! Ändern wir kurz das M"
"aterial und machen einen Block aus Diamant daraus:"

#: C.01-Basic-API.md:110
#, no-wrap
msgid "mc_set_block :diamond, 40, 50, 60"
msgstr "mc_set_block :diamond, 40, 50, 60"

#: C.01-Basic-API.md:114
msgid ""
"If you were looking in the right direction you might have even seen it change "
"in front of your eyes! This is the start of something exciting..."
msgstr ""
"Wenn Du in die richtige Richtung schaust, konntest Du eben sogar dabei zusehen"
", wie sich der Block verändert. Hier geschieht etwas aufregendes..."

#: C.01-Basic-API.md:117
msgid "Looking at blocks"
msgstr "Blöcke ansehen"

#: C.01-Basic-API.md:119
msgid ""
"Let's look at one last thing before we move onto something a bit more involved"
". Given a set of coordinates we can ask Minecraft what the type of a specific "
"block is. Let's try it with the diamond block you just created:"
msgstr ""
"Du kannst Minecraft Pi auch fragen, welcher Typ Block sich an einer Koordinate"
" befindet. Der folgende Code tut dies für den Diamantblock, den Du gerade geba"
"ut hast:"

#: C.01-Basic-API.md:124
#, no-wrap
msgid "puts mc_get_block 40, 50, 60"
msgstr "puts mc_get_block 40, 50, 60"

#: C.01-Basic-API.md:128
msgid ""
"Yey! It's `:diamond`. Try changing it back to glass and asking again - does it"
" now say `:glass`? I'm sure it does :-)"
msgstr ""
"Yay! Es ist `:diamond`. Ändere das Material des Blocks wieder zu Glas und lese"
" den Typ noch einmal aus - meldet der Code jetzt `:glass` zurück? Ich bin sich"
"er, dass er das tut. :-)"

#: C.01-Basic-API.md:131
msgid "Available block types"
msgstr "Mögliche Materialtypen in Minecraft"

#: C.01-Basic-API.md:133
msgid ""
"Before you go on a Minecraft Pi coding rampage, you might find this list of av"
"ailable block types useful:"
msgstr ""
"Bevor Du jetzt mit Code durch Minecraft Pi tobst, hier noch eine praktische Li"
"ste aller Material-Typen für Minecraft-Blöcke:"

#: C.01-Basic-API.md:136
#, no-wrap
msgid ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
msgstr ""
"    :air\n"
"    :stone\n"
"    :grass\n"
"    :dirt\n"
"    :cobblestone\n"
"    :wood_plank\n"
"    :sapling\n"
"    :bedrock\n"
"    :water_flowing\n"
"    :water\n"
"    :water_stationary\n"
"    :lava_flowing\n"
"    :lava\n"
"    :lava_stationary\n"
"    :sand\n"
"    :gravel\n"
"    :gold_ore\n"
"    :iron_ore\n"
"    :coal_ore\n"
"    :wood\n"
"    :leaves\n"
"    :glass\n"
"    :lapis\n"
"    :lapis_lazuli_block\n"
"    :sandstone\n"
"    :bed\n"
"    :cobweb\n"
"    :grass_tall\n"
"    :flower_yellow\n"
"    :flower_cyan\n"
"    :mushroom_brown\n"
"    :mushroom_red\n"
"    :gold_block\n"
"    :gold\n"
"    :iron_block\n"
"    :iron\n"
"    :stone_slab_double\n"
"    :stone_slab\n"
"    :brick\n"
"    :brick_block\n"
"    :tnt\n"
"    :bookshelf\n"
"    :moss_stone\n"
"    :obsidian\n"
"    :torch\n"
"    :fire\n"
"    :stairs_wood\n"
"    :chest\n"
"    :diamond_ore\n"
"    :diamond_block\n"
"    :diamond\n"
"    :crafting_table\n"
"    :farmland\n"
"    :furnace_inactive\n"
"    :furnace_active\n"
"    :door_wood\n"
"    :ladder\n"
"    :stairs_cobblestone\n"
"    :door_iron\n"
"    :redstone_ore\n"
"    :snow\n"
"    :ice\n"
"    :snow_block\n"
"    :cactus\n"
"    :clay\n"
"    :sugar_cane\n"
"    :fence\n"
"    :glowstone_block\n"
"    :bedrock_invisible\n"
"    :stone_brick\n"
"    :glass_pane\n"
"    :melon\n"
"    :fence_gate\n"
"    :glowing_obsidian\n"
"    :nether_reactor_core"
