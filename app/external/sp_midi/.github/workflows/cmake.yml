name: CMake

on: [push, pull_request, workflow_dispatch]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix

    steps:
    - uses: actions/checkout@v2

    - name: Fetch packages (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install -y libasound2-dev librtmidi-dev

    - name: Linux Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: '24'
        elixir-version: '1.13'
      if: matrix.os == 'ubuntu-latest'

    - name: Win Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: '24'
        elixir-version: '1.13'
      if: runner.os == 'Windows'

    - name: Mac Elixir
      continue-on-error: true
      if: runner.os == 'macOS'
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        brew update
        brew install elixir


#    - name: Setup tmate session
#      if: runner.os == 'Windows'
#      uses: mxschmitt/action-tmate@v3
#      timeout-minutes: 15

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE
